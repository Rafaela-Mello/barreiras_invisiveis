# -*- coding: utf-8 -*-
"""Projeto SIC

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12XHbISdS-D9QF_aNKnE87bd2Th5Lb-s2
"""

from google.colab import files
import pandas as pd

uploaded = files.upload()

# Try reading the CSV file with a different encoding, such as 'latin1'
df = pd.read_csv('Dados Respostas att.csv', encoding='latin1')
# If 'latin1' doesn't work, try other encodings like 'ISO-8859-1', 'cp1252', etc.

print(df.head(50))

"""# **1 - ORIGINAL**

## CÓDIGO GERAL
"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

import numpy as np
import matplotlib.pyplot as plt

# Geração do modelo   coef = inv(Xt*X)*(Xt*Y)
# O MODELO MATEMÁTICO POSSUI UMA CONSTANTE    Y= AX + B
# A COLUNA COM 1´s GARANTE QUE A CONSTANTE B SEJA DETERMINADA
# O MODELO FICARÁ Y = B + AX POR CONTA DA PRIMEIRA COLUNA

X = np.array([

# constante umidade temperatura velocidade do vento
# resposta prevista (yprev)= constante +  a.informações pessoais + b.jornadas excessivas + c.salário inadequado + d.falta de oport. cresc. + e.ambiente de trab. tóxico
                                    #  +  f.trabalho repetitivo e monótono + g.falta de flexibilidade + h.falta de rec. e recompensa + i.condições de trabalho perigosas
                                    #  +  j.pressão excessiva e metas irrealistas + k.falta de autonomia

# ----------------------------------------------------------------------- anotações

# tópicos importantes que impactam:
# 1-3: não satisfeito | 3: satisfeito | 4-5: feliz

# Informações Pessoais
# 1.1 -> M: 5 | F: 3 | Outro: ??
# 1.2 -> 0: 5 | 1: 4 | 2: 3 | 3: 2 | 4+: 1
# 1.3 -> --
# 1.4 -> presencial: 3 | hibrido: 4 | remoto: 5

# Jornadas Excessivas de Trabalho
# 2.1 -> Até 20h: 5 | Até 30h: 4 | Até 40h: 3 | Até 50h: 2 | De 50h+: 1
# 2.2 -> 1 a 5 invertendo
# 2.3 -> 1 a 5 invertendo
# 2.4 -> --
# 2.5 -> fazer média do 1 a 5 invertendo

# Salário Inadequado(tirei esse)
# 3.1 -> 1: 5 | 2: 1

# Falta de Oportunidades de Crescimento(tirei esse)
# 4.1 -> 1 a 5 normal
# 4.2 -> 1 a 5 normal
# 4.3 -> 1 a 5 invertendo


# Ambiente de Trabalho Tóxico
# 5.1 -> 1: 1°normal - 2°invertido - 3°invertido - 4°normal | 2: 5
# 5.2 -> 1 a 5 normal

# Trabalho Repetitivo e Monótono
# 6.1 -> 1 a 5 normal
# 6.2 -> 1 a 5 invertendo

# Falta de Flexibilidade
# 7.1 -> 1 a 5 normal
# 7.2 -> 1 a 5 normal

# Falta de Reconhecimento e Recompensa
# 8.1 -> 1 a 5 normal

# Condições de Trabalho Perigosas
# 9.1 -> 1 a 5 normal
# 9.2 -> 1 a 5: 1 | 6: 5

# Pressão Excessiva e Metas Irrealistas
# 10.1 -> 1 a 5 invertendo
# 10.2 -> 1 a 5 invertendo

# Falta de Autonomia
# 11.1 -> 1 a 5 normal
  #  0        1     2   3(tirei)  4(tirei)  (3)5     (4)6   (5)7    (6)8    (7)9  (8)10
[   3,     1.83,   1,    2.6,    1.625,    1.5,      2,     1,      2,       5,    4]   ,      # 6 - F
[   4,      2.3,   1,   2.73,        4,      2,      2,     2,      4,     1.5,    2]   ,      # 7 - M
[   4,    2.165,   5,   3.86,      4.5,      5,    2.5,     4,    4.5,       4,    4]   ,      # 8 - M
[   5,      2.3,   1,    2.6,        5,      4,      3,     2,    2.5,       2,    2]   ,      # 9 - M
[   5,      3.5,   5,    3.6,      4.5,    4.5,    3.5,     4,      3,     2.5,    5]   ,      # 10 - M
[   3,    2.916,   5,    3.3,      4.5,      4,      4,     2,      4,       4,    4]   ,      # 11 - F
[   4,      3.3,   1,   2.26,        5,      3,      2,     4,    1.5,     4.5,    5]   ,      # 12 - M
[   3,      2.5,   5,    2.2,     3.62,    4.5,      3,     3,    2.5,     3.5,    4]   ,      # 13 - F
[   4,     2.75,   5,      3,        3,      3,      3,     3,      2,       2,    4]   ,      # 14 - M
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       1,    4]   ,      # 15 - F
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 16 - F
[   4,        3,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 17 - M
[ 4.5,     3.16,   5,   3.86,    3.125,      4,      3,     4,    2.5,       3,    4]   ,      # 18 - M
[ 4.5,        3,   5,   3.73,      4.5,      4,    3.5,     4,    2.5,       5,    5]   ,      # 19 - M
[   3,     2.16,   1,   3.46,     2.25,    3.5,   2.25,     3,    4.5,       3,    3]   ,      # 20 - F
[   4,     3.25,   1,   3.13,    2.625,      2,      3,     3,    2.5,       2,    4]   ,      # 21 - M
[ 4.5,      2.5,   5,   3.73,        5,    2.5,      3,     3,      5,     2.5,    2]   ,      # 22 - M
[   3,     3.25,   1,    2.4,      2.5,      3,      2,     2,      1,       4,    2]   ,      # 23 - F
[ 3.5,     1.83,   1,   2.33,    3.625,    2.5,    3.5,     1,    1.5,       3,    5]   ,      # 24 - F
[ 3.5,     2.33,   1,   1.66,      1.5,      2,      4,     1,    2.5,       3,    2]   ,      # 25 - F
[   4,      3.5,   5,   3.86,        5,      3,    4.5,     5,      5,     4.5,    4]   ,      # 26 - M
[ 3.5,     2.66,   5,   4.46,        2,    3.5,    3.5,     4,    3.5,       4,    5]   ,      # 27 - F
[   4,    2.916,   1,   3.46,      4.5,      4,      3,     4,      5,       5,    5]   ,      # 28 - M
[ 4.5,    2.083,   5,      3,        4,    1.5,      3,     2,      1,     3.5,    2]   ,      # 29 - M
[   4,     2.66,   1,    4.3,     1.25,      3,      3,     3,      2,       3,    5]   ,      # 30 - M
[   4,     3.66,   5,   4.93,        5,      5,    3.5,     5,      3,       3,    5]   ,      # 31 - M
[   5,    3.916,   5,   4.93,        5,    4.5,    3.5,     4,      5,       4,    3]   ,      # 32 - M
[ 4.5,     3.75,   5,   3.66,      3.5,      3,    3.5,     4,    3.5,       2,    4]   ,      # 33 - M
[   5,     3.16,   5,      4,        4,      4,      5,     4,    4.5,       5,    4]   ,      # 34 - M
[ 3.5,    2.083,   1,      3,      4.5,      4,    3.5,     3,      2,       2,    1]   ,      # 35 - F
[ 4.5,     2.33,   1,      5,        4,      5,      5,     5,      5,       5,    5]   ,      # 36 - M
[   4,        2,   5,   2.13,    2.625,    2.5,    2.5,     1,    1.5,       1,    2]   ,      # 37 - M
[ 4.5,    2.083,   5,   2.66,        5,    3.5,      3,     2,    2.5,       3,    5]   ,      # 38 - M
[   3,    2.083,   5,   2.86,      4.5,      2,    3.5,     4,    2.5,     1.5,    4]   ,      # 39 - F
[   4,      3.5,   5,   3.33,      4.5,    2.5,      3,     3,      5,       5,    1]   ,      # 40 - M
[   3,      1.5,   1,   3.33,        1,      1,      1,     1,      2,       1,    5]   ,      # 41 - F
[   3,    4.583,   1,   2.33,        3,      5,      1,     5,      3,       5,    1]   ,      # 42 - F
[   4,     3.25,   5,   3.33,      4.5,      1,      3,     3,    3.5,       5,    2]   ,      # 43 - M
[   3,     1.75,   5,   1.53,    3.125,      3,      2,     3,    1.5,       3,    3]   ,      # 44 - F
[   4,    1.583,   1,    2.8,     1.75,      4,    3.5,     3,      2,       2,    3]   ,      # 45 - M
[   3,    3.583,   1,   4.73,     2.25,      3,      1,     1,      2,       5,    1]   ,      # 46 - F
[   4,     2.75,   1,   2.06,     1.25,      4,      3,     5,    3.5,       4,    1]   ,      # 47 - M
[   4,    2.583,   1,      3,    2.875,      4,    2.5,     4,      2,       2,    5]   ,      # 48 - M
[   3,     1.83,   1,   1.16,     2.25,    4.5,    1.5,     1,    2.5,       5,    3]   ,      # 49 - F
[   4,     2.16,   5,   4.83,      4.5,      5,      3,     5,    2.5,     4.5,    5]   ,      # 50 - M
[   4,      3.5,   5,    4.4,        4,     4.5,   1.5,     4,      5,       5,    1]   ,      # 51 - M
[   3,     2.16,   1,   3.73,      3.5,     2.5,     3,     2,      2,       3,    2]   ,      # 52 - F
[   4,    3.083,   1,   3.11,    2.875,       4,     3,     1,      2,       4,    5]   ,      # 53 - M
[   4,    1.916,   1,   3.33,      4.5,       2,   2.5,     2,      2,       4,    3]   ,      # 54 - M
[   4,     2.16,   1,    3.8,        5,       5,   2.5,     4,      2,       3,    5]   ,      # 55 - M
[   5,      2.5,   1,    2.4,        4,       5,   4.5,     1,    2.5,     3.5,    4]   ,      # 56 - M
[   3,    2.916,   1,   3.26,        2,     2.5,   1.5,     2,      2,       2,    4]   ,      # 57 - F
[ 4.5,     3.66,   5,      4,        4,     2.5,   2.5,     4,      5,       4,    1]   ,      # 58 - M
[   3,     1.75,   1,   3.46,        4,     3.5,   3.5,     4,      2,     1.5,    5]   ,      # 59 - F
[   4,        5,   5,      5,        5,       3,     2,     1,      2,       5,    1]   ,      # 60 - M
[   4,     4.25,   5,   2.73,        4,     2.5,     5,     2,      3,     3.5,    3]   ,      # 61 - M
[   4,     3.25,   1,      4,        4,       3,     3,     3,      2,       3,    3]   ,      # 62 - M
[ 4.5,     3.25,   5,      3,        3,       3,     3,     3,      2,       3,    2]   ,      # 63 - M
[   3,      3.5,   5,    2.6,    3.375,       2,     3,     3,      2,     3.5,    4]   ,      # 64 - F
[   3,    3.075,   1,   2.53,        4,       3,     3,     3,      2,       3,    3]   ,      # 65 - F
[ 4.5,    1.416,   5,    4.3,        4,     2.5,   3.5,     3,      2,       1,    5]   ,      # 66 - M
[ 3.5,     3.25,   1,    2.6,        4,       2,   2.5,     4,      2,       1,    5]   ,      # 67 - F
[   5,     3.41,   1,      3,        4,     3.5,     3,     3,      2,     2.5,    3]   ,      # 68 - M
[   5,        3,   1,    2.6,      3.5,       3,   2.5,     4,      2,       3,    3]   ,      # 69 - M
[   4,      3.5,   1,    2.6,        4,       3,     2,     2,    1.5,       4,    2]   ,      # 70 - F
[ 3.5,        4,   1,    2.8,      2.5,       3,     2,     2,    1.5,       4,    2]   ,      # 71 - F
[ 3.5,      3.8,   1,    3.2,      3.5,       3,     2,     2,    1.5,       4,    2]   ,      # 72 - F
[ 4.5,     3.66,   1,    3.3,    4.125,     1.5,   1.5,     2,      3,     2.5,    5]   ,      # 73 - M
[ 3.5,     3.25,   1,      3,     2.75,     2.5,   2.5,     2,    1.5,       4,    2]   ,      # 74 - F
[ 4.5,        3,   5,    3.8,      4.5,       4,   3.5,     4,    4.5,       2,    4]   ,      # 75 - M
[ 3.5,      2.5,   1,    2.8,      4.5,       4,     3,     3,      4,     4.5,    1]   ,      # 76 - F
[   4,      2.5,   5,    4.2,      3.5,     3.5,   4.5,     2,    2.5,       3,    2]   ,      # 77 - F
[ 3.5,     3.75,   1,    2.7,      3.5,       3,     2,     2,    1.5,       4,    2]   ,      # 78 - F
[ 3.5,        1,   1,    3.6,        4,       3,   4.5,     5,      3,       2,    5]   ,      # 79 - F
[   4,     1.75,   1,   1.53,      1.5,       1,     1,     1,      1,     1.5,    2]   ,      # 80 - M
[ 4.5,     3.17,   1,   2.46,      3.5,     3.5,     3,     2,      4,       3,    3]   ,      # 81 - M
[   4,     2.75,   1,    2.5,        5,       4,   3.5,     3,    1.5,     2.5,    2]   ,      # 82 - M
[   4,     2.16,   1,    2.6,      3.5,       2,   3.5,     2,    4.5,       3,    5]   ,      # 83 - F
[   4,      3.5,   1,      4,        5,     3.5,   3.5,     3,    3.5,       3,    5]   ,      # 84 - M
[ 3.5,     2.75,   1,    2.8,    3.125,       4,     3,     3,    2.5,     2.5,    3]   ,      # 85 - F
[   4,     3.08,   1,   3.83,        4,       2,   3.5,     3,    4.5,     3.5,    4]   ,      # 86 - F
[   4,     3.75,   5,   3.66,        3,       3,     3,     3,      2,       3,    3]   ,      # 87 - M
[ 3.5,     2.75,   1,   3.06,      4.5,       2,     3,     3,    1.5,       3,    3]   ,      # 88 - F
[ 3.5,      3.5,   1,    2.6,      4.5,     2.5,     2,     2,    1.5,       4,    2]   ,      # 89 - F
[   3,     3.85,   1,   2.66,     2.25,     2.5,   1.5,     3,    1.5,     3.5,    3]   ,      # 90 - F
[ 3.5,     3.33,   1,   4.86,        4,     3.5,     4,     5,    2.5,     1.5,    2]   ,      # 91 - F
[   4,        5,   5,    3.5,        2,       3,     1,     1,      1,       5,    1]   ,      # 92 - M
[ 3.5,     2.75,   1,      3,     3.38,     1.5,   2.5,     4,    1.5,     3.5,    4]   ,      # 93 - F
[   5,     3.25,   1,    3.4,     3.66,       2,   2.5,     4,      2,     2.5,    2]   ,      # 94 - M
[ 3.5,      3.5,   1,    3.4,      3.5,     2.5,   2.5,     3,      2,     2.5,    2]   ,      # 95 - F
[ 3.5,        3,   1,   3.27,     2.88,     2.5,   3.5,     3,    1.5,     2.5,    2]   ,      # 96 - F
[ 3.5,     3.08,   1,   3.33,        4,       2,   3.5,     2,    1.5,     2.5,    2]   ,      # 97 - F
[   4,     3.41,   1,   3.27,      3.5,       2,   2.5,     3,    2.5,       3,    3]   ,      # 98 - M
[ 3.5,     3.25,   5,    2.6,     3.38,     2.5,   3.5,     2,    2.5,     3.5,    4]   ,      # 99 - F
[   5,        3,   5,    2.7,     2.75,     2.5,   2.5,     4,      2,     2.5,    3]   ,      # 100 - M
[   3,      3.3,   1,    2.7,        4,     3.5,   2.5,     4,    1.5,     2.5,    2]   ,      # 101 - F
[   4,     3.08,   1,    2.5,      3.5,       2,     2,     3,    1.5,     3.5,    2]   ,      # 102 - F

])

# Bem-Estar: média das 4 perguntas do bem-estar
Y = np.array([
[   1.25   ] ,      # 6 - F
[   2.75   ] ,      # 7 - M
[   3.5    ]   ,    # 8 - M
[   2.75   ]   ,    # 9 - M
[   4.25   ]   ,    # 10 - M
[   3      ]   ,    # 11 - F
[   4      ]   ,    # 12 - M
[   3.5    ]   ,    # 13 - F
[   3      ]   ,    # 14 - M
[   3      ]   ,    # 15 - F
[   3      ]   ,    # 16 - F
[   3      ]   ,    # 17 - M
[   4      ] ,      # 18 - M
[   4      ] ,      # 19 - M
[   3      ]   ,    # 20 - F
[   3.5    ]   ,    # 21 - M
[   2.75   ]   ,    # 22 - M
[   2      ]   ,    # 23 - F
[   2.5    ]   ,    # 24 - F
[   1.75   ]   ,    # 25 - F
[   3.75   ]   ,    # 26 - M
[   3.5    ]   ,    # 27 - F
[   4      ]   ,    # 28 - M
[   1.75   ]   ,    # 29 - M
[   2.5    ]   ,    # 30 - M
[   5      ]   ,    # 31 - M
[   4.75   ]   ,    # 32 - M
[   3.75   ]   ,    # 33 - M
[   4.5    ]   ,    # 34 - M
[   2      ]   ,    # 35 - F
[   4      ]   ,    # 36 - M
[   3      ]   ,    # 37 - M
[   4      ]   ,    # 38 - M
[   3.75   ]   ,    # 39 - F
[   5      ]   ,    # 40 - M
[   1      ]   ,    # 41 - F
[   1.75   ]   ,    # 42 - F
[   3      ]   ,    # 43 - M
[   1.5    ]   ,    # 44 - F
[   2.75   ]   ,    # 45 - M
[   1      ]   ,    # 46 - F
[   3      ]   ,    # 47 - M
[   1.5    ]   ,    # 48 - M
[   2.75   ]   ,    # 49 - F
[   4.5    ]   ,    # 50 - M
[   4.5    ]   ,    # 51 - M
[   2.75   ]   ,    # 52 - F
[   4.25   ]   ,    # 53 - M
[   3.25   ]   ,    # 54 - M
[   3.75   ]   ,    # 55 - M
[   2      ]   ,    # 56 - M
[   3.75   ]   ,    # 57 - F
[   2.75   ]   ,    # 58 - M
[   2.5    ]   ,    # 59 - F
[   1      ]   ,    # 60 - M
[   4      ]   ,    # 61 - M
[   3      ]   ,    # 62 - M
[   3      ]   ,    # 63 - M
[   3      ]   ,    # 64 - F
[   3      ]   ,    # 65 - F
[   2.5    ]   ,    # 66 - M
[   2.5    ]   ,    # 67 - F
[   2.75   ]   ,    # 68 - M
[   3      ]   ,    # 69 - M
[   2      ]   ,    # 70 - F
[   2      ]   ,    # 71 - F
[   2      ]   ,    # 72 - F
[   3.5    ]   ,    # 73 - M
[   2.25   ]   ,    # 74 - F
[   4      ]   ,    # 75 - M
[   3.25   ]   ,    # 76 - F
[   3.5    ]   ,    # 77 - F
[   2      ]   ,    # 78 - F
[   5      ]   ,    # 79 - F
[   1.75   ]   ,    # 80 - M
[   3      ]   ,    # 81 - M
[   3.75   ]   ,    # 82 - M
[   3.5    ]   ,    # 83 - F
[   3      ]   ,    # 84 - M
[   3.25   ]   ,    # 85 - F
[   2.5    ]   ,    # 86 - F
[   3      ]   ,    # 87 - M
[   3      ]   ,    # 88 - F
[   2      ]   ,    # 89 - F
[   2.25   ]   ,    # 90 - F
[   3.5    ]   ,    # 91 - F
[   1      ]   ,    # 92 - M
[   2.5    ]   ,    # 93 - F
[   3.5    ]   ,    # 94 - M
[   3      ]   ,    # 95 - F
[   3.25   ]   ,    # 96 - F
[   3      ]   ,    # 97 - F
[   3      ]   ,    # 98 - M
[   3      ]   ,    # 99 - F
[   3      ]   ,    # 100 - M
[   3.25   ]   ,    # 101 - F
[   2      ]   ,    # 102 - F

])


'''
X_one = X
################################ Regressão Linear ###################
Xt = np.transpose(X)          # CRIA A TRANSPOSTA DA MATRIZ X (Xt)
XtX = np.matmul(Xt,X)         # MULTIPLICA Xt POR X
XtX_inv = np.linalg.inv(XtX)  # INVERTE (Xt*X)
XtY = np.matmul(Xt,Y)         # MULTIPLICA Xt POR Y
coef = np.matmul(XtX_inv,XtY) # TERMINA O CÁLCULO
print ("coeficientes: constante | informações pessoais | jornadas excessivas | falta de flexibilidade","", coef)
#####################################################################
print("")
Yprev = np.matmul(X_one,coef)
predY = Yprev
#################### Gráfico com os dados ##########################  Umidade
plt.xlabel('Informações Pessoais')
plt.ylabel('Prob. de felicidade')
plt.scatter(X[:,1],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
#################### Gráfico com os dados ########################## Temperatura
plt.xlabel('Jornadas Excessivas')
plt.ylabel('Prob. de felicidade')
plt.scatter(X[:,2],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
#################### Gráfico com os dados ########################## Vento
plt.xlabel('Falta de Flexibilidade')
plt.ylabel('Prob. de felicidade')
plt.scatter(X[:,3],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
################## Gráfico com os dados reais x previstos###########
plt.scatter(Y,predY,c = 'blue', s=15, alpha=0.5)
plt.xlabel('Prob real')
plt.ylabel('Prob prev')
plt.show ()
#################### Gráfico dos resíduos ##########################
residual = Y - Yprev
plt.scatter(Y,residual,c = 'red', s=15, alpha=0.5)
plt.xlabel('Y')
plt.ylabel('Residual')
plt.title('Residual')
plt.show()'''
########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

#print("Valores previstos pelo modelo:", predY)
#print("Valores reais:", Y)
#print("Diferença entres Valores previstos e reais (erro):",Y - predY)
#print("Soma dos erros", sum(Y - predY))

################## MODELO ########################################################
# Prob de chuva = 2,3942 + 0,99634.umidade + 1,1904.temperatura - 0,4004.velocidada
# intevalos estudados
# umidade:  20 - 60
# temperatura: 15 -35
# velocidade: 10 - 50

#exemplo, um dia com as condições umidade 35%, temperatura 30°C e velocidade 45 km/h
# resposta prevista= constante +     a. (umidade) +   b.  temperatura + c. velocidade
# Prob de chuva =     2,3942   +  0,99634.   (35) +  1,1904 . 30     - 0,4004  .45
# Prob de chuva = 54,96 %
###################################################################################

"""## TESTE PARA BEM-ESTAR SEPARADOS"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   3,     1.83,   1,    2.6,    1.625,    1.5,      2,     1,      2,       5,    4]   ,      # 6 - F
[   4,      2.3,   1,   2.73,        4,      2,      2,     2,      4,     1.5,    2]   ,      # 7 - M
[   4,    2.165,   5,   3.86,      4.5,      5,    2.5,     4,    4.5,       4,    4]   ,      # 8 - M
[   5,      2.3,   1,    2.6,        5,      4,      3,     2,    2.5,       2,    2]   ,      # 9 - M
[   5,      3.5,   5,    3.6,      4.5,    4.5,    3.5,     4,      3,     2.5,    5]   ,      # 10 - M
[   3,    2.916,   5,    3.3,      4.5,      4,      4,     2,      4,       4,    4]   ,      # 11 - F
[   4,      3.3,   1,   2.26,        5,      3,      2,     4,    1.5,     4.5,    5]   ,      # 12 - M
[   3,      2.5,   5,    2.2,     3.62,    4.5,      3,     3,    2.5,     3.5,    4]   ,      # 13 - F
[   4,     2.75,   5,      3,        3,      3,      3,     3,      2,       2,    4]   ,      # 14 - M
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       1,    4]   ,      # 15 - F
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 16 - F
[   4,        3,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 17 - M
[ 4.5,     3.16,   5,   3.86,    3.125,      4,      3,     4,    2.5,       3,    4]   ,      # 18 - M
[ 4.5,        3,   5,   3.73,      4.5,      4,    3.5,     4,    2.5,       5,    5]   ,      # 19 - M
[   3,     2.16,   1,   3.46,     2.25,    3.5,   2.25,     3,    4.5,       3,    3]   ,      # 20 - F
[   4,     3.25,   1,   3.13,    2.625,      2,      3,     3,    2.5,       2,    4]   ,      # 21 - M
[ 4.5,      2.5,   5,   3.73,        5,    2.5,      3,     3,      5,     2.5,    2]   ,      # 22 - M
[   3,     3.25,   1,    2.4,      2.5,      3,      2,     2,      1,       4,    2]   ,      # 23 - F
[ 3.5,     1.83,   1,   2.33,    3.625,    2.5,    3.5,     1,    1.5,       3,    5]   ,      # 24 - F
[ 3.5,     2.33,   1,   1.66,      1.5,      2,      4,     1,    2.5,       3,    2]   ,      # 25 - F
[   4,      3.5,   5,   3.86,        5,      3,    4.5,     5,      5,     4.5,    4]   ,      # 26 - M
[ 3.5,     2.66,   5,   4.46,        2,    3.5,    3.5,     4,    3.5,       4,    5]   ,      # 27 - F
[   4,    2.916,   1,   3.46,      4.5,      4,      3,     4,      5,       5,    5]   ,      # 28 - M
[ 4.5,    2.083,   5,      3,        4,    1.5,      3,     2,      1,     3.5,    2]   ,      # 29 - M
[   4,     2.66,   1,    4.3,     1.25,      3,      3,     3,      2,       3,    5]   ,      # 30 - M
[   4,     3.66,   5,   4.93,        5,      5,    3.5,     5,      3,       3,    5]   ,      # 31 - M
[   5,    3.916,   5,   4.93,        5,    4.5,    3.5,     4,      5,       4,    3]   ,      # 32 - M
[ 4.5,     3.75,   5,   3.66,      3.5,      3,    3.5,     4,    3.5,       2,    4]   ,      # 33 - M
[   5,     3.16,   5,      4,        4,      4,      5,     4,    4.5,       5,    4]   ,      # 34 - M
[ 3.5,    2.083,   1,      3,      4.5,      4,    3.5,     3,      2,       2,    1]   ,      # 35 - F
[ 4.5,     2.33,   1,      5,        4,      5,      5,     5,      5,       5,    5]   ,      # 36 - M
[   4,        2,   5,   2.13,    2.625,    2.5,    2.5,     1,    1.5,       1,    2]   ,      # 37 - M
[ 4.5,    2.083,   5,   2.66,        5,    3.5,      3,     2,    2.5,       3,    5]   ,      # 38 - M
[   3,    2.083,   5,   2.86,      4.5,      2,    3.5,     4,    2.5,     1.5,    4]   ,      # 39 - F
[   4,      3.5,   5,   3.33,      4.5,    2.5,      3,     3,      5,       5,    1]   ,      # 40 - M
[   3,      1.5,   1,   3.33,        1,      1,      1,     1,      2,       1,    5]   ,      # 41 - F
[   3,    4.583,   1,   2.33,        3,      5,      1,     5,      3,       5,    1]   ,      # 42 - F
[   4,     3.25,   5,   3.33,      4.5,      1,      3,     3,    3.5,       5,    2]   ,      # 43 - M
[   3,     1.75,   5,   1.53,    3.125,      3,      2,     3,    1.5,       3,    3]   ,      # 44 - F
[   4,    1.583,   1,    2.8,     1.75,      4,    3.5,     3,      2,       2,    3]   ,      # 45 - M
[   3,    3.583,   1,   4.73,     2.25,      3,      1,     1,      2,       5,    1]   ,      # 46 - F
[   4,     2.75,   1,   2.06,     1.25,      4,      3,     5,    3.5,       4,    1]   ,      # 47 - M
[   4,    2.583,   1,      3,    2.875,      4,    2.5,     4,      2,       2,    5]   ,      # 48 - M
[   3,     1.83,   1,   1.16,     2.25,    4.5,    1.5,     1,    2.5,       5,    3]   ,      # 49 - F
[   4,     2.16,   5,   4.83,      4.5,      5,      3,     5,    2.5,     4.5,    5]   ,      # 50 - M
[   4,      3.5,   5,    4.4,        4,     4.5,   1.5,     4,      5,       5,    1]   ,      # 51 - M
[   3,     2.16,   1,   3.73,      3.5,     2.5,     3,     2,      2,       3,    2]   ,      # 52 - F
[   4,    3.083,   1,   3.11,    2.875,       4,     3,     1,      2,       4,    5]   ,      # 53 - M
[   4,    1.916,   1,   3.33,      4.5,       2,   2.5,     2,      2,       4,    3]   ,      # 54 - M
[   4,     2.16,   1,    3.8,        5,       5,   2.5,     4,      2,       3,    5]   ,      # 55 - M
[   5,      2.5,   1,    2.4,        4,       5,   4.5,     1,    2.5,     3.5,    4]   ,      # 56 - M
[   3,    2.916,   1,   3.26,        2,     2.5,   1.5,     2,      2,       2,    4]   ,      # 57 - F
[ 4.5,     3.66,   5,      4,        4,     2.5,   2.5,     4,      5,       4,    1]   ,      # 58 - M
[   3,     1.75,   1,   3.46,        4,     3.5,   3.5,     4,      2,     1.5,    5]   ,      # 59 - F
[   4,        5,   5,      5,        5,       3,     2,     1,      2,       5,    1]   ,      # 60 - M
[   4,     4.25,   5,   2.73,        4,     2.5,     5,     2,      3,     3.5,    3]   ,      # 61 - M
[   4,     3.25,   1,      4,        4,       3,     3,     3,      2,       3,    3]   ,      # 62 - M
[ 4.5,     3.25,   5,      3,        3,       3,     3,     3,      2,       3,    2]   ,      # 63 - M
[   3,      3.5,   5,    2.6,    3.375,       2,     3,     3,      2,     3.5,    4]   ,      # 64 - F
[   3,    3.075,   1,   2.53,        4,       3,     3,     3,      2,       3,    3]   ,      # 65 - F
[ 4.5,    1.416,   5,    4.3,        4,     2.5,   3.5,     3,      2,       1,    5]   ,      # 66 - M
[ 3.5,     3.25,   1,    2.6,        4,       2,   2.5,     4,      2,       1,    5]   ,      # 67 - F
[   5,     3.41,   1,      3,        4,     3.5,     3,     3,      2,     2.5,    3]   ,      # 68 - M
[   5,        3,   1,    2.6,      3.5,       3,   2.5,     4,      2,       3,    3]   ,      # 69 - M
[   4,      3.5,   1,    2.6,        4,       3,     2,     2,    1.5,       4,    2]   ,      # 70 - F
[ 3.5,        4,   1,    2.8,      2.5,       3,     2,     2,    1.5,       4,    2]   ,      # 71 - F
[ 3.5,      3.8,   1,    3.2,      3.5,       3,     2,     2,    1.5,       4,    2]   ,      # 72 - F
[ 4.5,     3.66,   1,    3.3,    4.125,     1.5,   1.5,     2,      3,     2.5,    5]   ,      # 73 - M
[ 3.5,     3.25,   1,      3,     2.75,     2.5,   2.5,     2,    1.5,       4,    2]   ,      # 74 - F
[ 4.5,        3,   5,    3.8,      4.5,       4,   3.5,     4,    4.5,       2,    4]   ,      # 75 - M
[ 3.5,      2.5,   1,    2.8,      4.5,       4,     3,     3,      4,     4.5,    1]   ,      # 76 - F
[   4,      2.5,   5,    4.2,      3.5,     3.5,   4.5,     2,    2.5,       3,    2]   ,      # 77 - F
[ 3.5,     3.75,   1,    2.7,      3.5,       3,     2,     2,    1.5,       4,    2]   ,      # 78 - F
[ 3.5,        1,   1,    3.6,        4,       3,   4.5,     5,      3,       2,    5]   ,      # 79 - F
[   4,     1.75,   1,   1.53,      1.5,       1,     1,     1,      1,     1.5,    2]   ,      # 80 - M
[ 4.5,     3.17,   1,   2.46,      3.5,     3.5,     3,     2,      4,       3,    3]   ,      # 81 - M
[   4,     2.75,   1,    2.5,        5,       4,   3.5,     3,    1.5,     2.5,    2]   ,      # 82 - M
[   4,     2.16,   1,    2.6,      3.5,       2,   3.5,     2,    4.5,       3,    5]   ,      # 83 - F
[   4,      3.5,   1,      4,        5,     3.5,   3.5,     3,    3.5,       3,    5]   ,      # 84 - M
[ 3.5,     2.75,   1,    2.8,    3.125,       4,     3,     3,    2.5,     2.5,    3]   ,      # 85 - F
[   4,     3.08,   1,   3.83,        4,       2,   3.5,     3,    4.5,     3.5,    4]   ,      # 86 - F
[   4,     3.75,   5,   3.66,        3,       3,     3,     3,      2,       3,    3]   ,      # 87 - M
[ 3.5,     2.75,   1,   3.06,      4.5,       2,     3,     3,    1.5,       3,    3]   ,      # 88 - F
[ 3.5,      3.5,   1,    2.6,      4.5,     2.5,     2,     2,    1.5,       4,    2]   ,      # 89 - F
[   3,     3.85,   1,   2.66,     2.25,     2.5,   1.5,     3,    1.5,     3.5,    3]   ,      # 90 - F
[ 3.5,     3.33,   1,   4.86,        4,     3.5,     4,     5,    2.5,     1.5,    2]   ,      # 91 - M
[   4,        5,   5,    3.5,        2,       3,     1,     1,      1,       5,    1]   ,      # 92 - M
[ 3.5,     2.75,   1,      3,     3.38,     1.5,   2.5,     4,    1.5,     3.5,    4]   ,      # 93 - F
[   5,     3.25,   1,    3.4,     3.66,       2,   2.5,     4,      2,     2.5,    2]   ,      # 94 - M
[ 3.5,      3.5,   1,    3.4,      3.5,     2.5,   2.5,     3,      2,     2.5,    2]   ,      # 95 - F
[ 3.5,        3,   1,   3.27,     2.88,     2.5,   3.5,     3,    1.5,     2.5,    2]   ,      # 96 - F
[ 3.5,     3.08,   1,   3.33,        4,       2,   3.5,     2,    1.5,     2.5,    2]   ,      # 97 - F
[   4,     3.41,   1,   3.27,      3.5,       2,   2.5,     3,    2.5,       3,    3]   ,      # 98 - M
[ 3.5,     3.25,   5,    2.6,     3.38,     2.5,   3.5,     2,    2.5,     3.5,    4]   ,      # 99 - F
[   5,        3,   5,    2.7,     2.75,     2.5,   2.5,     4,      2,     2.5,    3]   ,      # 100 - M
[   3,      3.3,   1,    2.7,        4,     3.5,   2.5,     4,    1.5,     2.5,    2]   ,      # 101 - F
[   4,     3.08,   1,    2.5,      3.5,       2,     2,     3,    1.5,     3.5,    2]   ,      # 102 - F

])


# Bem-Estar - 12.1 - avaliação satisfação geral com o trabalho
Y = np.array([
[   1   ]   ,    # 6
[   3   ]   ,    # 7
[   4   ]   ,    # 8
[   4   ]   ,    # 9
[   5   ]   ,    # 10
[   4   ]   ,    # 11
[   4   ]   ,    # 12
[   4   ]   ,    # 13
[   3   ]   ,    # 14
[   3   ]   ,    # 15
[   3   ]   ,    # 16
[   3   ]   ,    # 17
[   4   ]   ,    # 18
[   4   ]   ,    # 19
[   3   ]   ,    # 20
[   3   ]   ,    # 21
[   2   ]   ,    # 22
[   2   ]   ,    # 23
[   2   ]   ,    # 24
[   2   ]   ,    # 25
[   4   ]   ,    # 26
[   4   ]   ,    # 27
[   4   ]   ,    # 28
[   2   ]   ,    # 29
[   3   ]   ,    # 30
[   5   ]   ,    # 31
[   5   ]   ,    # 32
[   3   ]   ,    # 33
[   5   ]   ,    # 34
[   3   ]   ,    # 35
[   4   ]   ,    # 36
[   3   ]   ,    # 37
[   5   ]   ,    # 38
[   4   ]   ,    # 39
[   5   ]   ,    # 40
[   1   ]   ,    # 41
[   2   ]   ,    # 42
[   4   ]   ,    # 43
[   1   ]   ,    # 44
[   3   ]   ,    # 45
[   1   ]   ,    # 46
[   2   ]   ,    # 47
[   2   ]   ,    # 48
[   3   ]   ,    # 49
[   5   ]   ,    # 50
[   4   ]   ,    # 51
[   3   ]   ,    # 52
[   5   ]   ,    # 53
[   3   ]   ,    # 54
[   5   ]   ,    # 55
[   2   ]   ,    # 56
[   3   ]   ,    # 57
[   3   ]   ,    # 58
[   3   ]   ,    # 59
[   1   ]   ,    # 60
[   4   ]   ,    # 61
[   3   ]   ,    # 62
[   3   ]   ,    # 63
[   2   ]   ,    # 64
[   2   ]   ,    # 65
[   3   ]   ,    # 66
[   3   ]   ,    # 67
[   3   ]   ,    # 68
[   3   ]   ,    # 69
[   2   ]   ,    # 70
[   1   ]   ,    # 71
[   2   ]   ,    # 72
[   2   ]   ,    # 73
[   2   ]   ,    # 74
[   4   ]   ,    # 75
[   4   ]   ,    # 76
[   4   ]   ,    # 77
[   2   ]   ,    # 78
[   5   ]   ,    # 79
[   2   ]   ,    # 80
[   3   ]   ,    # 81
[   4   ]   ,    # 82
[   4   ]   ,    # 83
[   3   ]   ,    # 84
[   3   ]   ,    # 85
[   3   ]   ,    # 86
[   3   ]   ,    # 87
[   2   ]   ,    # 88
[   2   ]   ,    # 89
[   2   ]   ,    # 90
[   5   ]   ,    # 91
[   1   ]   ,    # 92
[   2   ]   ,    # 93
[   4   ]   ,    # 94
[   3   ]   ,    # 95
[   3   ]   ,    # 96
[   3   ]   ,    # 97
[   3   ]   ,    # 98
[   3   ]   ,    # 99
[   2   ]   ,    # 100
[   3   ]   ,    # 101
[   2   ]   ,    # 102

])

import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),annot=True, fmt=".2f",cmap='coolwarm')

plt.show()

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   3,     1.83,   1,    2.6,    1.625,    1.5,      2,     1,      2,       5,    4]   ,      # 6 - F
[   4,      2.3,   1,   2.73,        4,      2,      2,     2,      4,     1.5,    2]   ,      # 7 - M
[   4,    2.165,   5,   3.86,      4.5,      5,    2.5,     4,    4.5,       4,    4]   ,      # 8 - M
[   5,      2.3,   1,    2.6,        5,      4,      3,     2,    2.5,       2,    2]   ,      # 9 - M
[   5,      3.5,   5,    3.6,      4.5,    4.5,    3.5,     4,      3,     2.5,    5]   ,      # 10 - M
[   3,    2.916,   5,    3.3,      4.5,      4,      4,     2,      4,       4,    4]   ,      # 11 - F
[   4,      3.3,   1,   2.26,        5,      3,      2,     4,    1.5,     4.5,    5]   ,      # 12 - M
[   3,      2.5,   5,    2.2,     3.62,    4.5,      3,     3,    2.5,     3.5,    4]   ,      # 13 - F
[   4,     2.75,   5,      3,        3,      3,      3,     3,      2,       2,    4]   ,      # 14 - M
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       1,    4]   ,      # 15 - F
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 16 - F
[   4,        3,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 17 - M
[ 4.5,     3.16,   5,   3.86,    3.125,      4,      3,     4,    2.5,       3,    4]   ,      # 18 - M
[ 4.5,        3,   5,   3.73,      4.5,      4,    3.5,     4,    2.5,       5,    5]   ,      # 19 - M
[   3,     2.16,   1,   3.46,     2.25,    3.5,   2.25,     3,    4.5,       3,    3]   ,      # 20 - F
[   4,     3.25,   1,   3.13,    2.625,      2,      3,     3,    2.5,       2,    4]   ,      # 21 - M
[ 4.5,      2.5,   5,   3.73,        5,    2.5,      3,     3,      5,     2.5,    2]   ,      # 22 - M
[   3,     3.25,   1,    2.4,      2.5,      3,      2,     2,      1,       4,    2]   ,      # 23 - F
[ 3.5,     1.83,   1,   2.33,    3.625,    2.5,    3.5,     1,    1.5,       3,    5]   ,      # 24 - F
[ 3.5,     2.33,   1,   1.66,      1.5,      2,      4,     1,    2.5,       3,    2]   ,      # 25 - F
[   4,      3.5,   5,   3.86,        5,      3,    4.5,     5,      5,     4.5,    4]   ,      # 26 - M
[ 3.5,     2.66,   5,   4.46,        2,    3.5,    3.5,     4,    3.5,       4,    5]   ,      # 27 - F
[   4,    2.916,   1,   3.46,      4.5,      4,      3,     4,      5,       5,    5]   ,      # 28 - M
[ 4.5,    2.083,   5,      3,        4,    1.5,      3,     2,      1,     3.5,    2]   ,      # 29 - M
[   4,     2.66,   1,    4.3,     1.25,      3,      3,     3,      2,       3,    5]   ,      # 30 - M
[   4,     3.66,   5,   4.93,        5,      5,    3.5,     5,      3,       3,    5]   ,      # 31 - M
[   5,    3.916,   5,   4.93,        5,    4.5,    3.5,     4,      5,       4,    3]   ,      # 32 - M
[ 4.5,     3.75,   5,   3.66,      3.5,      3,    3.5,     4,    3.5,       2,    4]   ,      # 33 - M
[   5,     3.16,   5,      4,        4,      4,      5,     4,    4.5,       5,    4]   ,      # 34 - M
[ 3.5,    2.083,   1,      3,      4.5,      4,    3.5,     3,      2,       2,    1]   ,      # 35 - F
[ 4.5,     2.33,   1,      5,        4,      5,      5,     5,      5,       5,    5]   ,      # 36 - M
[   4,        2,   5,   2.13,    2.625,    2.5,    2.5,     1,    1.5,       1,    2]   ,      # 37 - M
[ 4.5,    2.083,   5,   2.66,        5,    3.5,      3,     2,    2.5,       3,    5]   ,      # 38 - M
[   3,    2.083,   5,   2.86,      4.5,      2,    3.5,     4,    2.5,     1.5,    4]   ,      # 39 - F
[   4,      3.5,   5,   3.33,      4.5,    2.5,      3,     3,      5,       5,    1]   ,      # 40 - M
[   3,      1.5,   1,   3.33,        1,      1,      1,     1,      2,       1,    5]   ,      # 41 - F
[   3,    4.583,   1,   2.33,        3,      5,      1,     5,      3,       5,    1]   ,      # 42 - F
[   4,     3.25,   5,   3.33,      4.5,      1,      3,     3,    3.5,       5,    2]   ,      # 43 - M
[   3,     1.75,   5,   1.53,    3.125,      3,      2,     3,    1.5,       3,    3]   ,      # 44 - F
[   4,    1.583,   1,    2.8,     1.75,      4,    3.5,     3,      2,       2,    3]   ,      # 45 - M
[   3,    3.583,   1,   4.73,     2.25,      3,      1,     1,      2,       5,    1]   ,      # 46 - F
[   4,     2.75,   1,   2.06,     1.25,      4,      3,     5,    3.5,       4,    1]   ,      # 47 - M
[   4,    2.583,   1,      3,    2.875,      4,    2.5,     4,      2,       2,    5]   ,      # 48 - M
[   3,     1.83,   1,   1.16,     2.25,    4.5,    1.5,     1,    2.5,       5,    3]   ,      # 49 - F
[   4,     2.16,   5,   4.83,      4.5,      5,      3,     5,    2.5,     4.5,    5]   ,      # 50 - M
[   4,      3.5,   5,    4.4,        4,     4.5,   1.5,     4,      5,       5,    1]   ,      # 51 - M
[   3,     2.16,   1,   3.73,      3.5,     2.5,     3,     2,      2,       3,    2]   ,      # 52 - F
[   4,    3.083,   1,   3.11,    2.875,       4,     3,     1,      2,       4,    5]   ,      # 53 - M
[   4,    1.916,   1,   3.33,      4.5,       2,   2.5,     2,      2,       4,    3]   ,      # 54 - M
[   4,     2.16,   1,    3.8,        5,       5,   2.5,     4,      2,       3,    5]   ,      # 55 - M
[   5,      2.5,   1,    2.4,        4,       5,   4.5,     1,    2.5,     3.5,    4]   ,      # 56 - M
[   3,    2.916,   1,   3.26,        2,     2.5,   1.5,     2,      2,       2,    4]   ,      # 57 - F
[ 4.5,     3.66,   5,      4,        4,     2.5,   2.5,     4,      5,       4,    1]   ,      # 58 - M
[   3,     1.75,   1,   3.46,        4,     3.5,   3.5,     4,      2,     1.5,    5]   ,      # 59 - F
[   4,        5,   5,      5,        5,       3,     2,     1,      2,       5,    1]   ,      # 60 - M
[   4,     4.25,   5,   2.73,        4,     2.5,     5,     2,      3,     3.5,    3]   ,      # 61 - M
[   4,     3.25,   1,      4,        4,       3,     3,     3,      2,       3,    3]   ,      # 62 - M
[ 4.5,     3.25,   5,      3,        3,       3,     3,     3,      2,       3,    2]   ,      # 63 - M
[   3,      3.5,   5,    2.6,    3.375,       2,     3,     3,      2,     3.5,    4]   ,      # 64 - F
[   3,    3.075,   1,   2.53,        4,       3,     3,     3,      2,       3,    3]   ,      # 65 - F
[ 4.5,    1.416,   5,    4.3,        4,     2.5,   3.5,     3,      2,       1,    5]   ,      # 66 - M
[ 3.5,     3.25,   1,    2.6,        4,       2,   2.5,     4,      2,       1,    5]   ,      # 67 - F
[   5,     3.41,   1,      3,        4,     3.5,     3,     3,      2,     2.5,    3]   ,      # 68 - M
[   5,        3,   1,    2.6,      3.5,       3,   2.5,     4,      2,       3,    3]   ,      # 69 - M
[   4,      3.5,   1,    2.6,        4,       3,     2,     2,    1.5,       4,    2]   ,      # 70 - F
[ 3.5,        4,   1,    2.8,      2.5,       3,     2,     2,    1.5,       4,    2]   ,      # 71 - F
[ 3.5,      3.8,   1,    3.2,      3.5,       3,     2,     2,    1.5,       4,    2]   ,      # 72 - F
[ 4.5,     3.66,   1,    3.3,    4.125,     1.5,   1.5,     2,      3,     2.5,    5]   ,      # 73 - M
[ 3.5,     3.25,   1,      3,     2.75,     2.5,   2.5,     2,    1.5,       4,    2]   ,      # 74 - F
[ 4.5,        3,   5,    3.8,      4.5,       4,   3.5,     4,    4.5,       2,    4]   ,      # 75 - M
[ 3.5,      2.5,   1,    2.8,      4.5,       4,     3,     3,      4,     4.5,    1]   ,      # 76 - F
[   4,      2.5,   5,    4.2,      3.5,     3.5,   4.5,     2,    2.5,       3,    2]   ,      # 77 - F
[ 3.5,     3.75,   1,    2.7,      3.5,       3,     2,     2,    1.5,       4,    2]   ,      # 78 - F
[ 3.5,        1,   1,    3.6,        4,       3,   4.5,     5,      3,       2,    5]   ,      # 79 - F
[   4,     1.75,   1,   1.53,      1.5,       1,     1,     1,      1,     1.5,    2]   ,      # 80 - M
[ 4.5,     3.17,   1,   2.46,      3.5,     3.5,     3,     2,      4,       3,    3]   ,      # 81 - M
[   4,     2.75,   1,    2.5,        5,       4,   3.5,     3,    1.5,     2.5,    2]   ,      # 82 - M
[   4,     2.16,   1,    2.6,      3.5,       2,   3.5,     2,    4.5,       3,    5]   ,      # 83 - F
[   4,      3.5,   1,      4,        5,     3.5,   3.5,     3,    3.5,       3,    5]   ,      # 84 - M
[ 3.5,     2.75,   1,    2.8,    3.125,       4,     3,     3,    2.5,     2.5,    3]   ,      # 85 - F
[   4,     3.08,   1,   3.83,        4,       2,   3.5,     3,    4.5,     3.5,    4]   ,      # 86 - F
[   4,     3.75,   5,   3.66,        3,       3,     3,     3,      2,       3,    3]   ,      # 87 - M
[ 3.5,     2.75,   1,   3.06,      4.5,       2,     3,     3,    1.5,       3,    3]   ,      # 88 - F
[ 3.5,      3.5,   1,    2.6,      4.5,     2.5,     2,     2,    1.5,       4,    2]   ,      # 89 - F
[   3,     3.85,   1,   2.66,     2.25,     2.5,   1.5,     3,    1.5,     3.5,    3]   ,      # 90 - F
[ 3.5,     3.33,   1,   4.86,        4,     3.5,     4,     5,    2.5,     1.5,    2]   ,      # 91 - M
[   4,        5,   5,    3.5,        2,       3,     1,     1,      1,       5,    1]   ,      # 92 - M
[ 3.5,     2.75,   1,      3,     3.38,     1.5,   2.5,     4,    1.5,     3.5,    4]   ,      # 93 - F
[   5,     3.25,   1,    3.4,     3.66,       2,   2.5,     4,      2,     2.5,    2]   ,      # 94 - M
[ 3.5,      3.5,   1,    3.4,      3.5,     2.5,   2.5,     3,      2,     2.5,    2]   ,      # 95 - F
[ 3.5,        3,   1,   3.27,     2.88,     2.5,   3.5,     3,    1.5,     2.5,    2]   ,      # 96 - F
[ 3.5,     3.08,   1,   3.33,        4,       2,   3.5,     2,    1.5,     2.5,    2]   ,      # 97 - F
[   4,     3.41,   1,   3.27,      3.5,       2,   2.5,     3,    2.5,       3,    3]   ,      # 98 - M
[ 3.5,     3.25,   5,    2.6,     3.38,     2.5,   3.5,     2,    2.5,     3.5,    4]   ,      # 99 - F
[   5,        3,   5,    2.7,     2.75,     2.5,   2.5,     4,      2,     2.5,    3]   ,      # 100 - M
[   3,      3.3,   1,    2.7,        4,     3.5,   2.5,     4,    1.5,     2.5,    2]   ,      # 101 - F
[   4,     3.08,   1,    2.5,      3.5,       2,     2,     3,    1.5,     3.5,    2]   ,      # 102 - F

])

# Bem-Estar - 12.2 - expectativas que você tinha ao ser contratado
Y = np.array([

[   2   ], #6
[   2   ], #7
[   4   ], #8
[   3   ], #9
[   4   ], #10
[   3   ], #11
[   5   ], #12
[   4   ], #13
[   3   ], #14
[   3   ], #15
[   3   ], #16
[   3   ], #17
[   4   ], #18
[   4   ], #19
[   3   ], #20
[   4   ], #21
[   2   ], #22
[   2   ], #23
[   2   ], #24
[   1   ], #25
[   4   ], #26
[   4   ], #27
[   4   ], #28
[   1   ], #29
[   1   ], #30
[   5   ], #31
[   5   ], #32
[   3   ], #33
[   5   ], #34
[   2   ], #35
[   5   ], #36
[   2   ], #37
[   5   ], #38
[   3   ], #39
[   5   ], #40
[   1   ], #41
[   1   ], #42
[   2   ], #43
[   2   ], #44
[   2   ], #45
[   1   ], #46
[   3   ], #47
[   2   ], #48
[   1   ], #49
[   5   ], #50
[   5   ], #51
[   2   ], #52
[   3   ], #53
[   3   ], #54
[   4   ], #55
[   1   ], #56
[   5   ], #57
[   2   ], #58
[   4   ], #59
[   1   ], #60
[   4   ], #61
[   3   ], #62
[   3   ], #63
[   4   ], #64
[   4   ], #65
[   2   ], #66
[   2   ], #67
[   2   ], #68
[   3   ], #69
[   2   ], #70
[   2   ], #71
[   2   ], #72
[   5   ], #73
[   2   ], #74
[   4   ], #75
[   3   ], #76
[   3   ], #77
[   2   ], #78
[   5   ], #79
[   1   ], #80
[   3   ], #81
[   2   ], #82
[   3   ], #83
[   4   ], #84
[   4   ], #85
[   2   ], #86
[   3   ], #87
[   3   ], #88
[   2   ], #89
[   3   ], #90
[   3   ], #91
[   1   ], #92
[   3   ], #93
[   3   ], #94
[   4   ], #95
[   4   ], #96
[   4   ], #97
[   2   ], #98
[   2   ], #99
[   4   ], #100
[   4   ], #101
[   2   ], #102

])

import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),annot=True, fmt=".2f",cmap='coolwarm')

plt.show()

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   3,     1.83,   1,    2.6,    1.625,    1.5,      2,     1,      2,       5,    4]   ,      # 6 - F
[   4,      2.3,   1,   2.73,        4,      2,      2,     2,      4,     1.5,    2]   ,      # 7 - M
[   4,    2.165,   5,   3.86,      4.5,      5,    2.5,     4,    4.5,       4,    4]   ,      # 8 - M
[   5,      2.3,   1,    2.6,        5,      4,      3,     2,    2.5,       2,    2]   ,      # 9 - M
[   5,      3.5,   5,    3.6,      4.5,    4.5,    3.5,     4,      3,     2.5,    5]   ,      # 10 - M
[   3,    2.916,   5,    3.3,      4.5,      4,      4,     2,      4,       4,    4]   ,      # 11 - F
[   4,      3.3,   1,   2.26,        5,      3,      2,     4,    1.5,     4.5,    5]   ,      # 12 - M
[   3,      2.5,   5,    2.2,     3.62,    4.5,      3,     3,    2.5,     3.5,    4]   ,      # 13 - F
[   4,     2.75,   5,      3,        3,      3,      3,     3,      2,       2,    4]   ,      # 14 - M
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       1,    4]   ,      # 15 - F
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 16 - F
[   4,        3,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 17 - M
[ 4.5,     3.16,   5,   3.86,    3.125,      4,      3,     4,    2.5,       3,    4]   ,      # 18 - M
[ 4.5,        3,   5,   3.73,      4.5,      4,    3.5,     4,    2.5,       5,    5]   ,      # 19 - M
[   3,     2.16,   1,   3.46,     2.25,    3.5,   2.25,     3,    4.5,       3,    3]   ,      # 20 - F
[   4,     3.25,   1,   3.13,    2.625,      2,      3,     3,    2.5,       2,    4]   ,      # 21 - M
[ 4.5,      2.5,   5,   3.73,        5,    2.5,      3,     3,      5,     2.5,    2]   ,      # 22 - M
[   3,     3.25,   1,    2.4,      2.5,      3,      2,     2,      1,       4,    2]   ,      # 23 - F
[ 3.5,     1.83,   1,   2.33,    3.625,    2.5,    3.5,     1,    1.5,       3,    5]   ,      # 24 - F
[ 3.5,     2.33,   1,   1.66,      1.5,      2,      4,     1,    2.5,       3,    2]   ,      # 25 - F
[   4,      3.5,   5,   3.86,        5,      3,    4.5,     5,      5,     4.5,    4]   ,      # 26 - M
[ 3.5,     2.66,   5,   4.46,        2,    3.5,    3.5,     4,    3.5,       4,    5]   ,      # 27 - F
[   4,    2.916,   1,   3.46,      4.5,      4,      3,     4,      5,       5,    5]   ,      # 28 - M
[ 4.5,    2.083,   5,      3,        4,    1.5,      3,     2,      1,     3.5,    2]   ,      # 29 - M
[   4,     2.66,   1,    4.3,     1.25,      3,      3,     3,      2,       3,    5]   ,      # 30 - M
[   4,     3.66,   5,   4.93,        5,      5,    3.5,     5,      3,       3,    5]   ,      # 31 - M
[   5,    3.916,   5,   4.93,        5,    4.5,    3.5,     4,      5,       4,    3]   ,      # 32 - M
[ 4.5,     3.75,   5,   3.66,      3.5,      3,    3.5,     4,    3.5,       2,    4]   ,      # 33 - M
[   5,     3.16,   5,      4,        4,      4,      5,     4,    4.5,       5,    4]   ,      # 34 - M
[ 3.5,    2.083,   1,      3,      4.5,      4,    3.5,     3,      2,       2,    1]   ,      # 35 - F
[ 4.5,     2.33,   1,      5,        4,      5,      5,     5,      5,       5,    5]   ,      # 36 - M
[   4,        2,   5,   2.13,    2.625,    2.5,    2.5,     1,    1.5,       1,    2]   ,      # 37 - M
[ 4.5,    2.083,   5,   2.66,        5,    3.5,      3,     2,    2.5,       3,    5]   ,      # 38 - M
[   3,    2.083,   5,   2.86,      4.5,      2,    3.5,     4,    2.5,     1.5,    4]   ,      # 39 - F
[   4,      3.5,   5,   3.33,      4.5,    2.5,      3,     3,      5,       5,    1]   ,      # 40 - M
[   3,      1.5,   1,   3.33,        1,      1,      1,     1,      2,       1,    5]   ,      # 41 - F
[   3,    4.583,   1,   2.33,        3,      5,      1,     5,      3,       5,    1]   ,      # 42 - F
[   4,     3.25,   5,   3.33,      4.5,      1,      3,     3,    3.5,       5,    2]   ,      # 43 - M
[   3,     1.75,   5,   1.53,    3.125,      3,      2,     3,    1.5,       3,    3]   ,      # 44 - F
[   4,    1.583,   1,    2.8,     1.75,      4,    3.5,     3,      2,       2,    3]   ,      # 45 - M
[   3,    3.583,   1,   4.73,     2.25,      3,      1,     1,      2,       5,    1]   ,      # 46 - F
[   4,     2.75,   1,   2.06,     1.25,      4,      3,     5,    3.5,       4,    1]   ,      # 47 - M
[   4,    2.583,   1,      3,    2.875,      4,    2.5,     4,      2,       2,    5]   ,      # 48 - M
[   3,     1.83,   1,   1.16,     2.25,    4.5,    1.5,     1,    2.5,       5,    3]   ,      # 49 - F
[   4,     2.16,   5,   4.83,      4.5,      5,      3,     5,    2.5,     4.5,    5]   ,      # 50 - M
[   4,      3.5,   5,    4.4,        4,     4.5,   1.5,     4,      5,       5,    1]   ,      # 51 - M
[   3,     2.16,   1,   3.73,      3.5,     2.5,     3,     2,      2,       3,    2]   ,      # 52 - F
[   4,    3.083,   1,   3.11,    2.875,       4,     3,     1,      2,       4,    5]   ,      # 53 - M
[   4,    1.916,   1,   3.33,      4.5,       2,   2.5,     2,      2,       4,    3]   ,      # 54 - M
[   4,     2.16,   1,    3.8,        5,       5,   2.5,     4,      2,       3,    5]   ,      # 55 - M
[   5,      2.5,   1,    2.4,        4,       5,   4.5,     1,    2.5,     3.5,    4]   ,      # 56 - M
[   3,    2.916,   1,   3.26,        2,     2.5,   1.5,     2,      2,       2,    4]   ,      # 57 - F
[ 4.5,     3.66,   5,      4,        4,     2.5,   2.5,     4,      5,       4,    1]   ,      # 58 - M
[   3,     1.75,   1,   3.46,        4,     3.5,   3.5,     4,      2,     1.5,    5]   ,      # 59 - F
[   4,        5,   5,      5,        5,       3,     2,     1,      2,       5,    1]   ,      # 60 - M
[   4,     4.25,   5,   2.73,        4,     2.5,     5,     2,      3,     3.5,    3]   ,      # 61 - M
[   4,     3.25,   1,      4,        4,       3,     3,     3,      2,       3,    3]   ,      # 62 - M
[ 4.5,     3.25,   5,      3,        3,       3,     3,     3,      2,       3,    2]   ,      # 63 - M
[   3,      3.5,   5,    2.6,    3.375,       2,     3,     3,      2,     3.5,    4]   ,      # 64 - F
[   3,    3.075,   1,   2.53,        4,       3,     3,     3,      2,       3,    3]   ,      # 65 - F
[ 4.5,    1.416,   5,    4.3,        4,     2.5,   3.5,     3,      2,       1,    5]   ,      # 66 - M
[ 3.5,     3.25,   1,    2.6,        4,       2,   2.5,     4,      2,       1,    5]   ,      # 67 - F
[   5,     3.41,   1,      3,        4,     3.5,     3,     3,      2,     2.5,    3]   ,      # 68 - M
[   5,        3,   1,    2.6,      3.5,       3,   2.5,     4,      2,       3,    3]   ,      # 69 - M
[   4,      3.5,   1,    2.6,        4,       3,     2,     2,    1.5,       4,    2]   ,      # 70 - F
[ 3.5,        4,   1,    2.8,      2.5,       3,     2,     2,    1.5,       4,    2]   ,      # 71 - F
[ 3.5,      3.8,   1,    3.2,      3.5,       3,     2,     2,    1.5,       4,    2]   ,      # 72 - F
[ 4.5,     3.66,   1,    3.3,    4.125,     1.5,   1.5,     2,      3,     2.5,    5]   ,      # 73 - M
[ 3.5,     3.25,   1,      3,     2.75,     2.5,   2.5,     2,    1.5,       4,    2]   ,      # 74 - F
[ 4.5,        3,   5,    3.8,      4.5,       4,   3.5,     4,    4.5,       2,    4]   ,      # 75 - M
[ 3.5,      2.5,   1,    2.8,      4.5,       4,     3,     3,      4,     4.5,    1]   ,      # 76 - F
[   4,      2.5,   5,    4.2,      3.5,     3.5,   4.5,     2,    2.5,       3,    2]   ,      # 77 - F
[ 3.5,     3.75,   1,    2.7,      3.5,       3,     2,     2,    1.5,       4,    2]   ,      # 78 - F
[ 3.5,        1,   1,    3.6,        4,       3,   4.5,     5,      3,       2,    5]   ,      # 79 - F
[   4,     1.75,   1,   1.53,      1.5,       1,     1,     1,      1,     1.5,    2]   ,      # 80 - M
[ 4.5,     3.17,   1,   2.46,      3.5,     3.5,     3,     2,      4,       3,    3]   ,      # 81 - M
[   4,     2.75,   1,    2.5,        5,       4,   3.5,     3,    1.5,     2.5,    2]   ,      # 82 - M
[   4,     2.16,   1,    2.6,      3.5,       2,   3.5,     2,    4.5,       3,    5]   ,      # 83 - F
[   4,      3.5,   1,      4,        5,     3.5,   3.5,     3,    3.5,       3,    5]   ,      # 84 - M
[ 3.5,     2.75,   1,    2.8,    3.125,       4,     3,     3,    2.5,     2.5,    3]   ,      # 85 - F
[   4,     3.08,   1,   3.83,        4,       2,   3.5,     3,    4.5,     3.5,    4]   ,      # 86 - F
[   4,     3.75,   5,   3.66,        3,       3,     3,     3,      2,       3,    3]   ,      # 87 - M
[ 3.5,     2.75,   1,   3.06,      4.5,       2,     3,     3,    1.5,       3,    3]   ,      # 88 - F
[ 3.5,      3.5,   1,    2.6,      4.5,     2.5,     2,     2,    1.5,       4,    2]   ,      # 89 - F
[   3,     3.85,   1,   2.66,     2.25,     2.5,   1.5,     3,    1.5,     3.5,    3]   ,      # 90 - F
[ 3.5,     3.33,   1,   4.86,        4,     3.5,     4,     5,    2.5,     1.5,    2]   ,      # 91 - M
[   4,        5,   5,    3.5,        2,       3,     1,     1,      1,       5,    1]   ,      # 92 - M
[ 3.5,     2.75,   1,      3,     3.38,     1.5,   2.5,     4,    1.5,     3.5,    4]   ,      # 93 - F
[   5,     3.25,   1,    3.4,     3.66,       2,   2.5,     4,      2,     2.5,    2]   ,      # 94 - M
[ 3.5,      3.5,   1,    3.4,      3.5,     2.5,   2.5,     3,      2,     2.5,    2]   ,      # 95 - F
[ 3.5,        3,   1,   3.27,     2.88,     2.5,   3.5,     3,    1.5,     2.5,    2]   ,      # 96 - F
[ 3.5,     3.08,   1,   3.33,        4,       2,   3.5,     2,    1.5,     2.5,    2]   ,      # 97 - F
[   4,     3.41,   1,   3.27,      3.5,       2,   2.5,     3,    2.5,       3,    3]   ,      # 98 - M
[ 3.5,     3.25,   5,    2.6,     3.38,     2.5,   3.5,     2,    2.5,     3.5,    4]   ,      # 99 - F
[   5,        3,   5,    2.7,     2.75,     2.5,   2.5,     4,      2,     2.5,    3]   ,      # 100 - M
[   3,      3.3,   1,    2.7,        4,     3.5,   2.5,     4,    1.5,     2.5,    2]   ,      # 101 - F
[   4,     3.08,   1,    2.5,      3.5,       2,     2,     3,    1.5,     3.5,    2]   ,      # 102 - F


])

# Bem-Estar - 12.3 - motivado a ir trabalhar todos os dias
Y = np.array([

[   1   ], #6
[   3   ], #7
[   4   ], #8
[   2   ], #9
[   4   ], #10
[   3   ], #11
[   4   ], #12
[   4   ], #13
[   3   ], #14
[   3   ], #15
[   3   ], #16
[   3   ], #17
[   4   ], #18
[   4   ], #19
[   3   ], #20
[   4   ], #21
[   3   ], #22
[   2   ], #23
[   2   ], #24
[   1   ], #25
[   4   ], #26
[   3   ], #27
[   4   ], #28
[   2   ], #29
[   3   ], #30
[   5   ], #31
[   5   ], #32
[   4   ], #33
[   4   ], #34
[   1   ], #35
[   5   ], #36
[   4   ], #37
[   3   ], #38
[   4   ], #39
[   5   ], #40
[   1   ], #41
[   1   ], #42
[   2   ], #43
[   1   ], #44
[   3   ], #45
[   1   ], #46
[   3   ], #47
[   1   ], #48
[   5   ], #49
[   5   ], #50
[   5   ], #51
[   3   ], #52
[   5   ], #53
[   4   ], #54
[   5   ], #55
[   2   ], #56
[   4   ], #57
[   2   ], #58
[   1   ], #59
[   1   ], #60
[   5   ], #61
[   3   ], #62
[   3   ], #63
[   2   ], #64
[   2   ], #65
[   3   ], #66
[   2   ], #67
[   4   ], #68
[   3   ], #69
[   2   ], #70
[   2   ], #71
[   2   ], #72
[   2   ], #73
[   2   ], #74
[   4   ], #75
[   3   ], #76
[   2   ], #77
[   2   ], #78
[   5   ], #79
[   2   ], #80
[   3   ], #81
[   5   ], #82
[   4   ], #83
[   2   ], #84
[   3   ], #85
[   3   ], #86
[   3   ], #87
[   4   ], #88
[   2   ], #89
[   2   ], #90
[   3   ], #91
[   1   ], #92
[   2   ], #93
[   4   ], #94
[   3   ], #95
[   3   ], #96
[   2   ], #97
[   4   ], #98
[   3   ], #99
[   3   ], #100
[   3   ], #101
[   2   ], #102
])


########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   3,     1.83,   1,    2.6,    1.625,    1.5,      2,     1,      2,       5,    4]   ,      # 6 - F
[   4,      2.3,   1,   2.73,        4,      2,      2,     2,      4,     1.5,    2]   ,      # 7 - M
[   4,    2.165,   5,   3.86,      4.5,      5,    2.5,     4,    4.5,       4,    4]   ,      # 8 - M
[   5,      2.3,   1,    2.6,        5,      4,      3,     2,    2.5,       2,    2]   ,      # 9 - M
[   5,      3.5,   5,    3.6,      4.5,    4.5,    3.5,     4,      3,     2.5,    5]   ,      # 10 - M
[   3,    2.916,   5,    3.3,      4.5,      4,      4,     2,      4,       4,    4]   ,      # 11 - F
[   4,      3.3,   1,   2.26,        5,      3,      2,     4,    1.5,     4.5,    5]   ,      # 12 - M
[   3,      2.5,   5,    2.2,     3.62,    4.5,      3,     3,    2.5,     3.5,    4]   ,      # 13 - F
[   4,     2.75,   5,      3,        3,      3,      3,     3,      2,       2,    4]   ,      # 14 - M
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       1,    4]   ,      # 15 - F
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 16 - F
[   4,        3,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 17 - M
[ 4.5,     3.16,   5,   3.86,    3.125,      4,      3,     4,    2.5,       3,    4]   ,      # 18 - M
[ 4.5,        3,   5,   3.73,      4.5,      4,    3.5,     4,    2.5,       5,    5]   ,      # 19 - M
[   3,     2.16,   1,   3.46,     2.25,    3.5,   2.25,     3,    4.5,       3,    3]   ,      # 20 - F
[   4,     3.25,   1,   3.13,    2.625,      2,      3,     3,    2.5,       2,    4]   ,      # 21 - M
[ 4.5,      2.5,   5,   3.73,        5,    2.5,      3,     3,      5,     2.5,    2]   ,      # 22 - M
[   3,     3.25,   1,    2.4,      2.5,      3,      2,     2,      1,       4,    2]   ,      # 23 - F
[ 3.5,     1.83,   1,   2.33,    3.625,    2.5,    3.5,     1,    1.5,       3,    5]   ,      # 24 - F
[ 3.5,     2.33,   1,   1.66,      1.5,      2,      4,     1,    2.5,       3,    2]   ,      # 25 - F
[   4,      3.5,   5,   3.86,        5,      3,    4.5,     5,      5,     4.5,    4]   ,      # 26 - M
[ 3.5,     2.66,   5,   4.46,        2,    3.5,    3.5,     4,    3.5,       4,    5]   ,      # 27 - F
[   4,    2.916,   1,   3.46,      4.5,      4,      3,     4,      5,       5,    5]   ,      # 28 - M
[ 4.5,    2.083,   5,      3,        4,    1.5,      3,     2,      1,     3.5,    2]   ,      # 29 - M
[   4,     2.66,   1,    4.3,     1.25,      3,      3,     3,      2,       3,    5]   ,      # 30 - M
[   4,     3.66,   5,   4.93,        5,      5,    3.5,     5,      3,       3,    5]   ,      # 31 - M
[   5,    3.916,   5,   4.93,        5,    4.5,    3.5,     4,      5,       4,    3]   ,      # 32 - M
[ 4.5,     3.75,   5,   3.66,      3.5,      3,    3.5,     4,    3.5,       2,    4]   ,      # 33 - M
[   5,     3.16,   5,      4,        4,      4,      5,     4,    4.5,       5,    4]   ,      # 34 - M
[ 3.5,    2.083,   1,      3,      4.5,      4,    3.5,     3,      2,       2,    1]   ,      # 35 - F
[ 4.5,     2.33,   1,      5,        4,      5,      5,     5,      5,       5,    5]   ,      # 36 - M
[   4,        2,   5,   2.13,    2.625,    2.5,    2.5,     1,    1.5,       1,    2]   ,      # 37 - M
[ 4.5,    2.083,   5,   2.66,        5,    3.5,      3,     2,    2.5,       3,    5]   ,      # 38 - M
[   3,    2.083,   5,   2.86,      4.5,      2,    3.5,     4,    2.5,     1.5,    4]   ,      # 39 - F
[   4,      3.5,   5,   3.33,      4.5,    2.5,      3,     3,      5,       5,    1]   ,      # 40 - M
[   3,      1.5,   1,   3.33,        1,      1,      1,     1,      2,       1,    5]   ,      # 41 - F
[   3,    4.583,   1,   2.33,        3,      5,      1,     5,      3,       5,    1]   ,      # 42 - F
[   4,     3.25,   5,   3.33,      4.5,      1,      3,     3,    3.5,       5,    2]   ,      # 43 - M
[   3,     1.75,   5,   1.53,    3.125,      3,      2,     3,    1.5,       3,    3]   ,      # 44 - F
[   4,    1.583,   1,    2.8,     1.75,      4,    3.5,     3,      2,       2,    3]   ,      # 45 - M
[   3,    3.583,   1,   4.73,     2.25,      3,      1,     1,      2,       5,    1]   ,      # 46 - F
[   4,     2.75,   1,   2.06,     1.25,      4,      3,     5,    3.5,       4,    1]   ,      # 47 - M
[   4,    2.583,   1,      3,    2.875,      4,    2.5,     4,      2,       2,    5]   ,      # 48 - M
[   3,     1.83,   1,   1.16,     2.25,    4.5,    1.5,     1,    2.5,       5,    3]   ,      # 49 - F
[   4,     2.16,   5,   4.83,      4.5,      5,      3,     5,    2.5,     4.5,    5]   ,      # 50 - M
[   4,      3.5,   5,    4.4,        4,     4.5,   1.5,     4,      5,       5,    1]   ,      # 51 - M
[   3,     2.16,   1,   3.73,      3.5,     2.5,     3,     2,      2,       3,    2]   ,      # 52 - F
[   4,    3.083,   1,   3.11,    2.875,       4,     3,     1,      2,       4,    5]   ,      # 53 - M
[   4,    1.916,   1,   3.33,      4.5,       2,   2.5,     2,      2,       4,    3]   ,      # 54 - M
[   4,     2.16,   1,    3.8,        5,       5,   2.5,     4,      2,       3,    5]   ,      # 55 - M
[   5,      2.5,   1,    2.4,        4,       5,   4.5,     1,    2.5,     3.5,    4]   ,      # 56 - M
[   3,    2.916,   1,   3.26,        2,     2.5,   1.5,     2,      2,       2,    4]   ,      # 57 - F
[ 4.5,     3.66,   5,      4,        4,     2.5,   2.5,     4,      5,       4,    1]   ,      # 58 - M
[   3,     1.75,   1,   3.46,        4,     3.5,   3.5,     4,      2,     1.5,    5]   ,      # 59 - F
[   4,        5,   5,      5,        5,       3,     2,     1,      2,       5,    1]   ,      # 60 - M
[   4,     4.25,   5,   2.73,        4,     2.5,     5,     2,      3,     3.5,    3]   ,      # 61 - M
[   4,     3.25,   1,      4,        4,       3,     3,     3,      2,       3,    3]   ,      # 62 - M
[ 4.5,     3.25,   5,      3,        3,       3,     3,     3,      2,       3,    2]   ,      # 63 - M
[   3,      3.5,   5,    2.6,    3.375,       2,     3,     3,      2,     3.5,    4]   ,      # 64 - F
[   3,    3.075,   1,   2.53,        4,       3,     3,     3,      2,       3,    3]   ,      # 65 - F
[ 4.5,    1.416,   5,    4.3,        4,     2.5,   3.5,     3,      2,       1,    5]   ,      # 66 - M
[ 3.5,     3.25,   1,    2.6,        4,       2,   2.5,     4,      2,       1,    5]   ,      # 67 - F
[   5,     3.41,   1,      3,        4,     3.5,     3,     3,      2,     2.5,    3]   ,      # 68 - M
[   5,        3,   1,    2.6,      3.5,       3,   2.5,     4,      2,       3,    3]   ,      # 69 - M
[   4,      3.5,   1,    2.6,        4,       3,     2,     2,    1.5,       4,    2]   ,      # 70 - F
[ 3.5,        4,   1,    2.8,      2.5,       3,     2,     2,    1.5,       4,    2]   ,      # 71 - F
[ 3.5,      3.8,   1,    3.2,      3.5,       3,     2,     2,    1.5,       4,    2]   ,      # 72 - F
[ 4.5,     3.66,   1,    3.3,    4.125,     1.5,   1.5,     2,      3,     2.5,    5]   ,      # 73 - M
[ 3.5,     3.25,   1,      3,     2.75,     2.5,   2.5,     2,    1.5,       4,    2]   ,      # 74 - F
[ 4.5,        3,   5,    3.8,      4.5,       4,   3.5,     4,    4.5,       2,    4]   ,      # 75 - M
[ 3.5,      2.5,   1,    2.8,      4.5,       4,     3,     3,      4,     4.5,    1]   ,      # 76 - F
[   4,      2.5,   5,    4.2,      3.5,     3.5,   4.5,     2,    2.5,       3,    2]   ,      # 77 - F
[ 3.5,     3.75,   1,    2.7,      3.5,       3,     2,     2,    1.5,       4,    2]   ,      # 78 - F
[ 3.5,        1,   1,    3.6,        4,       3,   4.5,     5,      3,       2,    5]   ,      # 79 - F
[   4,     1.75,   1,   1.53,      1.5,       1,     1,     1,      1,     1.5,    2]   ,      # 80 - M
[ 4.5,     3.17,   1,   2.46,      3.5,     3.5,     3,     2,      4,       3,    3]   ,      # 81 - M
[   4,     2.75,   1,    2.5,        5,       4,   3.5,     3,    1.5,     2.5,    2]   ,      # 82 - M
[   4,     2.16,   1,    2.6,      3.5,       2,   3.5,     2,    4.5,       3,    5]   ,      # 83 - F
[   4,      3.5,   1,      4,        5,     3.5,   3.5,     3,    3.5,       3,    5]   ,      # 84 - M
[ 3.5,     2.75,   1,    2.8,    3.125,       4,     3,     3,    2.5,     2.5,    3]   ,      # 85 - F
[   4,     3.08,   1,   3.83,        4,       2,   3.5,     3,    4.5,     3.5,    4]   ,      # 86 - F
[   4,     3.75,   5,   3.66,        3,       3,     3,     3,      2,       3,    3]   ,      # 87 - M
[ 3.5,     2.75,   1,   3.06,      4.5,       2,     3,     3,    1.5,       3,    3]   ,      # 88 - F
[ 3.5,      3.5,   1,    2.6,      4.5,     2.5,     2,     2,    1.5,       4,    2]   ,      # 89 - F
[   3,     3.85,   1,   2.66,     2.25,     2.5,   1.5,     3,    1.5,     3.5,    3]   ,      # 90 - F
[ 3.5,     3.33,   1,   4.86,        4,     3.5,     4,     5,    2.5,     1.5,    2]   ,      # 91 - M
[   4,        5,   5,    3.5,        2,       3,     1,     1,      1,       5,    1]   ,      # 92 - M
[ 3.5,     2.75,   1,      3,     3.38,     1.5,   2.5,     4,    1.5,     3.5,    4]   ,      # 93 - F
[   5,     3.25,   1,    3.4,     3.66,       2,   2.5,     4,      2,     2.5,    2]   ,      # 94 - M
[ 3.5,      3.5,   1,    3.4,      3.5,     2.5,   2.5,     3,      2,     2.5,    2]   ,      # 95 - F
[ 3.5,        3,   1,   3.27,     2.88,     2.5,   3.5,     3,    1.5,     2.5,    2]   ,      # 96 - F
[ 3.5,     3.08,   1,   3.33,        4,       2,   3.5,     2,    1.5,     2.5,    2]   ,      # 97 - F
[   4,     3.41,   1,   3.27,      3.5,       2,   2.5,     3,    2.5,       3,    3]   ,      # 98 - M
[ 3.5,     3.25,   5,    2.6,     3.38,     2.5,   3.5,     2,    2.5,     3.5,    4]   ,      # 99 - F
[   5,        3,   5,    2.7,     2.75,     2.5,   2.5,     4,      2,     2.5,    3]   ,      # 100 - M
[   3,      3.3,   1,    2.7,        4,     3.5,   2.5,     4,    1.5,     2.5,    2]   ,      # 101 - F
[   4,     3.08,   1,    2.5,      3.5,       2,     2,     3,    1.5,     3.5,    2]   ,      # 102 - F

])

# Bem-Estar - 12.4 - avaliaria o seu equilíbrio entre vida pessoal e trabalho?

Y = np.array([
[   1   ], #6
[   3   ], #7
[   2   ], #8
[   2   ], #9
[   4   ], #10
[   2   ], #11
[   3   ], #12
[   2   ], #13
[   3   ], #14
[   3   ], #15
[   3   ], #16
[   3   ], #17
[   4   ], #18
[   4   ], #19
[   3   ], #20
[   3   ], #21
[   4   ], #22
[   2   ], #23
[   4   ], #24
[   3   ], #25
[   3   ], #26
[   3   ], #27
[   4   ], #28
[   2   ], #29
[   3   ], #30
[   5   ], #31
[   4   ], #32
[   3   ], #33
[   4   ], #34
[   2   ], #35
[   2   ], #36
[   3   ], #37
[   3   ], #38
[   4   ], #39
[   5   ], #40
[   1   ], #41
[   4   ], #42
[   4   ], #43
[   2   ], #44
[   3   ], #45
[   1   ], #46
[   4   ], #47
[   1   ], #48
[   2   ], #49
[   3   ], #50
[   4   ], #51
[   3   ], #52
[   4   ], #53
[   3   ], #54
[   1   ], #55
[   3   ], #56
[   3   ], #57
[   4   ], #58
[   2   ], #59
[   1   ], #60
[   3   ], #61
[   3   ], #62
[   3   ], #63
[   4   ], #64
[   4   ], #65
[   2   ], #66
[   3   ], #67
[   2   ], #68
[   3   ], #69
[   2   ], #70
[   2   ], #71
[   2   ], #72
[   5   ], #73
[   3   ], #74
[   4   ], #75
[   3   ], #76
[   3   ], #77
[   2   ], #78
[   5   ], #79
[   2   ], #80
[   3   ], #81
[   4   ], #82
[   3   ], #83
[   3   ], #84
[   3   ], #85
[   2   ], #86
[   3   ], #87
[   3   ], #88
[   2   ], #89
[   2   ], #90
[   3   ], #91
[   1   ], #92
[   3   ], #93
[   3   ], #94
[   2   ], #95
[   3   ], #96
[   3   ], #97
[   3   ], #98
[   4   ], #99
[   3   ], #100
[   3   ], #101
[   2   ], #102
])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

"""# **FASE FINAL - CODE X**"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada
# Geração do modelo   coef = inv(Xt*X)*(Xt*Y)
# O MODELO MATEMÁTICO POSSUI UMA CONSTANTE    Y= AX + B
# A COLUNA COM 1´s GARANTE QUE A CONSTANTE B SEJA DETERMINADA
# O MODELO FICARÁ Y = B + AX POR CONTA DA PRIMEIRA COLUNA

# constante umidade temperatura velocidade do vento
# resposta prevista (yprev)= constante +  a.informações pessoais + b.jornadas excessivas + c.salário inadequado + d.falta de oport. cresc. + e.ambiente de trab. tóxico
                                    #  +  f.trabalho repetitivo e monótono + g.falta de flexibilidade + h.falta de rec. e recompensa + i.condições de trabalho perigosas
                                    #  +  j.pressão excessiva e metas irrealistas + k.falta de autonomia

# ----------------------------------------------------------------------- anotações

# tópicos importantes que impactam:
# 1-3: não satisfeito | 3: satisfeito | 4-5: feliz

# Informações Pessoais
# 1.1 -> M: 5 | F: 3 | Outro: ??
# 1.2 -> 0: 5 | 1: 4 | 2: 3 | 3: 2 | 4+: 1
# 1.3 -> --
# 1.4 -> presencial: 3 | hibrido: 4 | remoto: 5

# Jornadas Excessivas de Trabalho
# 2.1 -> Até 20h: 5 | Até 30h: 4 | Até 40h: 3 | Até 50h: 2 | De 50h+: 1
# 2.2 -> 1 a 5 invertendo
# 2.3 -> 1 a 5 invertendo
# 2.4 -> --
# 2.5 -> fazer média do 1 a 5 invertendo

# Salário Inadequado
# 3.1 -> 1: 5 | 2: 1

# Falta de Oportunidades de Crescimento
# 4.1 -> 1 a 5 normal
# 4.2 -> 1 a 5 normal
# 4.3 -> 1 a 5 invertendo

# Ambiente de Trabalho Tóxico
# 5.1 -> 1: 1°normal - 2°invertido - 3°invertido - 4°normal | 2: 5
# 5.2 -> 1 a 5 normal

# Trabalho Repetitivo e Monótono
# 6.1 -> 1 a 5 normal
# 6.2 -> 1 a 5 invertendo

# Falta de Flexibilidade
# 7.1 -> 1 a 5 normal
# 7.2 -> 1 a 5 normal

# Falta de Reconhecimento e Recompensa
# 8.1 -> 1 a 5 normal

# Pressão Excessiva e Metas Irrealistas
# 10.1 -> 1 a 5 invertendo
# 10.2 -> 1 a 5 invertendo

# Falta de Autonomia
# 11.1 -> 1 a 5 normal

import numpy as np
import matplotlib.pyplot as plt

dados = np.array([

[   3,     1.83,   1,    2.6,    1.625,    1.5,      2,     1,         5,    4]   ,      # 6 - F
[   4,      2.3,   1,   2.73,        4,      2,      2,     2,         1.5,  2]   ,      # 7 - M
[   4,    2.165,   5,   3.86,      4.5,      5,    2.5,     4,         4,    4]   ,      # 8 - M
[   5,      2.3,   1,    2.6,        5,      4,      3,     2,         2,    2]   ,      # 9 - M
[   5,      3.5,   5,    3.6,      4.5,    4.5,    3.5,     4,         2.5,  5]   ,      # 10 - M
[   3,    2.916,   5,    3.3,      4.5,      4,      4,     2,         4,    4]   ,      # 11 - F
[   4,      3.3,   1,   2.26,        5,      3,      2,     4,         4.5,  5]   ,      # 12 - M
[   3,      2.5,   5,    2.2,     3.62,    4.5,      3,     3,         3.5,  4]   ,      # 13 - F
[   4,     2.75,   5,      3,        3,      3,      3,     3,         2,    4]   ,      # 14 - M
[   3,     2.75,   1,      3,        3,      3,      3,     3,         1,    4]   ,      # 15 - F
[   3,     2.75,   1,      3,        3,      3,      3,     3,         3,    3]   ,      # 16 - F
[   4,        3,   1,      3,        3,      3,      3,     3,         3,    3]   ,      # 17 - M
[ 4.5,     3.16,   5,   3.86,    3.125,      4,      3,     4,         3,    4]   ,      # 18 - M
[ 4.5,        3,   5,   3.73,      4.5,      4,    3.5,     4,         5,    5]   ,      # 19 - M
[   3,     2.16,   1,   3.46,     2.25,    3.5,   2.25,     3,         3,    3]   ,      # 20 - F
[   4,     3.25,   1,   3.13,    2.625,      2,      3,     3,         2,    4]   ,      # 21 - M
[ 4.5,      2.5,   5,   3.73,        5,    2.5,      3,     3,         2.5,  2]   ,      # 22 - M
[   3,     3.25,   1,    2.4,      2.5,      3,      2,     2,         4,    2]   ,      # 23 - F
[ 3.5,     1.83,   1,   2.33,    3.625,    2.5,    3.5,     1,         3,    5]   ,      # 24 - F
[   4,      3.5,   5,   3.86,        5,      3,    4.5,     5,         4.5,  4]   ,      # 26 - M
[ 3.5,     2.66,   5,   4.46,        2,    3.5,    3.5,     4,         4,    5]   ,      # 27 - F
[   4,    2.916,   1,   3.46,      4.5,      4,      3,     4,         5,    5]   ,      # 28 - M
[   4,     3.66,   5,   4.93,        5,      5,    3.5,     5,         3,    5]   ,      # 31 - M
[   5,    3.916,   5,   4.93,        5,    4.5,    3.5,     4,         4,    3]   ,      # 32 - M
[ 4.5,     3.75,   5,   3.66,      3.5,      3,    3.5,     4,         2,    4]   ,      # 33 - M
[   5,     3.16,   5,      4,        4,      4,      5,     4,         5,    4]   ,      # 34 - M
[ 3.5,    2.083,   1,      3,      4.5,      4,    3.5,     3,         2,    1]   ,      # 35 - F
[ 4.5,     2.33,   1,      5,        4,      5,      5,     5,         5,    5]   ,      # 36 - M
[   4,        2,   5,   2.13,    2.625,    2.5,    2.5,     1,         1,    2]   ,      # 37 - M
[ 4.5,    2.083,   5,   2.66,        5,    3.5,      3,     2,         3,    5]   ,      # 38 - M
[   3,    2.083,   5,   2.86,      4.5,      2,    3.5,     4,         1.5,  4]   ,      # 39 - F
[   4,      3.5,   5,   3.33,      4.5,    2.5,      3,     3,         5,    1]   ,      # 40 - M
[   4,     3.25,   5,   3.33,      4.5,      1,      3,     3,         5,    2]   ,      # 43 - M
[   3,     1.75,   5,   1.53,    3.125,      3,      2,     3,         3,    3]   ,      # 44 - F
[   4,    1.583,   1,    2.8,     1.75,      4,    3.5,     3,         2,    3]   ,      # 45 - M
[   4,     2.75,   1,   2.06,     1.25,      4,      3,     5,         4,    1]   ,      # 47 - M
[   4,    2.583,   1,      3,    2.875,      4,    2.5,     4,         2,    5]   ,      # 48 - M
[   4,     2.16,   5,   4.83,      4.5,      5,      3,     5,         4.5,  5]   ,      # 50 - M
[   4,      3.5,   5,    4.4,        4,     4.5,   1.5,     4,         5,    1]   ,      # 51 - M
[   3,     2.16,   1,   3.73,      3.5,     2.5,     3,     2,         3,    2]   ,      # 52 - F
[   4,    3.083,   1,   3.11,    2.875,       4,     3,     1,         4,    5]   ,      # 53 - M
[   4,    1.916,   1,   3.33,      4.5,       2,   2.5,     2,         4,    3]   ,      # 54 - M
[   4,     2.16,   1,    3.8,        5,       5,   2.5,     4,         3,    5]   ,      # 55 - M
[   3,    2.916,   1,   3.26,        2,     2.5,   1.5,     2,         2,    4]   ,      # 57 - F
[ 4.5,     3.66,   5,      4,        4,     2.5,   2.5,     4,         4,    1]   ,      # 58 - M
[   3,     1.75,   1,   3.46,        4,     3.5,   3.5,     4,         1.5,  5]   ,      # 59 - F
[   4,     4.25,   5,   2.73,        4,     2.5,     5,     2,         3.5,  3]   ,      # 61 - M
[   4,     3.25,   1,      4,        4,       3,     3,     3,         3,    3]   ,      # 62 - M
[ 4.5,     3.25,   5,      3,        3,       3,     3,     3,         3,    2]   ,      # 63 - M
[   3,      3.5,   5,    2.6,    3.375,       2,     3,     3,         3.5,  4]   ,      # 64 - F
[   3,    3.075,   1,   2.53,        4,       3,     3,     3,         3,    3]   ,      # 65 - F
[ 4.5,    1.416,   5,    4.3,        4,     2.5,   3.5,     3,         1,    5]   ,      # 66 - M
[ 3.5,     3.25,   1,    2.6,        4,       2,   2.5,     4,         1,    5]   ,      # 67 - F
[   5,     3.41,   1,      3,        4,     3.5,     3,     3,         2.5,  3]   ,      # 68 - M
[   5,        3,   1,    2.6,      3.5,       3,   2.5,     4,         3,    3]   ,      # 69 - M
[   4,      3.5,   1,    2.6,        4,       3,     2,     2,         4,    2]   ,      # 70 - F
[ 3.5,        4,   1,    2.8,      2.5,       3,     2,     2,         4,    2]   ,      # 71 - F
[ 3.5,      3.8,   1,    3.2,      3.5,       3,     2,     2,         4,    2]   ,      # 72 - F
[ 4.5,     3.66,   1,    3.3,    4.125,     1.5,   1.5,     2,         2.5,  5]   ,      # 73 - M
[ 3.5,     3.25,   1,      3,     2.75,     2.5,   2.5,     2,         4,    2]   ,      # 74 - F
[ 4.5,        3,   5,    3.8,      4.5,       4,   3.5,     4,         2,    4]   ,      # 75 - M
[ 3.5,      2.5,   1,    2.8,      4.5,       4,     3,     3,         4.5,  1]   ,      # 76 - F
[   4,      2.5,   5,    4.2,      3.5,     3.5,   4.5,     2,         3,    2]   ,      # 77 - F
[ 3.5,     3.75,   1,    2.7,      3.5,       3,     2,     2,         4,    2]   ,      # 78 - F
[ 3.5,        1,   1,    3.6,        4,       3,   4.5,     5,         2,    5]   ,      # 79 - F
[ 4.5,     3.17,   1,   2.46,      3.5,     3.5,     3,     2,         3,    3]   ,      # 81 - M
[   4,     2.75,   1,    2.5,        5,       4,   3.5,     3,         2.5,  2]   ,      # 82 - M
[   4,     2.16,   1,    2.6,      3.5,       2,   3.5,     2,         3,    5]   ,      # 83 - F
[   4,      3.5,   1,      4,        5,     3.5,   3.5,     3,         3,    5]   ,      # 84 - M
[ 3.5,     2.75,   1,    2.8,    3.125,       4,     3,     3,         2.5,  3]   ,      # 85 - F
[   4,     3.08,   1,   3.83,        4,       2,   3.5,     3,         3.5,  4]   ,      # 86 - F
[   4,     3.75,   5,   3.66,        3,       3,     3,     3,         3,    3]   ,      # 87 - M
[ 3.5,     2.75,   1,   3.06,      4.5,       2,     3,     3,         3,    3]   ,      # 88 - F
[ 3.5,      3.5,   1,    2.6,      4.5,     2.5,     2,     2,         4,    2]   ,      # 89 - F
[   3,     3.85,   1,   2.66,     2.25,     2.5,   1.5,     3,         3.5,  3]   ,      # 90 - F
[ 3.5,     3.33,   1,   4.86,        4,     3.5,     4,     5,         1.5,  2]   ,      # 91 - M
[ 3.5,     2.75,   1,      3,     3.38,     1.5,   2.5,     4,         3.5,  4]   ,      # 93 - F
[   5,     3.25,   1,    3.4,     3.66,       2,   2.5,     4,         2.5,  2]   ,      # 94 - M
[ 3.5,      3.5,   1,    3.4,      3.5,     2.5,   2.5,     3,         2.5,  2]   ,      # 95 - F
[ 3.5,        3,   1,   3.27,     2.88,     2.5,   3.5,     3,         2.5,  2]   ,      # 96 - F
[ 3.5,     3.08,   1,   3.33,        4,       2,   3.5,     2,         2.5,  2]   ,      # 97 - F
[   4,     3.41,   1,   3.27,      3.5,       2,   2.5,     3,         3,    3]   ,      # 98 - M
[ 3.5,     3.25,   5,    2.6,     3.38,     2.5,   3.5,     2,         3.5,  4]   ,      # 99 - F
[   5,        3,   5,    2.7,     2.75,     2.5,   2.5,     4,         2.5,  3]   ,      # 100 - M
[   3,      3.3,   1,    2.7,        4,     3.5,   2.5,     4,         2.5,  2]   ,      # 101 - F
[   4,     3.08,   1,    2.5,      3.5,       2,     2,     3,         3.5,  2]   ,      # 102 - F

])

# Bem-Estar - 12.2 - expectativas que você tinha ao ser contratado
Y = np.array([

[   2   ], #6
[   2   ], #7
[   4   ], #8
[   3   ], #9
[   4   ], #10
[   3   ], #11
[   5   ], #12
[   4   ], #13
[   3   ], #14
[   3   ], #15
[   3   ], #16
[   3   ], #17
[   4   ], #18
[   4   ], #19
[   3   ], #20
[   4   ], #21
[   2   ], #22
[   2   ], #23
[   2   ], #24
[   4   ], #26
[   4   ], #27
[   4   ], #28
[   5   ], #31
[   5   ], #32
[   3   ], #33
[   5   ], #34
[   2   ], #35
[   5   ], #36
[   2   ], #37
[   5   ], #38
[   3   ], #39
[   5   ], #40
[   2   ], #43
[   2   ], #44
[   2   ], #45
[   3   ], #47
[   2   ], #48
[   5   ], #50
[   5   ], #51
[   2   ], #52
[   3   ], #53
[   3   ], #54
[   4   ], #55
[   5   ], #57
[   2   ], #58
[   4   ], #59
[   4   ], #61
[   3   ], #62
[   3   ], #63
[   4   ], #64
[   4   ], #65
[   2   ], #66
[   2   ], #67
[   2   ], #68
[   3   ], #69
[   2   ], #70
[   2   ], #71
[   2   ], #72
[   5   ], #73
[   2   ], #74
[   4   ], #75
[   3   ], #76
[   3   ], #77
[   2   ], #78
[   5   ], #79
[   3   ], #81
[   2   ], #82
[   3   ], #83
[   4   ], #84
[   4   ], #85
[   2   ], #86
[   3   ], #87
[   3   ], #88
[   2   ], #89
[   3   ], #90
[   3   ], #91
[   3   ], #93
[   3   ], #94
[   4   ], #95
[   4   ], #96
[   4   ], #97
[   2   ], #98
[   2   ], #99
[   4   ], #100
[   4   ], #101
[   2   ], #102

])

import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),annot=True, fmt=".2f",cmap='coolwarm')

plt.show()

"""# **2 - MULHERES E HOMENS**

## MULHERES

### Mulher: Bem-estar média
"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Mulheres -> bem-estar media geral

import numpy as np
import matplotlib.pyplot as plt

X = np.array([
[ 2.5,    1.83,    1,    2.6,    1.625,    1.5,      2,     1,      2,       5,    4]   ,      #  6 - F
[   4,   2.916,    5,    3.3,      4.5,      4,      4,     2,      4,       4,    4]   ,      # 11 - F
[   3,     2.5,    5,    2.2,     3.62,    4.5,      3,     3,    2.5,     3.5,    4]   ,      # 13 - F
[   4,    2.75,    1,      3,        3,      3,      3,     3,      2,       1,    4]   ,      # 15 - F
[   4,    2.75,    1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 16 - F
[   3,     2.16,   1,   3.46,     2.25,    3.5,   2.25,     3,    4.5,       3,    3]   ,      # 20 - F
[   3,     3.25,   1,    2.4,      2.5,      3,      2,     2,      1,       4,    2]   ,      # 23 - F
[ 3.5,     1.83,   1,   2.33,    3.625,    2.5,    3.5,     1,    1.5,       3,    5]   ,      # 24 - F
[ 3.5,     2.33,   1,   1.66,      1.5,      2,      4,     1,    2.5,       3,    2]   ,      # 25 - F
[ 3.5,     2.66,   5,   4.46,        2,    3.5,    3.5,     4,    3.5,       4,    5]   ,      # 27 - F
[ 3.5,    2.083,   1,      3,      4.5,      4,    3.5,     3,      2,       2,    1]   ,      # 35 - F
[   3,    2.083,   5,   2.86,      4.5,      2,    3.5,     4,    2.5,     1.5,    4]   ,      # 39 - F
[   3,      1.5,   1,   3.33,        1,      1,      1,     1,      2,       1,    5]   ,      # 41 - F
[   3,    4.583,   1,   2.33,        3,      5,      1,     5,      3,       5,    1]   ,      # 42 - F
[   3,     1.75,   5,   1.53,    3.125,      3,      2,     3,    1.5,       3,    3]   ,      # 44 - F
[   3,    3.583,   1,   4.73,     2.25,      3,      1,     1,      2,       5,    1]   ,      # 46 - F
[   3,     1.83,   1,   1.16,     2.25,    4.5,    1.5,     1,    2.5,       5,    3]   ,      # 49 - F
[   3,     2.16,   1,   3.73,      3.5,     2.5,     3,     2,      2,       3,    2]   ,      # 52 - F
[   3,    2.916,   1,   3.26,        2,     2.5,   1.5,     2,      2,       2,    4]   ,      # 57 - F
[   3,     1.75,   1,   3.46,        4,     3.5,   3.5,     4,      2,     1.5,    5]   ,      # 59 - F
[   3,      3.5,   5,    2.6,    3.375,       2,     3,     3,      2,     3.5,    4]   ,      # 64 - F
[   3,    3.075,   1,   2.53,        4,       3,     3,     3,      2,       3,    3]   ,      # 65 - F
[ 3.5,     3.25,   1,    2.6,        4,       2,   2.5,     4,      2,       1,    5]   ,      # 67 - F
[   4,      3.5,   1,    2.6,        4,       3,     2,     2,    1.5,       4,    2]   ,      # 70 - F
[ 3.5,        4,   1,    2.8,      2.5,       3,     2,     2,    1.5,       4,    2]   ,      # 71 - F
[ 3.5,      3.8,   1,    3.2,      3.5,       3,     2,     2,    1.5,       4,    2]   ,      # 72 - F
[ 3.5,     3.25,   1,      3,     2.75,     2.5,   2.5,     2,    1.5,       4,    2]   ,      # 74 - F
[ 3.5,      2.5,   1,    2.8,      4.5,       4,     3,     3,      4,     4.5,    1]   ,      # 76 - F
[   4,      2.5,   5,    4.2,      3.5,     3.5,   4.5,     2,    2.5,       3,    2]   ,      # 77 - F
[ 3.5,     3.75,   1,    2.7,      3.5,       3,     2,     2,    1.5,       4,    2]   ,      # 78 - F
[ 3.5,        1,   1,    3.6,        4,       3,   4.5,     5,      3,       2,    5]   ,      # 79 - F
[   4,     2.16,   1,    2.6,      3.5,       2,   3.5,     2,    4.5,       3,    5]   ,      # 83 - F
[ 3.5,     2.75,   1,    2.8,    3.125,       4,     3,     3,    2.5,     2.5,    3]   ,      # 85 - F
[   4,     3.08,   1,   3.83,        4,       2,   3.5,     3,    4.5,     3.5,    4]   ,      # 86 - F
[ 3.5,     2.75,   1,   3.06,      4.5,       2,     3,     3,    1.5,       3,    3]   ,      # 88 - F
[ 3.5,      3.5,   1,    2.6,      4.5,     2.5,     2,     2,    1.5,       4,    2]   ,      # 89 - F
[   3,     3.85,   1,   2.66,     2.25,     2.5,   1.5,     3,    1.5,     3.5,    3]   ,      # 90 - F
[ 3.5,     3.33,   1,   4.86,        4,     3.5,     4,     5,    2.5,     1.5,    2]   ,      # 91 - F
[ 3.5,     2.75,   1,      3,     3.38,     1.5,   2.5,     4,    1.5,     3.5,    4]   ,      # 93 - F
[ 3.5,      3.5,   1,    3.4,      3.5,     2.5,   2.5,     3,      2,     2.5,    2]   ,      # 95 - F
[ 3.5,        3,   1,   3.27,     2.88,     2.5,   3.5,     3,    1.5,     2.5,    2]   ,      # 96 - F
[ 3.5,     3.08,   1,   3.33,        4,       2,   3.5,     2,    1.5,     2.5,    2]   ,      # 97 - F
[ 3.5,     3.25,   5,    2.6,     3.38,     2.5,   3.5,     2,    2.5,     3.5,    4]   ,      # 99 - F
[   3,      3.3,   1,    2.7,        4,     3.5,   2.5,     4,    1.5,     2.5,    2]   ,      # 101 - F
[   4,     3.08,   1,    2.5,      3.5,       2,     2,     3,    1.5,     3.5,    2]   ,      # 102 - F

])


# Bem-Estar -> bem-estar media geral
Y = np.array([
[   1.25   ]   ,    #  6 - F
[   3      ]   ,    # 11 - F
[   3.5    ]   ,    # 13 - F
[   3      ]   ,    # 15 - F
[   3      ]   ,    # 16 - F
[   3      ]   ,    # 20 - F
[   2      ]   ,    # 23 - F
[   2.5    ]   ,    # 24 - F
[   1.75   ]   ,    # 25 - F
[   3.5    ]   ,    # 27 - F
[   2      ]   ,    # 35 - F
[   3.75   ]   ,    # 39 - F
[   1      ]   ,    # 41 - F
[   1.75   ]   ,    # 42 - F
[   1.5    ]   ,    # 44 - F
[   1      ]   ,    # 46 - F
[   2.75   ]   ,    # 49 - F
[   2.75   ]   ,    # 52 - F
[   3.75   ]   ,    # 57 - F
[   2.5    ]   ,    # 59 - F
[   3      ]   ,    # 64 - F
[   3      ]   ,    # 65 - F
[   2.5    ]   ,    # 67 - F
[   2      ]   ,    # 70 - F
[   2      ]   ,    # 71 - F
[   2      ]   ,    # 72 - F
[   2.25   ]   ,    # 74 - F
[   3.25   ]   ,    # 76 - F
[   3.5    ]   ,    # 77 - F
[   2      ]   ,    # 78 - F
[   5      ]   ,    # 79 - F
[   3.5    ]   ,    # 83 - F
[   3.25   ]   ,    # 85 - F
[   2.5    ]   ,    # 86 - F
[   3      ]   ,    # 88 - F
[   2      ]   ,    # 89 - F
[   2.25   ]   ,    # 90 - F
[   3.5    ]   ,    # 91 - F
[   2.5    ]   ,    # 93 - F
[   3      ]   ,    # 95 - F
[   3.25   ]   ,    # 96 - F
[   3      ]   ,    # 97 - F
[   3      ]   ,    # 99 - F
[   3.25   ]   ,    # 101 - F
[   2      ]   ,    # 102 - F

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

"""### Mulher: Bem-estar separado"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Mulheres -> bem-estar 12.1

import numpy as np
import matplotlib.pyplot as plt

X = np.array([
[ 2.5,    1.83,    1,    2.6,    1.625,    1.5,      2,     1,      2,       5,    4]   ,      #  6 - F
[   4,   2.916,    5,    3.3,      4.5,      4,      4,     2,      4,       4,    4]   ,      # 11 - F
[   3,     2.5,    5,    2.2,     3.62,    4.5,      3,     3,    2.5,     3.5,    4]   ,      # 13 - F
[   4,    2.75,    1,      3,        3,      3,      3,     3,      2,       1,    4]   ,      # 15 - F
[   4,    2.75,    1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 16 - F
[   3,     2.16,   1,   3.46,     2.25,    3.5,   2.25,     3,    4.5,       3,    3]   ,      # 20 - F
[   3,     3.25,   1,    2.4,      2.5,      3,      2,     2,      1,       4,    2]   ,      # 23 - F
[ 3.5,     1.83,   1,   2.33,    3.625,    2.5,    3.5,     1,    1.5,       3,    5]   ,      # 24 - F
[ 3.5,     2.33,   1,   1.66,      1.5,      2,      4,     1,    2.5,       3,    2]   ,      # 25 - F
[ 3.5,     2.66,   5,   4.46,        2,    3.5,    3.5,     4,    3.5,       4,    5]   ,      # 27 - F
[ 3.5,    2.083,   1,      3,      4.5,      4,    3.5,     3,      2,       2,    1]   ,      # 35 - F
[   3,    2.083,   5,   2.86,      4.5,      2,    3.5,     4,    2.5,     1.5,    4]   ,      # 39 - F
[   3,      1.5,   1,   3.33,        1,      1,      1,     1,      2,       1,    5]   ,      # 41 - F
[   3,    4.583,   1,   2.33,        3,      5,      1,     5,      3,       5,    1]   ,      # 42 - F
[   3,     1.75,   5,   1.53,    3.125,      3,      2,     3,    1.5,       3,    3]   ,      # 44 - F
[   3,    3.583,   1,   4.73,     2.25,      3,      1,     1,      2,       5,    1]   ,      # 46 - F
[   3,     1.83,   1,   1.16,     2.25,    4.5,    1.5,     1,    2.5,       5,    3]   ,      # 49 - F
[   3,     2.16,   1,   3.73,      3.5,     2.5,     3,     2,      2,       3,    2]   ,      # 52 - F
[   3,    2.916,   1,   3.26,        2,     2.5,   1.5,     2,      2,       2,    4]   ,      # 57 - F
[   3,     1.75,   1,   3.46,        4,     3.5,   3.5,     4,      2,     1.5,    5]   ,      # 59 - F
[   3,      3.5,   5,    2.6,    3.375,       2,     3,     3,      2,     3.5,    4]   ,      # 64 - F
[   3,    3.075,   1,   2.53,        4,       3,     3,     3,      2,       3,    3]   ,      # 65 - F
[ 3.5,     3.25,   1,    2.6,        4,       2,   2.5,     4,      2,       1,    5]   ,      # 67 - F
[   4,      3.5,   1,    2.6,        4,       3,     2,     2,    1.5,       4,    2]   ,      # 70 - F
[ 3.5,        4,   1,    2.8,      2.5,       3,     2,     2,    1.5,       4,    2]   ,      # 71 - F
[ 3.5,      3.8,   1,    3.2,      3.5,       3,     2,     2,    1.5,       4,    2]   ,      # 72 - F
[ 3.5,     3.25,   1,      3,     2.75,     2.5,   2.5,     2,    1.5,       4,    2]   ,      # 74 - F
[ 3.5,      2.5,   1,    2.8,      4.5,       4,     3,     3,      4,     4.5,    1]   ,      # 76 - F
[   4,      2.5,   5,    4.2,      3.5,     3.5,   4.5,     2,    2.5,       3,    2]   ,      # 77 - F
[ 3.5,     3.75,   1,    2.7,      3.5,       3,     2,     2,    1.5,       4,    2]   ,      # 78 - F
[ 3.5,        1,   1,    3.6,        4,       3,   4.5,     5,      3,       2,    5]   ,      # 79 - F
[   4,     2.16,   1,    2.6,      3.5,       2,   3.5,     2,    4.5,       3,    5]   ,      # 83 - F
[ 3.5,     2.75,   1,    2.8,    3.125,       4,     3,     3,    2.5,     2.5,    3]   ,      # 85 - F
[   4,     3.08,   1,   3.83,        4,       2,   3.5,     3,    4.5,     3.5,    4]   ,      # 86 - F
[ 3.5,     2.75,   1,   3.06,      4.5,       2,     3,     3,    1.5,       3,    3]   ,      # 88 - F
[ 3.5,      3.5,   1,    2.6,      4.5,     2.5,     2,     2,    1.5,       4,    2]   ,      # 89 - F
[   3,     3.85,   1,   2.66,     2.25,     2.5,   1.5,     3,    1.5,     3.5,    3]   ,      # 90 - F
[ 3.5,     3.33,   1,   4.86,        4,     3.5,     4,     5,    2.5,     1.5,    2]   ,      # 91 - F
[ 3.5,     2.75,   1,      3,     3.38,     1.5,   2.5,     4,    1.5,     3.5,    4]   ,      # 93 - F
[ 3.5,      3.5,   1,    3.4,      3.5,     2.5,   2.5,     3,      2,     2.5,    2]   ,      # 95 - F
[ 3.5,        3,   1,   3.27,     2.88,     2.5,   3.5,     3,    1.5,     2.5,    2]   ,      # 96 - F
[ 3.5,     3.08,   1,   3.33,        4,       2,   3.5,     2,    1.5,     2.5,    2]   ,      # 97 - F
[ 3.5,     3.25,   5,    2.6,     3.38,     2.5,   3.5,     2,    2.5,     3.5,    4]   ,      # 99 - F
[   3,      3.3,   1,    2.7,        4,     3.5,   2.5,     4,    1.5,     2.5,    2]   ,      # 101 - F
[   4,     3.08,   1,    2.5,      3.5,       2,     2,     3,    1.5,     3.5,    2]   ,      # 102 - F

])

# Bem-Estar - 12.1
Y = np.array([
[   1   ] ,      # 6
[   4   ]   ,    # 11
[   4   ]   ,    # 13
[   3   ]   ,    # 15
[   3   ]   ,    # 16
[   3   ] ,      # 20
[   2   ]   ,    # 23
[   2   ]   ,    # 24
[   2   ]   ,    # 25
[   4   ]   ,    # 27
[   3   ]   ,    # 35
[   4   ]   ,    # 39
[   1   ]   ,    # 41
[   2   ]   ,    # 42
[   1   ]   ,    # 44
[   1   ]   ,    # 46
[   3   ]   ,    # 49
[   3   ]   ,    # 52
[   3   ]   ,    # 57
[   3   ]   ,    # 59
[   2   ]   ,    # 64
[   2   ]   ,    # 65
[   3   ]   ,    # 67
[   2   ]   ,    # 70
[   1   ]   ,    # 71
[   2   ]   ,    # 72
[   2   ]   ,    # 74
[   4   ]   ,    # 76
[   4   ]   ,    # 77
[   2   ]   ,    # 78
[   5   ]   ,    # 79
[   4   ]   ,    # 83
[   3   ]   ,    # 85
[   3   ]   ,    # 86
[   2   ]   ,    # 88
[   2   ]   ,    # 89
[   2   ]   ,    # 90
[   5   ]   ,    # 91
[   2   ]   ,    # 93
[   3   ]   ,    # 95
[   3   ]   ,    # 96
[   3   ]   ,    # 97
[   3   ]   ,    # 99
[   3   ]   ,    # 101
[   2   ]   ,    # 102
])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Mulheres -> bem-estar 12.2

import numpy as np
import matplotlib.pyplot as plt

X = np.array([
[ 2.5,    1.83,    1,    2.6,    1.625,    1.5,      2,     1,      2,       5,    4]   ,      #  6 - F
[   4,   2.916,    5,    3.3,      4.5,      4,      4,     2,      4,       4,    4]   ,      # 11 - F
[   3,     2.5,    5,    2.2,     3.62,    4.5,      3,     3,    2.5,     3.5,    4]   ,      # 13 - F
[   4,    2.75,    1,      3,        3,      3,      3,     3,      2,       1,    4]   ,      # 15 - F
[   4,    2.75,    1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 16 - F
[   3,     2.16,   1,   3.46,     2.25,    3.5,   2.25,     3,    4.5,       3,    3]   ,      # 20 - F
[   3,     3.25,   1,    2.4,      2.5,      3,      2,     2,      1,       4,    2]   ,      # 23 - F
[ 3.5,     1.83,   1,   2.33,    3.625,    2.5,    3.5,     1,    1.5,       3,    5]   ,      # 24 - F
[ 3.5,     2.33,   1,   1.66,      1.5,      2,      4,     1,    2.5,       3,    2]   ,      # 25 - F
[ 3.5,     2.66,   5,   4.46,        2,    3.5,    3.5,     4,    3.5,       4,    5]   ,      # 27 - F
[ 3.5,    2.083,   1,      3,      4.5,      4,    3.5,     3,      2,       2,    1]   ,      # 35 - F
[   3,    2.083,   5,   2.86,      4.5,      2,    3.5,     4,    2.5,     1.5,    4]   ,      # 39 - F
[   3,      1.5,   1,   3.33,        1,      1,      1,     1,      2,       1,    5]   ,      # 41 - F
[   3,    4.583,   1,   2.33,        3,      5,      1,     5,      3,       5,    1]   ,      # 42 - F
[   3,     1.75,   5,   1.53,    3.125,      3,      2,     3,    1.5,       3,    3]   ,      # 44 - F
[   3,    3.583,   1,   4.73,     2.25,      3,      1,     1,      2,       5,    1]   ,      # 46 - F
[   3,     1.83,   1,   1.16,     2.25,    4.5,    1.5,     1,    2.5,       5,    3]   ,      # 49 - F
[   3,     2.16,   1,   3.73,      3.5,     2.5,     3,     2,      2,       3,    2]   ,      # 52 - F
[   3,    2.916,   1,   3.26,        2,     2.5,   1.5,     2,      2,       2,    4]   ,      # 57 - F
[   3,     1.75,   1,   3.46,        4,     3.5,   3.5,     4,      2,     1.5,    5]   ,      # 59 - F
[   3,      3.5,   5,    2.6,    3.375,       2,     3,     3,      2,     3.5,    4]   ,      # 64 - F
[   3,    3.075,   1,   2.53,        4,       3,     3,     3,      2,       3,    3]   ,      # 65 - F
[ 3.5,     3.25,   1,    2.6,        4,       2,   2.5,     4,      2,       1,    5]   ,      # 67 - F
[   4,      3.5,   1,    2.6,        4,       3,     2,     2,    1.5,       4,    2]   ,      # 70 - F
[ 3.5,        4,   1,    2.8,      2.5,       3,     2,     2,    1.5,       4,    2]   ,      # 71 - F
[ 3.5,      3.8,   1,    3.2,      3.5,       3,     2,     2,    1.5,       4,    2]   ,      # 72 - F
[ 3.5,     3.25,   1,      3,     2.75,     2.5,   2.5,     2,    1.5,       4,    2]   ,      # 74 - F
[ 3.5,      2.5,   1,    2.8,      4.5,       4,     3,     3,      4,     4.5,    1]   ,      # 76 - F
[   4,      2.5,   5,    4.2,      3.5,     3.5,   4.5,     2,    2.5,       3,    2]   ,      # 77 - F
[ 3.5,     3.75,   1,    2.7,      3.5,       3,     2,     2,    1.5,       4,    2]   ,      # 78 - F
[ 3.5,        1,   1,    3.6,        4,       3,   4.5,     5,      3,       2,    5]   ,      # 79 - F
[   4,     2.16,   1,    2.6,      3.5,       2,   3.5,     2,    4.5,       3,    5]   ,      # 83 - F
[ 3.5,     2.75,   1,    2.8,    3.125,       4,     3,     3,    2.5,     2.5,    3]   ,      # 85 - F
[   4,     3.08,   1,   3.83,        4,       2,   3.5,     3,    4.5,     3.5,    4]   ,      # 86 - F
[ 3.5,     2.75,   1,   3.06,      4.5,       2,     3,     3,    1.5,       3,    3]   ,      # 88 - F
[ 3.5,      3.5,   1,    2.6,      4.5,     2.5,     2,     2,    1.5,       4,    2]   ,      # 89 - F
[   3,     3.85,   1,   2.66,     2.25,     2.5,   1.5,     3,    1.5,     3.5,    3]   ,      # 90 - F
[ 3.5,     3.33,   1,   4.86,        4,     3.5,     4,     5,    2.5,     1.5,    2]   ,      # 91 - F
[ 3.5,     2.75,   1,      3,     3.38,     1.5,   2.5,     4,    1.5,     3.5,    4]   ,      # 93 - F
[ 3.5,      3.5,   1,    3.4,      3.5,     2.5,   2.5,     3,      2,     2.5,    2]   ,      # 95 - F
[ 3.5,        3,   1,   3.27,     2.88,     2.5,   3.5,     3,    1.5,     2.5,    2]   ,      # 96 - F
[ 3.5,     3.08,   1,   3.33,        4,       2,   3.5,     2,    1.5,     2.5,    2]   ,      # 97 - F
[ 3.5,     3.25,   5,    2.6,     3.38,     2.5,   3.5,     2,    2.5,     3.5,    4]   ,      # 99 - F
[   3,      3.3,   1,    2.7,        4,     3.5,   2.5,     4,    1.5,     2.5,    2]   ,      # 101 - F
[   4,     3.08,   1,    2.5,      3.5,       2,     2,     3,    1.5,     3.5,    2]   ,      # 102 - F

])

# Bem-Estar - 12.2
Y = np.array([
[   2   ] ,      # 6
[   3   ]   ,    # 11
[   4   ]   ,    # 13
[   3   ]   ,    # 15
[   3   ]   ,    # 16
[   3   ] ,      # 20
[   2   ]   ,    # 23
[   2   ]   ,    # 24
[   1   ]   ,    # 25
[   4   ]   ,    # 27
[   2   ], #35
[   3   ], #39
[   1   ], #41
[   1   ], #42
[   2   ], #44
[   1   ], #46
[   1   ], #49
[   2   ], #52
[   5   ], #57
[   4   ], #59
[   4   ], #64
[   4   ], #65
[   2   ], #67
[   2   ], #70
[   2   ], #71
[   2   ], #72
[   2   ], #74
[   3   ], #76
[   3   ], #77
[   2   ], #78
[   5   ], #79
[   3   ], #83
[   4   ], #85
[   2   ], #86
[   3   ], #88
[   2   ], #89
[   3   ], #90
[   3   ], #91
[   3   ], #93
[   4   ], #95
[   4   ], #96
[   4   ], #97
[   2   ], #99
[   4   ], #101
[   2   ], #102

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Mulheres -> bem-estar 12.3

import numpy as np
import matplotlib.pyplot as plt

X = np.array([
[ 2.5,    1.83,    1,    2.6,    1.625,    1.5,      2,     1,      2,       5,    4]   ,      #  6 - F
[   4,   2.916,    5,    3.3,      4.5,      4,      4,     2,      4,       4,    4]   ,      # 11 - F
[   3,     2.5,    5,    2.2,     3.62,    4.5,      3,     3,    2.5,     3.5,    4]   ,      # 13 - F
[   4,    2.75,    1,      3,        3,      3,      3,     3,      2,       1,    4]   ,      # 15 - F
[   4,    2.75,    1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 16 - F
[   3,     2.16,   1,   3.46,     2.25,    3.5,   2.25,     3,    4.5,       3,    3]   ,      # 20 - F
[   3,     3.25,   1,    2.4,      2.5,      3,      2,     2,      1,       4,    2]   ,      # 23 - F
[ 3.5,     1.83,   1,   2.33,    3.625,    2.5,    3.5,     1,    1.5,       3,    5]   ,      # 24 - F
[ 3.5,     2.33,   1,   1.66,      1.5,      2,      4,     1,    2.5,       3,    2]   ,      # 25 - F
[ 3.5,     2.66,   5,   4.46,        2,    3.5,    3.5,     4,    3.5,       4,    5]   ,      # 27 - F
[ 3.5,    2.083,   1,      3,      4.5,      4,    3.5,     3,      2,       2,    1]   ,      # 35 - F
[   3,    2.083,   5,   2.86,      4.5,      2,    3.5,     4,    2.5,     1.5,    4]   ,      # 39 - F
[   3,      1.5,   1,   3.33,        1,      1,      1,     1,      2,       1,    5]   ,      # 41 - F
[   3,    4.583,   1,   2.33,        3,      5,      1,     5,      3,       5,    1]   ,      # 42 - F
[   3,     1.75,   5,   1.53,    3.125,      3,      2,     3,    1.5,       3,    3]   ,      # 44 - F
[   3,    3.583,   1,   4.73,     2.25,      3,      1,     1,      2,       5,    1]   ,      # 46 - F
[   3,     1.83,   1,   1.16,     2.25,    4.5,    1.5,     1,    2.5,       5,    3]   ,      # 49 - F
[   3,     2.16,   1,   3.73,      3.5,     2.5,     3,     2,      2,       3,    2]   ,      # 52 - F
[   3,    2.916,   1,   3.26,        2,     2.5,   1.5,     2,      2,       2,    4]   ,      # 57 - F
[   3,     1.75,   1,   3.46,        4,     3.5,   3.5,     4,      2,     1.5,    5]   ,      # 59 - F
[   3,      3.5,   5,    2.6,    3.375,       2,     3,     3,      2,     3.5,    4]   ,      # 64 - F
[   3,    3.075,   1,   2.53,        4,       3,     3,     3,      2,       3,    3]   ,      # 65 - F
[ 3.5,     3.25,   1,    2.6,        4,       2,   2.5,     4,      2,       1,    5]   ,      # 67 - F
[   4,      3.5,   1,    2.6,        4,       3,     2,     2,    1.5,       4,    2]   ,      # 70 - F
[ 3.5,        4,   1,    2.8,      2.5,       3,     2,     2,    1.5,       4,    2]   ,      # 71 - F
[ 3.5,      3.8,   1,    3.2,      3.5,       3,     2,     2,    1.5,       4,    2]   ,      # 72 - F
[ 3.5,     3.25,   1,      3,     2.75,     2.5,   2.5,     2,    1.5,       4,    2]   ,      # 74 - F
[ 3.5,      2.5,   1,    2.8,      4.5,       4,     3,     3,      4,     4.5,    1]   ,      # 76 - F
[   4,      2.5,   5,    4.2,      3.5,     3.5,   4.5,     2,    2.5,       3,    2]   ,      # 77 - F
[ 3.5,     3.75,   1,    2.7,      3.5,       3,     2,     2,    1.5,       4,    2]   ,      # 78 - F
[ 3.5,        1,   1,    3.6,        4,       3,   4.5,     5,      3,       2,    5]   ,      # 79 - F
[   4,     2.16,   1,    2.6,      3.5,       2,   3.5,     2,    4.5,       3,    5]   ,      # 83 - F
[ 3.5,     2.75,   1,    2.8,    3.125,       4,     3,     3,    2.5,     2.5,    3]   ,      # 85 - F
[   4,     3.08,   1,   3.83,        4,       2,   3.5,     3,    4.5,     3.5,    4]   ,      # 86 - F
[ 3.5,     2.75,   1,   3.06,      4.5,       2,     3,     3,    1.5,       3,    3]   ,      # 88 - F
[ 3.5,      3.5,   1,    2.6,      4.5,     2.5,     2,     2,    1.5,       4,    2]   ,      # 89 - F
[   3,     3.85,   1,   2.66,     2.25,     2.5,   1.5,     3,    1.5,     3.5,    3]   ,      # 90 - F
[ 3.5,     3.33,   1,   4.86,        4,     3.5,     4,     5,    2.5,     1.5,    2]   ,      # 91 - F
[ 3.5,     2.75,   1,      3,     3.38,     1.5,   2.5,     4,    1.5,     3.5,    4]   ,      # 93 - F
[ 3.5,      3.5,   1,    3.4,      3.5,     2.5,   2.5,     3,      2,     2.5,    2]   ,      # 95 - F
[ 3.5,        3,   1,   3.27,     2.88,     2.5,   3.5,     3,    1.5,     2.5,    2]   ,      # 96 - F
[ 3.5,     3.08,   1,   3.33,        4,       2,   3.5,     2,    1.5,     2.5,    2]   ,      # 97 - F
[ 3.5,     3.25,   5,    2.6,     3.38,     2.5,   3.5,     2,    2.5,     3.5,    4]   ,      # 99 - F
[   3,      3.3,   1,    2.7,        4,     3.5,   2.5,     4,    1.5,     2.5,    2]   ,      # 101 - F
[   4,     3.08,   1,    2.5,      3.5,       2,     2,     3,    1.5,     3.5,    2]   ,      # 102 - F

])

# Bem-Estar - 12.3
Y = np.array([
[   1    ]   ,    # 6
[   3    ]   ,    # 11
[   4    ]   ,    # 13
[   3    ]   ,    # 15
[   3    ]   ,    # 16
[   3    ]   ,    # 20
[   2    ]   ,    # 23
[   2    ]   ,    # 24
[   1    ]   ,    # 25
[   3    ]   ,    # 27
[   1    ], # 35
[   4    ], # 39
[   1    ], # 41
[   1    ], # 42
[   1    ], # 44
[   1    ], # 46
[   5    ], # 49
[   3    ], # 52
[   4    ], # 57
[   1    ], # 59
[   2    ], # 64
[   2    ], # 65
[   2    ], # 67
[   2    ], # 70
[   2    ], # 71
[   2    ], # 72
[   2    ], # 74
[   3    ], # 76
[   2    ], # 77
[   2    ], # 78
[   5    ], # 79
[   4    ], # 83
[   3    ], # 85
[   3    ], # 86
[   4    ], # 88
[   2    ], # 89
[   2    ], # 90
[   3    ], # 91
[   2    ], # 93
[   3    ], # 95
[   3    ], # 96
[   2    ], # 97
[   3    ], # 99
[   3    ], # 101
[   2    ], # 102

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Mulheres -> bem-estar 12.4

import numpy as np
import matplotlib.pyplot as plt

X = np.array([
[ 2.5,    1.83,    1,    2.6,    1.625,    1.5,      2,     1,      2,       5,    4]   ,      #  6 - F
[   4,   2.916,    5,    3.3,      4.5,      4,      4,     2,      4,       4,    4]   ,      # 11 - F
[   3,     2.5,    5,    2.2,     3.62,    4.5,      3,     3,    2.5,     3.5,    4]   ,      # 13 - F
[   4,    2.75,    1,      3,        3,      3,      3,     3,      2,       1,    4]   ,      # 15 - F
[   4,    2.75,    1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 16 - F
[   3,     2.16,   1,   3.46,     2.25,    3.5,   2.25,     3,    4.5,       3,    3]   ,      # 20 - F
[   3,     3.25,   1,    2.4,      2.5,      3,      2,     2,      1,       4,    2]   ,      # 23 - F
[ 3.5,     1.83,   1,   2.33,    3.625,    2.5,    3.5,     1,    1.5,       3,    5]   ,      # 24 - F
[ 3.5,     2.33,   1,   1.66,      1.5,      2,      4,     1,    2.5,       3,    2]   ,      # 25 - F
[ 3.5,     2.66,   5,   4.46,        2,    3.5,    3.5,     4,    3.5,       4,    5]   ,      # 27 - F
[ 3.5,    2.083,   1,      3,      4.5,      4,    3.5,     3,      2,       2,    1]   ,      # 35 - F
[   3,    2.083,   5,   2.86,      4.5,      2,    3.5,     4,    2.5,     1.5,    4]   ,      # 39 - F
[   3,      1.5,   1,   3.33,        1,      1,      1,     1,      2,       1,    5]   ,      # 41 - F
[   3,    4.583,   1,   2.33,        3,      5,      1,     5,      3,       5,    1]   ,      # 42 - F
[   3,     1.75,   5,   1.53,    3.125,      3,      2,     3,    1.5,       3,    3]   ,      # 44 - F
[   3,    3.583,   1,   4.73,     2.25,      3,      1,     1,      2,       5,    1]   ,      # 46 - F
[   3,     1.83,   1,   1.16,     2.25,    4.5,    1.5,     1,    2.5,       5,    3]   ,      # 49 - F
[   3,     2.16,   1,   3.73,      3.5,     2.5,     3,     2,      2,       3,    2]   ,      # 52 - F
[   3,    2.916,   1,   3.26,        2,     2.5,   1.5,     2,      2,       2,    4]   ,      # 57 - F
[   3,     1.75,   1,   3.46,        4,     3.5,   3.5,     4,      2,     1.5,    5]   ,      # 59 - F
[   3,      3.5,   5,    2.6,    3.375,       2,     3,     3,      2,     3.5,    4]   ,      # 64 - F
[   3,    3.075,   1,   2.53,        4,       3,     3,     3,      2,       3,    3]   ,      # 65 - F
[ 3.5,     3.25,   1,    2.6,        4,       2,   2.5,     4,      2,       1,    5]   ,      # 67 - F
[   4,      3.5,   1,    2.6,        4,       3,     2,     2,    1.5,       4,    2]   ,      # 70 - F
[ 3.5,        4,   1,    2.8,      2.5,       3,     2,     2,    1.5,       4,    2]   ,      # 71 - F
[ 3.5,      3.8,   1,    3.2,      3.5,       3,     2,     2,    1.5,       4,    2]   ,      # 72 - F
[ 3.5,     3.25,   1,      3,     2.75,     2.5,   2.5,     2,    1.5,       4,    2]   ,      # 74 - F
[ 3.5,      2.5,   1,    2.8,      4.5,       4,     3,     3,      4,     4.5,    1]   ,      # 76 - F
[   4,      2.5,   5,    4.2,      3.5,     3.5,   4.5,     2,    2.5,       3,    2]   ,      # 77 - F
[ 3.5,     3.75,   1,    2.7,      3.5,       3,     2,     2,    1.5,       4,    2]   ,      # 78 - F
[ 3.5,        1,   1,    3.6,        4,       3,   4.5,     5,      3,       2,    5]   ,      # 79 - F
[   4,     2.16,   1,    2.6,      3.5,       2,   3.5,     2,    4.5,       3,    5]   ,      # 83 - F
[ 3.5,     2.75,   1,    2.8,    3.125,       4,     3,     3,    2.5,     2.5,    3]   ,      # 85 - F
[   4,     3.08,   1,   3.83,        4,       2,   3.5,     3,    4.5,     3.5,    4]   ,      # 86 - F
[ 3.5,     2.75,   1,   3.06,      4.5,       2,     3,     3,    1.5,       3,    3]   ,      # 88 - F
[ 3.5,      3.5,   1,    2.6,      4.5,     2.5,     2,     2,    1.5,       4,    2]   ,      # 89 - F
[   3,     3.85,   1,   2.66,     2.25,     2.5,   1.5,     3,    1.5,     3.5,    3]   ,      # 90 - F
[ 3.5,     3.33,   1,   4.86,        4,     3.5,     4,     5,    2.5,     1.5,    2]   ,      # 91 - F
[ 3.5,     2.75,   1,      3,     3.38,     1.5,   2.5,     4,    1.5,     3.5,    4]   ,      # 93 - F
[ 3.5,      3.5,   1,    3.4,      3.5,     2.5,   2.5,     3,      2,     2.5,    2]   ,      # 95 - F
[ 3.5,        3,   1,   3.27,     2.88,     2.5,   3.5,     3,    1.5,     2.5,    2]   ,      # 96 - F
[ 3.5,     3.08,   1,   3.33,        4,       2,   3.5,     2,    1.5,     2.5,    2]   ,      # 97 - F
[ 3.5,     3.25,   5,    2.6,     3.38,     2.5,   3.5,     2,    2.5,     3.5,    4]   ,      # 99 - F
[   3,      3.3,   1,    2.7,        4,     3.5,   2.5,     4,    1.5,     2.5,    2]   ,      # 101 - F
[   4,     3.08,   1,    2.5,      3.5,       2,     2,     3,    1.5,     3.5,    2]   ,      # 102 - F

])

# Bem-Estar - 12.4
Y = np.array([
[   1    ] ,      # 6
[   2    ]   ,    # 11
[   2    ]   ,    # 13
[   3    ]   ,    # 15
[   3    ]   ,    # 16
[   3    ] ,      # 20
[   2    ]   ,    # 23
[   4    ]   ,    # 24
[   3    ]   ,    # 25
[   3    ]   ,    # 27
[   1   ], #35
[   4   ], #39
[   1   ], #41
[   1   ], #42
[   1   ], #44
[   1   ], #46
[   5   ], #49
[   3   ], #52
[   4   ], #57
[   1   ], #59
[   2   ], #64
[   2   ], #65
[   2   ], #67
[   2   ], #70
[   2   ], #71
[   2   ], #72
[   2   ], #74
[   3   ], #76
[   2   ], #77
[   2   ], #78
[   5   ], #79
[   4   ], #83
[   3   ], #85
[   3   ], #86
[   4   ], #88
[   2   ], #89
[   2   ], #90
[   3   ], #91
[   2   ], #93
[   3   ], #95
[   3   ], #96
[   2   ], #97
[   3   ], #99
[   3   ], #101
[   2   ], #102

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

"""## HOMENS

### Homem: Bem-estar média
"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Homens

import numpy as np
import matplotlib.pyplot as plt

X = np.array([
[   4,     2.3,   1,   2.73,        4,      2,      2,     2,      4,     1.5,    2]   ,      #  7 - M
[   4,   2.165,   5,   3.86,      4.5,      5,    2.5,     4,    4.5,       4,    4]   ,      #  8 - M
[   5,     2.3,   1,    2.6,        5,      4,      3,     2,    2.5,       2,    2]   ,      #  9 - M
[   5,     3.5,   5,    3.6,      4.5,    4.5,    3.5,     4,      3,     2.5,    5]   ,      # 10 - M
[   4,     3.3,   1,   2.26,        5,      3,      2,     4,    1.5,     4.5,    5]   ,      # 12 - M
[   4,    2.75,   5,      3,        3,      3,      3,     3,      2,       2,    4]   ,      # 14 - M
[   4,       3,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 17 - M
[ 4.5,    3.16,   5,   3.86,    3.125,      4,      3,     4,    2.5,       3,    4]   ,      # 18 - M
[ 4.5,       3,   5,   3.73,      4.5,      4,    3.5,     4,    2.5,       5,    5]   ,      # 19 - M
[   4,    3.25,   1,   3.13,    2.625,      2,      3,     3,    2.5,       2,    4]   ,      # 21 - M
[ 4.5,     2.5,   5,   3.73,        5,    2.5,      3,     3,      5,     2.5,    2]   ,      # 22 - M
[   4,     3.5,   5,   3.86,        5,      3,    4.5,     5,      5,     4.5,    4]   ,      # 26 - M
[   4,   2.916,   1,   3.46,      4.5,      4,      3,     4,      5,       5,    5]   ,      # 28 - M
[ 4.5,   2.083,   5,      3,        4,    1.5,      3,     2,      1,     3.5,    2]   ,      # 29 - M
[   4,    2.66,   1,    4.3,     1.25,      3,      3,     3,      2,       3,    5]   ,      # 30 - M
[   4,     3.66,   5,   4.93,        5,      5,    3.5,     5,      3,       3,    5]   ,      # 31 - M
[   5,    3.916,   5,   4.93,        5,    4.5,    3.5,     4,      5,       4,    3]   ,      # 32 - M
[ 4.5,     3.75,   5,   3.66,      3.5,      3,    3.5,     4,    3.5,       2,    4]   ,      # 33 - M
[   5,     3.16,   5,      4,        4,      4,      5,     4,    4.5,       5,    4]   ,      # 34 - M
[ 4.5,     2.33,   1,      5,        4,      5,      5,     5,      5,       5,    5]   ,      # 36 - M
[   4,        2,   5,   2.13,    2.625,    2.5,    2.5,     1,    1.5,       1,    2]   ,      # 37 - M
[ 4.5,    2.083,   5,   2.66,        5,    3.5,      3,     2,    2.5,       3,    5]   ,      # 38 - M
[   4,      3.5,   5,   3.33,      4.5,    2.5,      3,     3,      5,       5,    1]   ,      # 40 - M
[   4,     3.25,   5,   3.33,      4.5,      1,      3,     3,    3.5,       5,    2]   ,      # 43 - M
[   4,    1.583,   1,    2.8,     1.75,      4,    3.5,     3,      2,       2,    3]   ,      # 45 - M
[   4,     2.75,   1,   2.06,     1.25,      4,      3,     5,    3.5,       4,    1]   ,      # 47 - M
[   4,    2.583,   1,      3,    2.875,      4,    2.5,     4,      2,       2,    5]   ,      # 48 - M
[   4,     2.16,   5,   4.83,      4.5,      5,      3,     5,    2.5,     4.5,    5]   ,      # 50 - M
[   4,      3.5,   5,    4.4,        4,     4.5,   1.5,     4,      5,       5,    1]   ,      # 51 - M
[   4,    3.083,   1,   3.11,    2.875,       4,     3,     1,      2,       4,    5]   ,      # 53 - M
[   4,    1.916,   1,   3.33,      4.5,       2,   2.5,     2,      2,       4,    3]   ,      # 54 - M
[   4,     2.16,   1,    3.8,        5,       5,   2.5,     4,      2,       3,    5]   ,      # 55 - M
[   5,      2.5,   1,    2.4,        4,       5,   4.5,     1,    2.5,     3.5,    4]   ,      # 56 - M
[ 4.5,     3.66,   5,      4,        4,     2.5,   2.5,     4,      5,       4,    1]   ,      # 58 - M
[   4,        5,   5,      5,        5,       3,     2,     1,      2,       5,    1]   ,      # 60 - M
[   4,     4.25,   5,   2.73,        4,     2.5,     5,     2,      3,     3.5,    3]   ,      # 61 - M
[   4,     3.25,   1,      4,        4,       3,     3,     3,      2,       3,    3]   ,      # 62 - M
[ 4.5,     3.25,   5,      3,        3,       3,     3,     3,      2,       3,    2]   ,      # 63 - M
[ 4.5,    1.416,   5,    4.3,        4,     2.5,   3.5,     3,      2,       1,    5]   ,      # 66 - M
[   5,     3.41,   1,      3,        4,     3.5,     3,     3,      2,     2.5,    3]   ,      # 68 - M
[   5,        3,   1,    2.6,      3.5,       3,   2.5,     4,      2,       3,    3]   ,      # 69 - M
[ 4.5,     3.66,   1,    3.3,    4.125,     1.5,   1.5,     2,      3,     2.5,    5]   ,      # 73 - M
[ 4.5,        3,   5,    3.8,      4.5,       4,   3.5,     4,    4.5,       2,    4]   ,      # 75 - M
[   4,     1.75,   1,   1.53,      1.5,       1,     1,     1,      1,     1.5,    2]   ,      # 80 - M
[ 4.5,     3.17,   1,   2.46,      3.5,     3.5,     3,     2,      4,       3,    3]   ,      # 81 - M
[   4,     2.75,   1,    2.5,        5,       4,   3.5,     3,    1.5,     2.5,    2]   ,      # 82 - M
[   4,      3.5,   1,      4,        5,     3.5,   3.5,     3,    3.5,       3,    5]   ,      # 84 - M
[   4,     3.75,   5,   3.66,        3,       3,     3,     3,      2,       3,    3]   ,      # 87 - M
[   4,        5,   5,    3.5,        2,       3,     1,     1,      1,       5,    1]   ,      # 92 - M
[   5,     3.25,   1,    3.4,     3.66,       2,   2.5,     4,      2,     2.5,    2]   ,      # 94 - M
[   4,     3.41,   1,   3.27,      3.5,       2,   2.5,     3,    2.5,       3,    3]   ,      # 98 - M
[   5,        3,   5,    2.7,     2.75,     2.5,   2.5,     4,      2,     2.5,    3]   ,      # 100 - M

])

# Bem-Estar - media geral homens
Y = np.array([
[   2.75   ] ,      # 7 - M
[   3.5    ]   ,    # 8 - M
[   2.75   ]   ,    # 9 - M
[   4.25   ]   ,    # 10 - M
[   4      ]   ,    # 12 - M
[   3      ]   ,    # 14 - M
[   3      ]   ,    # 17 - M
[   4      ] ,      # 18 - M
[   4      ] ,      # 19 - M
[   3.5    ]   ,    # 21 - M
[   2.75   ]   ,    # 22 - M
[   3.75   ]   ,    # 26 - M
[   4      ]   ,    # 28 - M
[   1.75   ]   ,    # 29 - M
[   2.5    ]   ,    # 30 - M
[   5      ]   ,    # 31 - M
[   4.75   ]   ,    # 32 - M
[   3.75   ]   ,    # 33 - M
[   4.5    ]   ,    # 34 - M
[   4      ]   ,    # 36 - M
[   3      ]   ,    # 37 - M
[   4      ]   ,    # 38 - M
[   5      ]   ,    # 40 - M
[   3      ]   ,    # 43 - M
[   2.75   ]   ,    # 45 - M
[   3      ]   ,    # 47 - M
[   1.5    ]   ,    # 48 - M
[   4.5    ]   ,    # 50 - M
[   4.5    ]   ,    # 51 - M
[   4.25   ]   ,    # 53 - M
[   3.25   ]   ,    # 54 - M
[   3.75   ]   ,    # 55 - M
[   2      ]   ,    # 56 - M
[   2.75   ]   ,    # 58 - M
[   1      ]   ,    # 60 - M
[   4      ]   ,    # 61 - M
[   3      ]   ,    # 62 - M
[   3      ]   ,    # 63 - M
[   2.5    ]   ,    # 66 - M
[   2.75   ]   ,    # 68 - M
[   3      ]   ,    # 69 - M
[   3.5    ]   ,    # 73 - M
[   4      ]   ,    # 75 - M
[   1.75   ]   ,    # 80 - M
[   3      ]   ,    # 81 - M
[   3.75   ]   ,    # 82 - M
[   3      ]   ,    # 84 - M
[   3      ]   ,    # 87 - M
[   1      ]   ,    # 92 - M
[   3.5    ]   ,    # 94 - M
[   3      ]   ,    # 98 - M
[   3      ]   ,    # 100 - M
])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

"""### Homem: Bem-estar separado"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Homens

import numpy as np
import matplotlib.pyplot as plt

X = np.array ([

[   4,     2.3,   1,   2.73,        4,      2,      2,     2,      4,     1.5,    2]   ,      #  7 - M
[   4,   2.165,   5,   3.86,      4.5,      5,    2.5,     4,    4.5,       4,    4]   ,      #  8 - M
[   5,     2.3,   1,    2.6,        5,      4,      3,     2,    2.5,       2,    2]   ,      #  9 - M
[   5,     3.5,   5,    3.6,      4.5,    4.5,    3.5,     4,      3,     2.5,    5]   ,      # 10 - M
[   4,     3.3,   1,   2.26,        5,      3,      2,     4,    1.5,     4.5,    5]   ,      # 12 - M
[   4,    2.75,   5,      3,        3,      3,      3,     3,      2,       2,    4]   ,      # 14 - M
[   4,       3,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 17 - M
[ 4.5,    3.16,   5,   3.86,    3.125,      4,      3,     4,    2.5,       3,    4]   ,      # 18 - M
[ 4.5,       3,   5,   3.73,      4.5,      4,    3.5,     4,    2.5,       5,    5]   ,      # 19 - M
[   4,    3.25,   1,   3.13,    2.625,      2,      3,     3,    2.5,       2,    4]   ,      # 21 - M
[ 4.5,     2.5,   5,   3.73,        5,    2.5,      3,     3,      5,     2.5,    2]   ,      # 22 - M
[   4,     3.5,   5,   3.86,        5,      3,    4.5,     5,      5,     4.5,    4]   ,      # 26 - M
[   4,   2.916,   1,   3.46,      4.5,      4,      3,     4,      5,       5,    5]   ,      # 28 - M
[ 4.5,   2.083,   5,      3,        4,    1.5,      3,     2,      1,     3.5,    2]   ,      # 29 - M
[   4,    2.66,   1,    4.3,     1.25,      3,      3,     3,      2,       3,    5]   ,      # 30 - M
[   4,     3.66,   5,   4.93,        5,      5,    3.5,     5,      3,       3,    5]   ,      # 31 - M
[   5,    3.916,   5,   4.93,        5,    4.5,    3.5,     4,      5,       4,    3]   ,      # 32 - M
[ 4.5,     3.75,   5,   3.66,      3.5,      3,    3.5,     4,    3.5,       2,    4]   ,      # 33 - M
[   5,     3.16,   5,      4,        4,      4,      5,     4,    4.5,       5,    4]   ,      # 34 - M
[ 4.5,     2.33,   1,      5,        4,      5,      5,     5,      5,       5,    5]   ,      # 36 - M
[   4,        2,   5,   2.13,    2.625,    2.5,    2.5,     1,    1.5,       1,    2]   ,      # 37 - M
[ 4.5,    2.083,   5,   2.66,        5,    3.5,      3,     2,    2.5,       3,    5]   ,      # 38 - M
[   4,      3.5,   5,   3.33,      4.5,    2.5,      3,     3,      5,       5,    1]   ,      # 40 - M
[   4,     3.25,   5,   3.33,      4.5,      1,      3,     3,    3.5,       5,    2]   ,      # 43 - M
[   4,    1.583,   1,    2.8,     1.75,      4,    3.5,     3,      2,       2,    3]   ,      # 45 - M
[   4,     2.75,   1,   2.06,     1.25,      4,      3,     5,    3.5,       4,    1]   ,      # 47 - M
[   4,    2.583,   1,      3,    2.875,      4,    2.5,     4,      2,       2,    5]   ,      # 48 - M
[   4,     2.16,   5,   4.83,      4.5,      5,      3,     5,    2.5,     4.5,    5]   ,      # 50 - M
[   4,      3.5,   5,    4.4,        4,     4.5,   1.5,     4,      5,       5,    1]   ,      # 51 - M
[   4,    3.083,   1,   3.11,    2.875,       4,     3,     1,      2,       4,    5]   ,      # 53 - M
[   4,    1.916,   1,   3.33,      4.5,       2,   2.5,     2,      2,       4,    3]   ,      # 54 - M
[   4,     2.16,   1,    3.8,        5,       5,   2.5,     4,      2,       3,    5]   ,      # 55 - M
[   5,      2.5,   1,    2.4,        4,       5,   4.5,     1,    2.5,     3.5,    4]   ,      # 56 - M
[ 4.5,     3.66,   5,      4,        4,     2.5,   2.5,     4,      5,       4,    1]   ,      # 58 - M
[   4,        5,   5,      5,        5,       3,     2,     1,      2,       5,    1]   ,      # 60 - M
[   4,     4.25,   5,   2.73,        4,     2.5,     5,     2,      3,     3.5,    3]   ,      # 61 - M
[   4,     3.25,   1,      4,        4,       3,     3,     3,      2,       3,    3]   ,      # 62 - M
[ 4.5,     3.25,   5,      3,        3,       3,     3,     3,      2,       3,    2]   ,      # 63 - M
[ 4.5,    1.416,   5,    4.3,        4,     2.5,   3.5,     3,      2,       1,    5]   ,      # 66 - M
[   5,     3.41,   1,      3,        4,     3.5,     3,     3,      2,     2.5,    3]   ,      # 68 - M
[   5,        3,   1,    2.6,      3.5,       3,   2.5,     4,      2,       3,    3]   ,      # 69 - M
[ 4.5,     3.66,   1,    3.3,    4.125,     1.5,   1.5,     2,      3,     2.5,    5]   ,      # 73 - M
[ 4.5,        3,   5,    3.8,      4.5,       4,   3.5,     4,    4.5,       2,    4]   ,      # 75 - M
[   4,     1.75,   1,   1.53,      1.5,       1,     1,     1,      1,     1.5,    2]   ,      # 80 - M
[ 4.5,     3.17,   1,   2.46,      3.5,     3.5,     3,     2,      4,       3,    3]   ,      # 81 - M
[   4,     2.75,   1,    2.5,        5,       4,   3.5,     3,    1.5,     2.5,    2]   ,      # 82 - M
[   4,      3.5,   1,      4,        5,     3.5,   3.5,     3,    3.5,       3,    5]   ,      # 84 - M
[   4,     3.75,   5,   3.66,        3,       3,     3,     3,      2,       3,    3]   ,      # 87 - M
[   4,        5,   5,    3.5,        2,       3,     1,     1,      1,       5,    1]   ,      # 92 - M
[   5,     3.25,   1,    3.4,     3.66,       2,   2.5,     4,      2,     2.5,    2]   ,      # 94 - M
[   4,     3.41,   1,   3.27,      3.5,       2,   2.5,     3,    2.5,       3,    3]   ,      # 98 - M
[   5,        3,   5,    2.7,     2.75,     2.5,   2.5,     4,      2,     2.5,    3]   ,      # 100 - M

])


# Bem-Estar - 12.1 - avaliação satisfação geral com o trabalho
Y = np.array([
[   3   ]   ,    # 7
[   4   ]   ,    # 8
[   4   ]   ,    # 9
[   5   ]   ,    # 10
[   4   ]   ,    # 12
[   3   ]   ,    # 14
[   3   ]   ,    # 17
[   4   ]   ,    # 18
[   4   ]   ,    # 19
[   3   ]   ,    # 21
[   2   ]   ,    # 22
[   4   ]   ,    # 26
[   4   ]   ,    # 28
[   2   ]   ,    # 29
[   3   ]   ,    # 30
[   5   ]   ,    # 31
[   5   ]   ,    # 32
[   3   ]   ,    # 33
[   5   ]   ,    # 34
[   4   ]   ,    # 36
[   3   ]   ,    # 37
[   5   ]   ,    # 38
[   5   ]   ,    # 40
[   3   ]   ,    # 45
[   4   ]   ,    # 43
[   2   ]   ,    # 47
[   2   ]   ,    # 48
[   5   ]   ,    # 50
[   4   ]   ,    # 51
[   5   ]   ,    # 53
[   3   ]   ,    # 54
[   5   ]   ,    # 55
[   2   ]   ,    # 56
[   3   ]   ,    # 58
[   1   ]   ,    # 60
[   4   ]   ,    # 61
[   3   ]   ,    # 62
[   3   ]   ,    # 63
[   3   ]   ,    # 66
[   3   ]   ,    # 68
[   3   ]   ,    # 69
[   2   ]   ,    # 73
[   4   ]   ,    # 75
[   2   ]   ,    # 80
[   3   ]   ,    # 81
[   4   ]   ,    # 82
[   3   ]   ,    # 84
[   3   ]   ,    # 87
[   1   ]   ,    # 92
[   4   ]   ,    # 94
[   3   ]   ,    # 98
[   2   ]   ,    # 100

])


########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Homens

import numpy as np
import matplotlib.pyplot as plt

X = np.array ([

[   4,     2.3,   1,   2.73,        4,      2,      2,     2,      4,     1.5,    2]   ,      #  7 - M
[   4,   2.165,   5,   3.86,      4.5,      5,    2.5,     4,    4.5,       4,    4]   ,      #  8 - M
[   5,     2.3,   1,    2.6,        5,      4,      3,     2,    2.5,       2,    2]   ,      #  9 - M
[   5,     3.5,   5,    3.6,      4.5,    4.5,    3.5,     4,      3,     2.5,    5]   ,      # 10 - M
[   4,     3.3,   1,   2.26,        5,      3,      2,     4,    1.5,     4.5,    5]   ,      # 12 - M
[   4,    2.75,   5,      3,        3,      3,      3,     3,      2,       2,    4]   ,      # 14 - M
[   4,       3,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 17 - M
[ 4.5,    3.16,   5,   3.86,    3.125,      4,      3,     4,    2.5,       3,    4]   ,      # 18 - M
[ 4.5,       3,   5,   3.73,      4.5,      4,    3.5,     4,    2.5,       5,    5]   ,      # 19 - M
[   4,    3.25,   1,   3.13,    2.625,      2,      3,     3,    2.5,       2,    4]   ,      # 21 - M
[ 4.5,     2.5,   5,   3.73,        5,    2.5,      3,     3,      5,     2.5,    2]   ,      # 22 - M
[   4,     3.5,   5,   3.86,        5,      3,    4.5,     5,      5,     4.5,    4]   ,      # 26 - M
[   4,   2.916,   1,   3.46,      4.5,      4,      3,     4,      5,       5,    5]   ,      # 28 - M
[ 4.5,   2.083,   5,      3,        4,    1.5,      3,     2,      1,     3.5,    2]   ,      # 29 - M
[   4,    2.66,   1,    4.3,     1.25,      3,      3,     3,      2,       3,    5]   ,      # 30 - M
[   4,     3.66,   5,   4.93,        5,      5,    3.5,     5,      3,       3,    5]   ,      # 31 - M
[   5,    3.916,   5,   4.93,        5,    4.5,    3.5,     4,      5,       4,    3]   ,      # 32 - M
[ 4.5,     3.75,   5,   3.66,      3.5,      3,    3.5,     4,    3.5,       2,    4]   ,      # 33 - M
[   5,     3.16,   5,      4,        4,      4,      5,     4,    4.5,       5,    4]   ,      # 34 - M
[ 4.5,     2.33,   1,      5,        4,      5,      5,     5,      5,       5,    5]   ,      # 36 - M
[   4,        2,   5,   2.13,    2.625,    2.5,    2.5,     1,    1.5,       1,    2]   ,      # 37 - M
[ 4.5,    2.083,   5,   2.66,        5,    3.5,      3,     2,    2.5,       3,    5]   ,      # 38 - M
[   4,      3.5,   5,   3.33,      4.5,    2.5,      3,     3,      5,       5,    1]   ,      # 40 - M
[   4,     3.25,   5,   3.33,      4.5,      1,      3,     3,    3.5,       5,    2]   ,      # 43 - M
[   4,    1.583,   1,    2.8,     1.75,      4,    3.5,     3,      2,       2,    3]   ,      # 45 - M
[   4,     2.75,   1,   2.06,     1.25,      4,      3,     5,    3.5,       4,    1]   ,      # 47 - M
[   4,    2.583,   1,      3,    2.875,      4,    2.5,     4,      2,       2,    5]   ,      # 48 - M
[   4,     2.16,   5,   4.83,      4.5,      5,      3,     5,    2.5,     4.5,    5]   ,      # 50 - M
[   4,      3.5,   5,    4.4,        4,     4.5,   1.5,     4,      5,       5,    1]   ,      # 51 - M
[   4,    3.083,   1,   3.11,    2.875,       4,     3,     1,      2,       4,    5]   ,      # 53 - M
[   4,    1.916,   1,   3.33,      4.5,       2,   2.5,     2,      2,       4,    3]   ,      # 54 - M
[   4,     2.16,   1,    3.8,        5,       5,   2.5,     4,      2,       3,    5]   ,      # 55 - M
[   5,      2.5,   1,    2.4,        4,       5,   4.5,     1,    2.5,     3.5,    4]   ,      # 56 - M
[ 4.5,     3.66,   5,      4,        4,     2.5,   2.5,     4,      5,       4,    1]   ,      # 58 - M
[   4,        5,   5,      5,        5,       3,     2,     1,      2,       5,    1]   ,      # 60 - M
[   4,     4.25,   5,   2.73,        4,     2.5,     5,     2,      3,     3.5,    3]   ,      # 61 - M
[   4,     3.25,   1,      4,        4,       3,     3,     3,      2,       3,    3]   ,      # 62 - M
[ 4.5,     3.25,   5,      3,        3,       3,     3,     3,      2,       3,    2]   ,      # 63 - M
[ 4.5,    1.416,   5,    4.3,        4,     2.5,   3.5,     3,      2,       1,    5]   ,      # 66 - M
[   5,     3.41,   1,      3,        4,     3.5,     3,     3,      2,     2.5,    3]   ,      # 68 - M
[   5,        3,   1,    2.6,      3.5,       3,   2.5,     4,      2,       3,    3]   ,      # 69 - M
[ 4.5,     3.66,   1,    3.3,    4.125,     1.5,   1.5,     2,      3,     2.5,    5]   ,      # 73 - M
[ 4.5,        3,   5,    3.8,      4.5,       4,   3.5,     4,    4.5,       2,    4]   ,      # 75 - M
[   4,     1.75,   1,   1.53,      1.5,       1,     1,     1,      1,     1.5,    2]   ,      # 80 - M
[ 4.5,     3.17,   1,   2.46,      3.5,     3.5,     3,     2,      4,       3,    3]   ,      # 81 - M
[   4,     2.75,   1,    2.5,        5,       4,   3.5,     3,    1.5,     2.5,    2]   ,      # 82 - M
[   4,      3.5,   1,      4,        5,     3.5,   3.5,     3,    3.5,       3,    5]   ,      # 84 - M
[   4,     3.75,   5,   3.66,        3,       3,     3,     3,      2,       3,    3]   ,      # 87 - M
[   4,        5,   5,    3.5,        2,       3,     1,     1,      1,       5,    1]   ,      # 92 - M
[   5,     3.25,   1,    3.4,     3.66,       2,   2.5,     4,      2,     2.5,    2]   ,      # 94 - M
[   4,     3.41,   1,   3.27,      3.5,       2,   2.5,     3,    2.5,       3,    3]   ,      # 98 - M
[   5,        3,   5,    2.7,     2.75,     2.5,   2.5,     4,      2,     2.5,    3]   ,      # 100 - M

])


# Bem-Estar - 12.2 - expectativas que você tinha ao ser contratado
Y = np.array([
[   2   ], #7
[   4   ], #8
[   3   ], #9
[   4   ], #10
[   5   ], #12
[   3   ], #14
[   3   ], #17
[   4   ], #18
[   4   ], #19
[   4   ], #21
[   2   ], #22
[   4   ], #26
[   4   ], #28
[   1   ], #29
[   1   ], #30
[   5   ], #31
[   5   ], #32
[   3   ], #33
[   5   ], #34
[   5   ], #36
[   2   ], #37
[   5   ], #38
[   5   ], #40
[   2   ], #43
[   2   ], #45
[   3   ], #47
[   2   ], #48
[   5   ], #50
[   5   ], #51
[   3   ], #53
[   3   ], #54
[   4   ], #55
[   1   ], #56
[   2   ], #58
[   1   ], #60
[   4   ], #61
[   3   ], #62
[   3   ], #63
[   2   ], #66
[   2   ], #68
[   3   ], #69
[   5   ], #73
[   4   ], #75
[   1   ], #80
[   3   ], #81
[   2   ], #82
[   4   ], #84
[   3   ], #87
[   1   ], #92
[   3   ], #94
[   2   ], #98
[   4   ], #100

])


########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Homens

import numpy as np
import matplotlib.pyplot as plt

X = np.array ([

[   4,     2.3,   1,   2.73,        4,      2,      2,     2,      4,     1.5,    2]   ,      #  7 - M
[   4,   2.165,   5,   3.86,      4.5,      5,    2.5,     4,    4.5,       4,    4]   ,      #  8 - M
[   5,     2.3,   1,    2.6,        5,      4,      3,     2,    2.5,       2,    2]   ,      #  9 - M
[   5,     3.5,   5,    3.6,      4.5,    4.5,    3.5,     4,      3,     2.5,    5]   ,      # 10 - M
[   4,     3.3,   1,   2.26,        5,      3,      2,     4,    1.5,     4.5,    5]   ,      # 12 - M
[   4,    2.75,   5,      3,        3,      3,      3,     3,      2,       2,    4]   ,      # 14 - M
[   4,       3,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 17 - M
[ 4.5,    3.16,   5,   3.86,    3.125,      4,      3,     4,    2.5,       3,    4]   ,      # 18 - M
[ 4.5,       3,   5,   3.73,      4.5,      4,    3.5,     4,    2.5,       5,    5]   ,      # 19 - M
[   4,    3.25,   1,   3.13,    2.625,      2,      3,     3,    2.5,       2,    4]   ,      # 21 - M
[ 4.5,     2.5,   5,   3.73,        5,    2.5,      3,     3,      5,     2.5,    2]   ,      # 22 - M
[   4,     3.5,   5,   3.86,        5,      3,    4.5,     5,      5,     4.5,    4]   ,      # 26 - M
[   4,   2.916,   1,   3.46,      4.5,      4,      3,     4,      5,       5,    5]   ,      # 28 - M
[ 4.5,   2.083,   5,      3,        4,    1.5,      3,     2,      1,     3.5,    2]   ,      # 29 - M
[   4,    2.66,   1,    4.3,     1.25,      3,      3,     3,      2,       3,    5]   ,      # 30 - M
[   4,     3.66,   5,   4.93,        5,      5,    3.5,     5,      3,       3,    5]   ,      # 31 - M
[   5,    3.916,   5,   4.93,        5,    4.5,    3.5,     4,      5,       4,    3]   ,      # 32 - M
[ 4.5,     3.75,   5,   3.66,      3.5,      3,    3.5,     4,    3.5,       2,    4]   ,      # 33 - M
[   5,     3.16,   5,      4,        4,      4,      5,     4,    4.5,       5,    4]   ,      # 34 - M
[ 4.5,     2.33,   1,      5,        4,      5,      5,     5,      5,       5,    5]   ,      # 36 - M
[   4,        2,   5,   2.13,    2.625,    2.5,    2.5,     1,    1.5,       1,    2]   ,      # 37 - M
[ 4.5,    2.083,   5,   2.66,        5,    3.5,      3,     2,    2.5,       3,    5]   ,      # 38 - M
[   4,      3.5,   5,   3.33,      4.5,    2.5,      3,     3,      5,       5,    1]   ,      # 40 - M
[   4,     3.25,   5,   3.33,      4.5,      1,      3,     3,    3.5,       5,    2]   ,      # 43 - M
[   4,    1.583,   1,    2.8,     1.75,      4,    3.5,     3,      2,       2,    3]   ,      # 45 - M
[   4,     2.75,   1,   2.06,     1.25,      4,      3,     5,    3.5,       4,    1]   ,      # 47 - M
[   4,    2.583,   1,      3,    2.875,      4,    2.5,     4,      2,       2,    5]   ,      # 48 - M
[   4,     2.16,   5,   4.83,      4.5,      5,      3,     5,    2.5,     4.5,    5]   ,      # 50 - M
[   4,      3.5,   5,    4.4,        4,     4.5,   1.5,     4,      5,       5,    1]   ,      # 51 - M
[   4,    3.083,   1,   3.11,    2.875,       4,     3,     1,      2,       4,    5]   ,      # 53 - M
[   4,    1.916,   1,   3.33,      4.5,       2,   2.5,     2,      2,       4,    3]   ,      # 54 - M
[   4,     2.16,   1,    3.8,        5,       5,   2.5,     4,      2,       3,    5]   ,      # 55 - M
[   5,      2.5,   1,    2.4,        4,       5,   4.5,     1,    2.5,     3.5,    4]   ,      # 56 - M
[ 4.5,     3.66,   5,      4,        4,     2.5,   2.5,     4,      5,       4,    1]   ,      # 58 - M
[   4,        5,   5,      5,        5,       3,     2,     1,      2,       5,    1]   ,      # 60 - M
[   4,     4.25,   5,   2.73,        4,     2.5,     5,     2,      3,     3.5,    3]   ,      # 61 - M
[   4,     3.25,   1,      4,        4,       3,     3,     3,      2,       3,    3]   ,      # 62 - M
[ 4.5,     3.25,   5,      3,        3,       3,     3,     3,      2,       3,    2]   ,      # 63 - M
[ 4.5,    1.416,   5,    4.3,        4,     2.5,   3.5,     3,      2,       1,    5]   ,      # 66 - M
[   5,     3.41,   1,      3,        4,     3.5,     3,     3,      2,     2.5,    3]   ,      # 68 - M
[   5,        3,   1,    2.6,      3.5,       3,   2.5,     4,      2,       3,    3]   ,      # 69 - M
[ 4.5,     3.66,   1,    3.3,    4.125,     1.5,   1.5,     2,      3,     2.5,    5]   ,      # 73 - M
[ 4.5,        3,   5,    3.8,      4.5,       4,   3.5,     4,    4.5,       2,    4]   ,      # 75 - M
[   4,     1.75,   1,   1.53,      1.5,       1,     1,     1,      1,     1.5,    2]   ,      # 80 - M
[ 4.5,     3.17,   1,   2.46,      3.5,     3.5,     3,     2,      4,       3,    3]   ,      # 81 - M
[   4,     2.75,   1,    2.5,        5,       4,   3.5,     3,    1.5,     2.5,    2]   ,      # 82 - M
[   4,      3.5,   1,      4,        5,     3.5,   3.5,     3,    3.5,       3,    5]   ,      # 84 - M
[   4,     3.75,   5,   3.66,        3,       3,     3,     3,      2,       3,    3]   ,      # 87 - M
[   4,        5,   5,    3.5,        2,       3,     1,     1,      1,       5,    1]   ,      # 92 - M
[   5,     3.25,   1,    3.4,     3.66,       2,   2.5,     4,      2,     2.5,    2]   ,      # 94 - M
[   4,     3.41,   1,   3.27,      3.5,       2,   2.5,     3,    2.5,       3,    3]   ,      # 98 - M
[   5,        3,   5,    2.7,     2.75,     2.5,   2.5,     4,      2,     2.5,    3]   ,      # 100 - M

])


# Bem-Estar - 12.3 - motivado a ir trabalhar todos os dias
Y = np.array([
[   3   ], #7
[   4   ], #8
[   2   ], #9
[   4   ], #10
[   4   ], #12
[   3   ], #14
[   3   ], #17
[   4   ], #18
[   4   ], #19
[   4   ], #21
[   3   ], #22
[   4   ], #26
[   4   ], #28
[   2   ], #29
[   3   ], #30
[   5   ], #31
[   5   ], #32
[   4   ], #33
[   4   ], #34
[   5   ], #36
[   4   ], #37
[   3   ], #38
[   5   ], #40
[   2   ], #43
[   3   ], #45
[   3   ], #47
[   1   ], #48
[   5   ], #50
[   5   ], #51
[   5   ], #53
[   4   ], #54
[   5   ], #55
[   2   ], #56
[   2   ], #58
[   1   ], #60
[   5   ], #61
[   3   ], #62
[   3   ], #63
[   3   ], #66
[   4   ], #68
[   3   ], #69
[   2   ], #73
[   4   ], #75
[   2   ], #80
[   3   ], #81
[   5   ], #82
[   2   ], #84
[   3   ], #87
[   1   ], #92
[   4   ], #94
[   4   ], #98
[   3   ], #100
])


########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Homens

import numpy as np
import matplotlib.pyplot as plt

X = np.array ([

[   4,     2.3,   1,   2.73,        4,      2,      2,     2,      4,     1.5,    2]   ,      #  7 - M
[   4,   2.165,   5,   3.86,      4.5,      5,    2.5,     4,    4.5,       4,    4]   ,      #  8 - M
[   5,     2.3,   1,    2.6,        5,      4,      3,     2,    2.5,       2,    2]   ,      #  9 - M
[   5,     3.5,   5,    3.6,      4.5,    4.5,    3.5,     4,      3,     2.5,    5]   ,      # 10 - M
[   4,     3.3,   1,   2.26,        5,      3,      2,     4,    1.5,     4.5,    5]   ,      # 12 - M
[   4,    2.75,   5,      3,        3,      3,      3,     3,      2,       2,    4]   ,      # 14 - M
[   4,       3,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 17 - M
[ 4.5,    3.16,   5,   3.86,    3.125,      4,      3,     4,    2.5,       3,    4]   ,      # 18 - M
[ 4.5,       3,   5,   3.73,      4.5,      4,    3.5,     4,    2.5,       5,    5]   ,      # 19 - M
[   4,    3.25,   1,   3.13,    2.625,      2,      3,     3,    2.5,       2,    4]   ,      # 21 - M
[ 4.5,     2.5,   5,   3.73,        5,    2.5,      3,     3,      5,     2.5,    2]   ,      # 22 - M
[   4,     3.5,   5,   3.86,        5,      3,    4.5,     5,      5,     4.5,    4]   ,      # 26 - M
[   4,   2.916,   1,   3.46,      4.5,      4,      3,     4,      5,       5,    5]   ,      # 28 - M
[ 4.5,   2.083,   5,      3,        4,    1.5,      3,     2,      1,     3.5,    2]   ,      # 29 - M
[   4,    2.66,   1,    4.3,     1.25,      3,      3,     3,      2,       3,    5]   ,      # 30 - M
[   4,     3.66,   5,   4.93,        5,      5,    3.5,     5,      3,       3,    5]   ,      # 31 - M
[   5,    3.916,   5,   4.93,        5,    4.5,    3.5,     4,      5,       4,    3]   ,      # 32 - M
[ 4.5,     3.75,   5,   3.66,      3.5,      3,    3.5,     4,    3.5,       2,    4]   ,      # 33 - M
[   5,     3.16,   5,      4,        4,      4,      5,     4,    4.5,       5,    4]   ,      # 34 - M
[ 4.5,     2.33,   1,      5,        4,      5,      5,     5,      5,       5,    5]   ,      # 36 - M
[   4,        2,   5,   2.13,    2.625,    2.5,    2.5,     1,    1.5,       1,    2]   ,      # 37 - M
[ 4.5,    2.083,   5,   2.66,        5,    3.5,      3,     2,    2.5,       3,    5]   ,      # 38 - M
[   4,      3.5,   5,   3.33,      4.5,    2.5,      3,     3,      5,       5,    1]   ,      # 40 - M
[   4,     3.25,   5,   3.33,      4.5,      1,      3,     3,    3.5,       5,    2]   ,      # 43 - M
[   4,    1.583,   1,    2.8,     1.75,      4,    3.5,     3,      2,       2,    3]   ,      # 45 - M
[   4,     2.75,   1,   2.06,     1.25,      4,      3,     5,    3.5,       4,    1]   ,      # 47 - M
[   4,    2.583,   1,      3,    2.875,      4,    2.5,     4,      2,       2,    5]   ,      # 48 - M
[   4,     2.16,   5,   4.83,      4.5,      5,      3,     5,    2.5,     4.5,    5]   ,      # 50 - M
[   4,      3.5,   5,    4.4,        4,     4.5,   1.5,     4,      5,       5,    1]   ,      # 51 - M
[   4,    3.083,   1,   3.11,    2.875,       4,     3,     1,      2,       4,    5]   ,      # 53 - M
[   4,    1.916,   1,   3.33,      4.5,       2,   2.5,     2,      2,       4,    3]   ,      # 54 - M
[   4,     2.16,   1,    3.8,        5,       5,   2.5,     4,      2,       3,    5]   ,      # 55 - M
[   5,      2.5,   1,    2.4,        4,       5,   4.5,     1,    2.5,     3.5,    4]   ,      # 56 - M
[ 4.5,     3.66,   5,      4,        4,     2.5,   2.5,     4,      5,       4,    1]   ,      # 58 - M
[   4,        5,   5,      5,        5,       3,     2,     1,      2,       5,    1]   ,      # 60 - M
[   4,     4.25,   5,   2.73,        4,     2.5,     5,     2,      3,     3.5,    3]   ,      # 61 - M
[   4,     3.25,   1,      4,        4,       3,     3,     3,      2,       3,    3]   ,      # 62 - M
[ 4.5,     3.25,   5,      3,        3,       3,     3,     3,      2,       3,    2]   ,      # 63 - M
[ 4.5,    1.416,   5,    4.3,        4,     2.5,   3.5,     3,      2,       1,    5]   ,      # 66 - M
[   5,     3.41,   1,      3,        4,     3.5,     3,     3,      2,     2.5,    3]   ,      # 68 - M
[   5,        3,   1,    2.6,      3.5,       3,   2.5,     4,      2,       3,    3]   ,      # 69 - M
[ 4.5,     3.66,   1,    3.3,    4.125,     1.5,   1.5,     2,      3,     2.5,    5]   ,      # 73 - M
[ 4.5,        3,   5,    3.8,      4.5,       4,   3.5,     4,    4.5,       2,    4]   ,      # 75 - M
[   4,     1.75,   1,   1.53,      1.5,       1,     1,     1,      1,     1.5,    2]   ,      # 80 - M
[ 4.5,     3.17,   1,   2.46,      3.5,     3.5,     3,     2,      4,       3,    3]   ,      # 81 - M
[   4,     2.75,   1,    2.5,        5,       4,   3.5,     3,    1.5,     2.5,    2]   ,      # 82 - M
[   4,      3.5,   1,      4,        5,     3.5,   3.5,     3,    3.5,       3,    5]   ,      # 84 - M
[   4,     3.75,   5,   3.66,        3,       3,     3,     3,      2,       3,    3]   ,      # 87 - M
[   4,        5,   5,    3.5,        2,       3,     1,     1,      1,       5,    1]   ,      # 92 - M
[   5,     3.25,   1,    3.4,     3.66,       2,   2.5,     4,      2,     2.5,    2]   ,      # 94 - M
[   4,     3.41,   1,   3.27,      3.5,       2,   2.5,     3,    2.5,       3,    3]   ,      # 98 - M
[   5,        3,   5,    2.7,     2.75,     2.5,   2.5,     4,      2,     2.5,    3]   ,      # 100 - M

])


# Bem-Estar - 12.4 - avaliaria o seu equilíbrio entre vida pessoal e trabalho?

Y = np.array([
[   3   ], #7
[   2   ], #8
[   2   ], #9
[   4   ], #10
[   3   ], #12
[   3   ], #14
[   3   ], #17
[   4   ], #18
[   4   ], #19
[   3   ], #21
[   4   ], #22
[   3   ], #26
[   4   ], #28
[   2   ], #29
[   3   ], #30
[   5   ], #31
[   4   ], #32
[   3   ], #33
[   4   ], #34
[   2   ], #36
[   3   ], #37
[   3   ], #38
[   5   ], #40
[   4   ], #43
[   3   ], #45
[   4   ], #47
[   1   ], #48
[   3   ], #50
[   4   ], #51
[   4   ], #53
[   3   ], #54
[   1   ], #55
[   3   ], #56
[   4   ], #58
[   1   ], #60
[   3   ], #61
[   3   ], #62
[   3   ], #63
[   2   ], #66
[   2   ], #68
[   3   ], #69
[   5   ], #73
[   4   ], #75
[   2   ], #80
[   3   ], #81
[   4   ], #82
[   3   ], #84
[   3   ], #87
[   1   ], #92
[   3   ], #94
[   3   ], #98
[   3   ], #100
])


########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

"""# **3 - QUANTIDADE DE FILHOS**

## QUANTIDADE SEM FILHOS

### Bem-estar média
"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Quantidade de filhos = 0

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   4,      2.3,   1,   2.73,        4,      2,      2,     2,      4,     1.5,    2]   ,      # 7 - M
[   4,    2.165,   5,   3.86,      4.5,      5,    2.5,     4,    4.5,       4,    4]   ,      # 8 - M
[   5,      2.3,   1,    2.6,        5,      4,      3,     2,    2.5,       2,    2]   ,      # 9 - M
[   5,      3.5,   5,    3.6,      4.5,    4.5,    3.5,     4,      3,     2.5,    5]   ,      # 10 - M
[   3,    2.916,   5,    3.3,      4.5,      4,      4,     2,      4,       4,    4]   ,      # 11 - F
[   4,      3.3,   1,   2.26,        5,      3,      2,     4,    1.5,     4.5,    5]   ,      # 12 - M
[   3,      2.5,   5,    2.2,     3.62,    4.5,      3,     3,    2.5,     3.5,    4]   ,      # 13 - F
[   4,     2.75,   5,      3,        3,      3,      3,     3,      2,       2,    4]   ,      # 14 - M
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       1,    4]   ,      # 15 - F
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 16 - F
[   4,        3,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 17 - M
[ 4.5,        3,   5,   3.73,      4.5,      4,    3.5,     4,    2.5,       5,    5]   ,      # 19 - M
[ 4.5,      2.5,   5,   3.73,        5,    2.5,      3,     3,      5,     2.5,    2]   ,      # 22 - M
[ 4.5,    2.083,   5,      3,        4,    1.5,      3,     2,      1,     3.5,    2]   ,      # 29 - M

])

# Bem-Estar - media geral
Y = np.array([
[   2.75   ] ,      # 7 - M
[   3.5    ]   ,    # 8 - M
[   2.75   ]   ,    # 9 - M
[   4.25   ]   ,    # 10 - M
[   3      ]   ,    # 11 - F
[   4      ]   ,    # 12 - M
[   3.5    ]   ,    # 13 - F
[   3      ]   ,    # 14 - M
[   3      ]   ,    # 15 - F
[   3      ]   ,    # 16 - F
[   3      ]   ,    # 17 - M
[   4      ] ,      # 19 - M
[   2.75   ]   ,    # 22 - M
[   1.75   ]   ,    # 29 - M

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

"""### Bem-estar separado"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Quantidade de filhos = 0

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   4,      2.3,   1,   2.73,        4,      2,      2,     2,      4,     1.5,    2]   ,      # 7 - M
[   4,    2.165,   5,   3.86,      4.5,      5,    2.5,     4,    4.5,       4,    4]   ,      # 8 - M
[   5,      2.3,   1,    2.6,        5,      4,      3,     2,    2.5,       2,    2]   ,      # 9 - M
[   5,      3.5,   5,    3.6,      4.5,    4.5,    3.5,     4,      3,     2.5,    5]   ,      # 10 - M
[   3,    2.916,   5,    3.3,      4.5,      4,      4,     2,      4,       4,    4]   ,      # 11 - F
[   4,      3.3,   1,   2.26,        5,      3,      2,     4,    1.5,     4.5,    5]   ,      # 12 - M
[   3,      2.5,   5,    2.2,     3.62,    4.5,      3,     3,    2.5,     3.5,    4]   ,      # 13 - F
[   4,     2.75,   5,      3,        3,      3,      3,     3,      2,       2,    4]   ,      # 14 - M
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       1,    4]   ,      # 15 - F
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 16 - F
[   4,        3,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 17 - M
[ 4.5,        3,   5,   3.73,      4.5,      4,    3.5,     4,    2.5,       5,    5]   ,      # 19 - M
[ 4.5,      2.5,   5,   3.73,        5,    2.5,      3,     3,      5,     2.5,    2]   ,      # 22 - M
[ 4.5,    2.083,   5,      3,        4,    1.5,      3,     2,      1,     3.5,    2]   ,      # 29 - M

])

# Bem-Estar - 12.1
Y = np.array([
[   3   ]   ,    # 7
[   4   ]   ,    # 8
[   4   ]   ,    # 9
[   5   ]   ,    # 10
[   4   ]   ,    # 11
[   4   ]   ,    # 12
[   4   ]   ,    # 13
[   3   ]   ,    # 14
[   3   ]   ,    # 15
[   3   ]   ,    # 16
[   3   ]   ,    # 17
[   4   ]   ,    # 19
[   2   ]   ,    # 22
[   2   ]   ,    # 29

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Quantidade de filhos = 0

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   4,      2.3,   1,   2.73,        4,      2,      2,     2,      4,     1.5,    2]   ,      # 7 - M
[   4,    2.165,   5,   3.86,      4.5,      5,    2.5,     4,    4.5,       4,    4]   ,      # 8 - M
[   5,      2.3,   1,    2.6,        5,      4,      3,     2,    2.5,       2,    2]   ,      # 9 - M
[   5,      3.5,   5,    3.6,      4.5,    4.5,    3.5,     4,      3,     2.5,    5]   ,      # 10 - M
[   3,    2.916,   5,    3.3,      4.5,      4,      4,     2,      4,       4,    4]   ,      # 11 - F
[   4,      3.3,   1,   2.26,        5,      3,      2,     4,    1.5,     4.5,    5]   ,      # 12 - M
[   3,      2.5,   5,    2.2,     3.62,    4.5,      3,     3,    2.5,     3.5,    4]   ,      # 13 - F
[   4,     2.75,   5,      3,        3,      3,      3,     3,      2,       2,    4]   ,      # 14 - M
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       1,    4]   ,      # 15 - F
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 16 - F
[   4,        3,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 17 - M
[ 4.5,        3,   5,   3.73,      4.5,      4,    3.5,     4,    2.5,       5,    5]   ,      # 19 - M
[ 4.5,      2.5,   5,   3.73,        5,    2.5,      3,     3,      5,     2.5,    2]   ,      # 22 - M
[ 4.5,    2.083,   5,      3,        4,    1.5,      3,     2,      1,     3.5,    2]   ,      # 29 - M

])

# Bem-Estar - 12.2
Y = np.array([
[   2   ]   ,    # 7
[   4   ]   ,    # 8
[   3   ]   ,    # 9
[   4   ]   ,    # 10
[   3   ]   ,    # 11
[   5   ]   ,    # 12
[   4   ]   ,    # 13
[   3   ]   ,    # 14
[   3   ]   ,    # 15
[   3   ]   ,    # 16
[   3   ]   ,    # 17
[   4   ]   ,    # 19
[   2   ]   ,    # 22
[   1   ]   ,    # 29

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Quantidade de filhos = 0

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   4,      2.3,   1,   2.73,        4,      2,      2,     2,      4,     1.5,    2]   ,      # 7 - M
[   4,    2.165,   5,   3.86,      4.5,      5,    2.5,     4,    4.5,       4,    4]   ,      # 8 - M
[   5,      2.3,   1,    2.6,        5,      4,      3,     2,    2.5,       2,    2]   ,      # 9 - M
[   5,      3.5,   5,    3.6,      4.5,    4.5,    3.5,     4,      3,     2.5,    5]   ,      # 10 - M
[   3,    2.916,   5,    3.3,      4.5,      4,      4,     2,      4,       4,    4]   ,      # 11 - F
[   4,      3.3,   1,   2.26,        5,      3,      2,     4,    1.5,     4.5,    5]   ,      # 12 - M
[   3,      2.5,   5,    2.2,     3.62,    4.5,      3,     3,    2.5,     3.5,    4]   ,      # 13 - F
[   4,     2.75,   5,      3,        3,      3,      3,     3,      2,       2,    4]   ,      # 14 - M
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       1,    4]   ,      # 15 - F
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 16 - F
[   4,        3,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 17 - M
[ 4.5,        3,   5,   3.73,      4.5,      4,    3.5,     4,    2.5,       5,    5]   ,      # 19 - M
[ 4.5,      2.5,   5,   3.73,        5,    2.5,      3,     3,      5,     2.5,    2]   ,      # 22 - M
[ 4.5,    2.083,   5,      3,        4,    1.5,      3,     2,      1,     3.5,    2]   ,      # 29 - M

])

# Bem-Estar - 12.3
Y = np.array([
[   3   ]   ,    # 7
[   4   ]   ,    # 8
[   2   ]   ,    # 9
[   4   ]   ,    # 10
[   3   ]   ,    # 11
[   4   ]   ,    # 12
[   4   ]   ,    # 13
[   3   ]   ,    # 14
[   3   ]   ,    # 15
[   3   ]   ,    # 16
[   3   ]   ,    # 17
[   4   ]   ,    # 19
[   3   ]   ,    # 22
[   2   ]   ,    # 29

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Quantidade de filhos = 0

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   4,      2.3,   1,   2.73,        4,      2,      2,     2,      4,     1.5,    2]   ,      # 7 - M
[   4,    2.165,   5,   3.86,      4.5,      5,    2.5,     4,    4.5,       4,    4]   ,      # 8 - M
[   5,      2.3,   1,    2.6,        5,      4,      3,     2,    2.5,       2,    2]   ,      # 9 - M
[   5,      3.5,   5,    3.6,      4.5,    4.5,    3.5,     4,      3,     2.5,    5]   ,      # 10 - M
[   3,    2.916,   5,    3.3,      4.5,      4,      4,     2,      4,       4,    4]   ,      # 11 - F
[   4,      3.3,   1,   2.26,        5,      3,      2,     4,    1.5,     4.5,    5]   ,      # 12 - M
[   3,      2.5,   5,    2.2,     3.62,    4.5,      3,     3,    2.5,     3.5,    4]   ,      # 13 - F
[   4,     2.75,   5,      3,        3,      3,      3,     3,      2,       2,    4]   ,      # 14 - M
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       1,    4]   ,      # 15 - F
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 16 - F
[   4,        3,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 17 - M
[ 4.5,        3,   5,   3.73,      4.5,      4,    3.5,     4,    2.5,       5,    5]   ,      # 19 - M
[ 4.5,      2.5,   5,   3.73,        5,    2.5,      3,     3,      5,     2.5,    2]   ,      # 22 - M
[ 4.5,    2.083,   5,      3,        4,    1.5,      3,     2,      1,     3.5,    2]   ,      # 29 - M

])

# Bem-Estar - 12.4
Y = np.array([
[   3   ]   ,    # 7
[   2   ]   ,    # 8
[   2   ]   ,    # 9
[   4   ]   ,    # 10
[   2   ]   ,    # 11
[   3   ]   ,    # 12
[   2   ]   ,    # 13
[   3   ]   ,    # 14
[   3   ]   ,    # 15
[   3   ]   ,    # 16
[   3   ]   ,    # 17
[   4   ]   ,    # 19
[   4   ]   ,    # 22
[   2   ]   ,    # 29

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

"""## QUANTIDADE COM FILHOS

### Bem-estar média
"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Quantidade de filhos = + de 0

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   3,     1.83,   1,    2.6,    1.625,    1.5,      2,     1,      2,       5,    4]   ,      # 6 - F
[ 4.5,     3.16,   5,   3.86,    3.125,      4,      3,     4,    2.5,       3,    4]   ,      # 18 - M
[   3,     2.16,   1,   3.46,     2.25,    3.5,   2.25,     3,    4.5,       3,    3]   ,      # 20 - F
[   4,     3.25,   1,   3.13,    2.625,      2,      3,     3,    2.5,       2,    4]   ,      # 21 - M
[   3,     3.25,   1,    2.4,      2.5,      3,      2,     2,      1,       4,    2]   ,      # 23 - F
[ 3.5,     1.83,   1,   2.33,    3.625,    2.5,    3.5,     1,    1.5,       3,    5]   ,      # 24 - F
[ 3.5,     2.33,   1,   1.66,      1.5,      2,      4,     1,    2.5,       3,    2]   ,      # 25 - F
[   4,      3.5,   5,   3.86,        5,      3,    4.5,     5,      5,     4.5,    4]   ,      # 26 - M
[ 3.5,     2.66,   5,   4.46,        2,    3.5,    3.5,     4,    3.5,       4,    5]   ,      # 27 - F
[   4,    2.916,   1,   3.46,      4.5,      4,      3,     4,      5,       5,    5]   ,      # 28 - M
[   4,     2.66,   1,    4.3,     1.25,      3,      3,     3,      2,       3,    5]   ,      # 30 - M

 ])

# Bem-Estar - media geral
Y = np.array([
[   1.25   ] ,      # 6 - F
[   4      ] ,      # 18 - M
[   3      ]   ,    # 20 - F
[   3.5    ]   ,    # 21 - M
[   2      ]   ,    # 23 - F
[   2.5    ]   ,    # 24 - F
[   1.75   ]   ,    # 25 - F
[   3.75   ]   ,    # 26 - M
[   3.5    ]   ,    # 27 - F
[   4      ]   ,    # 28 - M
[   2.5    ]   ,    # 30 - M

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

"""### Bem-estar separado"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Quantidade de filhos = + de 0

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   3,     1.83,   1,    2.6,    1.625,    1.5,      2,     1,      2,       5,    4]   ,      # 6 - F
[ 4.5,     3.16,   5,   3.86,    3.125,      4,      3,     4,    2.5,       3,    4]   ,      # 18 - M
[   3,     2.16,   1,   3.46,     2.25,    3.5,   2.25,     3,    4.5,       3,    3]   ,      # 20 - F
[   4,     3.25,   1,   3.13,    2.625,      2,      3,     3,    2.5,       2,    4]   ,      # 21 - M
[   3,     3.25,   1,    2.4,      2.5,      3,      2,     2,      1,       4,    2]   ,      # 23 - F
[ 3.5,     1.83,   1,   2.33,    3.625,    2.5,    3.5,     1,    1.5,       3,    5]   ,      # 24 - F
[ 3.5,     2.33,   1,   1.66,      1.5,      2,      4,     1,    2.5,       3,    2]   ,      # 25 - F
[   4,      3.5,   5,   3.86,        5,      3,    4.5,     5,      5,     4.5,    4]   ,      # 26 - M
[ 3.5,     2.66,   5,   4.46,        2,    3.5,    3.5,     4,    3.5,       4,    5]   ,      # 27 - F
[   4,    2.916,   1,   3.46,      4.5,      4,      3,     4,      5,       5,    5]   ,      # 28 - M
[   4,     2.66,   1,    4.3,     1.25,      3,      3,     3,      2,       3,    5]   ,      # 30 - M

 ])

# Bem-Estar - 12.1
Y = np.array([
[   1   ] ,      # 6
[   4   ]   ,    # 18
[   3   ] ,      # 20
[   3   ]   ,    # 21
[   2   ]   ,    # 23
[   2   ]   ,    # 24
[   2   ]   ,    # 25
[   4   ]   ,    # 26
[   4   ]   ,    # 27
[   4   ]   ,    # 28
[   3   ]   ,    # 30

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Quantidade de filhos = + de 0

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   3,     1.83,   1,    2.6,    1.625,    1.5,      2,     1,      2,       5,    4]   ,      # 6 - F
[ 4.5,     3.16,   5,   3.86,    3.125,      4,      3,     4,    2.5,       3,    4]   ,      # 18 - M
[   3,     2.16,   1,   3.46,     2.25,    3.5,   2.25,     3,    4.5,       3,    3]   ,      # 20 - F
[   4,     3.25,   1,   3.13,    2.625,      2,      3,     3,    2.5,       2,    4]   ,      # 21 - M
[   3,     3.25,   1,    2.4,      2.5,      3,      2,     2,      1,       4,    2]   ,      # 23 - F
[ 3.5,     1.83,   1,   2.33,    3.625,    2.5,    3.5,     1,    1.5,       3,    5]   ,      # 24 - F
[ 3.5,     2.33,   1,   1.66,      1.5,      2,      4,     1,    2.5,       3,    2]   ,      # 25 - F
[   4,      3.5,   5,   3.86,        5,      3,    4.5,     5,      5,     4.5,    4]   ,      # 26 - M
[ 3.5,     2.66,   5,   4.46,        2,    3.5,    3.5,     4,    3.5,       4,    5]   ,      # 27 - F
[   4,    2.916,   1,   3.46,      4.5,      4,      3,     4,      5,       5,    5]   ,      # 28 - M
[   4,     2.66,   1,    4.3,     1.25,      3,      3,     3,      2,       3,    5]   ,      # 30 - M

 ])

# Bem-Estar - 12.2
Y = np.array([
[   2   ]   ,    # 6
[   4   ]   ,    # 18
[   3   ]   ,    # 20
[   4   ]   ,    # 21
[   2   ]   ,    # 23
[   2   ]   ,    # 24
[   1   ]   ,    # 25
[   4   ]   ,    # 26
[   4   ]   ,    # 27
[   4   ]   ,    # 28
[   1   ]   ,    # 30

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Quantidade de filhos = + de 0

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   3,     1.83,   1,    2.6,    1.625,    1.5,      2,     1,      2,       5,    4]   ,      # 6 - F
[ 4.5,     3.16,   5,   3.86,    3.125,      4,      3,     4,    2.5,       3,    4]   ,      # 18 - M
[   3,     2.16,   1,   3.46,     2.25,    3.5,   2.25,     3,    4.5,       3,    3]   ,      # 20 - F
[   4,     3.25,   1,   3.13,    2.625,      2,      3,     3,    2.5,       2,    4]   ,      # 21 - M
[   3,     3.25,   1,    2.4,      2.5,      3,      2,     2,      1,       4,    2]   ,      # 23 - F
[ 3.5,     1.83,   1,   2.33,    3.625,    2.5,    3.5,     1,    1.5,       3,    5]   ,      # 24 - F
[ 3.5,     2.33,   1,   1.66,      1.5,      2,      4,     1,    2.5,       3,    2]   ,      # 25 - F
[   4,      3.5,   5,   3.86,        5,      3,    4.5,     5,      5,     4.5,    4]   ,      # 26 - M
[ 3.5,     2.66,   5,   4.46,        2,    3.5,    3.5,     4,    3.5,       4,    5]   ,      # 27 - F
[   4,    2.916,   1,   3.46,      4.5,      4,      3,     4,      5,       5,    5]   ,      # 28 - M
[   4,     2.66,   1,    4.3,     1.25,      3,      3,     3,      2,       3,    5]   ,      # 30 - M

 ])

# Bem-Estar - 12.3
Y = np.array([
[   1   ]   ,    # 6
[   4   ]   ,    # 18
[   3   ]   ,    # 20
[   4   ]   ,    # 21
[   2   ]   ,    # 23
[   2   ]   ,    # 24
[   1   ]   ,    # 25
[   4   ]   ,    # 26
[   3   ]   ,    # 27
[   4   ]   ,    # 28
[   3   ]   ,    # 30

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Quantidade de filhos = + de 0

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   3,     1.83,   1,    2.6,    1.625,    1.5,      2,     1,      2,       5,    4]   ,      # 6 - F
[ 4.5,     3.16,   5,   3.86,    3.125,      4,      3,     4,    2.5,       3,    4]   ,      # 18 - M
[   3,     2.16,   1,   3.46,     2.25,    3.5,   2.25,     3,    4.5,       3,    3]   ,      # 20 - F
[   4,     3.25,   1,   3.13,    2.625,      2,      3,     3,    2.5,       2,    4]   ,      # 21 - M
[   3,     3.25,   1,    2.4,      2.5,      3,      2,     2,      1,       4,    2]   ,      # 23 - F
[ 3.5,     1.83,   1,   2.33,    3.625,    2.5,    3.5,     1,    1.5,       3,    5]   ,      # 24 - F
[ 3.5,     2.33,   1,   1.66,      1.5,      2,      4,     1,    2.5,       3,    2]   ,      # 25 - F
[   4,      3.5,   5,   3.86,        5,      3,    4.5,     5,      5,     4.5,    4]   ,      # 26 - M
[ 3.5,     2.66,   5,   4.46,        2,    3.5,    3.5,     4,    3.5,       4,    5]   ,      # 27 - F
[   4,    2.916,   1,   3.46,      4.5,      4,      3,     4,      5,       5,    5]   ,      # 28 - M
[   4,     2.66,   1,    4.3,     1.25,      3,      3,     3,      2,       3,    5]   ,      # 30 - M

 ])

# Bem-Estar - 12.4
Y = np.array([
[   1   ]   ,    # 6
[   4   ]   ,    # 18
[   3   ]   ,    # 20
[   3   ]   ,    # 21
[   2   ]   ,    # 23
[   4   ]   ,    # 24
[   3   ]   ,    # 25
[   3   ]   ,    # 26
[   3   ]   ,    # 27
[   4   ]   ,    # 28
[   3   ]   ,    # 30

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

"""# **4 - FAIXA ETÁRIA**

## IDADE 18-22

### Bem-estar média
"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Idade entre 18-22

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   4,      2.3,   1,   2.73,        4,      2,      2,     2,      4,     1.5,    2]   ,      # 7 - M
[   4,    2.165,   5,   3.86,      4.5,      5,    2.5,     4,    4.5,       4,    4]   ,      # 8 - M
[   5,      2.3,   1,    2.6,        5,      4,      3,     2,    2.5,       2,    2]   ,      # 9 - M
[   5,      3.5,   5,    3.6,      4.5,    4.5,    3.5,     4,      3,     2.5,    5]   ,      # 10 - M
[   3,    2.916,   5,    3.3,      4.5,      4,      4,     2,      4,       4,    4]   ,      # 11 - F
[   4,      3.3,   1,   2.26,        5,      3,      2,     4,    1.5,     4.5,    5]   ,      # 12 - M
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 16 - F
[   4,        3,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 17 - M

])

# Bem-Estar - media geral
Y = np.array([
[   2.75   ] ,      # 7 - M
[   3.5    ]   ,    # 8 - M
[   2.75   ]   ,    # 9 - M
[   4.25   ]   ,    # 10 - M
[   3      ]   ,    # 11 - F
[   4      ]   ,    # 12 - M
[   3      ]   ,    # 16 - F
[   3      ]   ,    # 17 - M
])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

"""### Bem-estar separado"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Idade entre 18-22

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   4,      2.3,   1,   2.73,        4,      2,      2,     2,      4,     1.5,    2]   ,      # 7 - M
[   4,    2.165,   5,   3.86,      4.5,      5,    2.5,     4,    4.5,       4,    4]   ,      # 8 - M
[   5,      2.3,   1,    2.6,        5,      4,      3,     2,    2.5,       2,    2]   ,      # 9 - M
[   5,      3.5,   5,    3.6,      4.5,    4.5,    3.5,     4,      3,     2.5,    5]   ,      # 10 - M
[   3,    2.916,   5,    3.3,      4.5,      4,      4,     2,      4,       4,    4]   ,      # 11 - F
[   4,      3.3,   1,   2.26,        5,      3,      2,     4,    1.5,     4.5,    5]   ,      # 12 - M
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 16 - F
[   4,        3,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 17 - M

])

# Bem-Estar - 12.1
Y = np.array([
[   3   ]   ,    # 7
[   4   ]   ,    # 8
[   4   ]   ,    # 9
[   5   ]   ,    # 10
[   4   ]   ,    # 11
[   4   ]   ,    # 12
[   3   ]   ,    # 16
[   3   ]   ,    # 17

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Idade entre 18-22

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   4,      2.3,   1,   2.73,        4,      2,      2,     2,      4,     1.5,    2]   ,      # 7 - M
[   4,    2.165,   5,   3.86,      4.5,      5,    2.5,     4,    4.5,       4,    4]   ,      # 8 - M
[   5,      2.3,   1,    2.6,        5,      4,      3,     2,    2.5,       2,    2]   ,      # 9 - M
[   5,      3.5,   5,    3.6,      4.5,    4.5,    3.5,     4,      3,     2.5,    5]   ,      # 10 - M
[   3,    2.916,   5,    3.3,      4.5,      4,      4,     2,      4,       4,    4]   ,      # 11 - F
[   4,      3.3,   1,   2.26,        5,      3,      2,     4,    1.5,     4.5,    5]   ,      # 12 - M
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 16 - F
[   4,        3,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 17 - M

])

# Bem-Estar - 12.2
Y = np.array([
[   2   ]   ,    # 7
[   4   ]   ,    # 8
[   3   ]   ,    # 9
[   4   ]   ,    # 10
[   3   ]   ,    # 11
[   5   ]   ,    # 12
[   3   ]   ,    # 16
[   3   ]   ,    # 17
])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Idade entre 18-22

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   4,      2.3,   1,   2.73,        4,      2,      2,     2,      4,     1.5,    2]   ,      # 7 - M
[   4,    2.165,   5,   3.86,      4.5,      5,    2.5,     4,    4.5,       4,    4]   ,      # 8 - M
[   5,      2.3,   1,    2.6,        5,      4,      3,     2,    2.5,       2,    2]   ,      # 9 - M
[   5,      3.5,   5,    3.6,      4.5,    4.5,    3.5,     4,      3,     2.5,    5]   ,      # 10 - M
[   3,    2.916,   5,    3.3,      4.5,      4,      4,     2,      4,       4,    4]   ,      # 11 - F
[   4,      3.3,   1,   2.26,        5,      3,      2,     4,    1.5,     4.5,    5]   ,      # 12 - M
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 16 - F
[   4,        3,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 17 - M

])

# Bem-Estar - 12.3
Y = np.array([
[   3   ]   ,    # 7
[   4   ]   ,    # 8
[   2   ]   ,    # 9
[   4   ]   ,    # 10
[   3   ]   ,    # 11
[   4   ]   ,    # 12
[   3   ]   ,    # 16
[   3   ]   ,    # 17

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Idade entre 18-22

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   4,      2.3,   1,   2.73,        4,      2,      2,     2,      4,     1.5,    2]   ,      # 7 - M
[   4,    2.165,   5,   3.86,      4.5,      5,    2.5,     4,    4.5,       4,    4]   ,      # 8 - M
[   5,      2.3,   1,    2.6,        5,      4,      3,     2,    2.5,       2,    2]   ,      # 9 - M
[   5,      3.5,   5,    3.6,      4.5,    4.5,    3.5,     4,      3,     2.5,    5]   ,      # 10 - M
[   3,    2.916,   5,    3.3,      4.5,      4,      4,     2,      4,       4,    4]   ,      # 11 - F
[   4,      3.3,   1,   2.26,        5,      3,      2,     4,    1.5,     4.5,    5]   ,      # 12 - M
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 16 - F
[   4,        3,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 17 - M

])

# Bem-Estar - 12.4
Y = np.array([
[   1   ]   ,    # 6
[   3   ]   ,    # 7
[   2   ]   ,    # 8
[   2   ]   ,    # 9
[   4   ]   ,    # 10
[   2   ]   ,    # 11
[   3   ]   ,    # 12
[   3   ]   ,    # 16
[   3   ]   ,    # 17
])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

"""## IDADE 23-29

### Bem-estar média
"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Idade entre 23-29

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       1,    4]   ,      # 15 - F


])

# Bem-Estar - media geral
Y = np.array([
[   3      ]   ,    # 15 - F

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

"""### Bem-estar separado"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Idade entre 23-29

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       1,    4]   ,      # 15 - F


])

# Bem-Estar - 12.1
Y = np.array([
[   3   ]   ,    # 15

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Idade entre 23-29

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       1,    4]   ,      # 15 - F


])

# Bem-Estar - 12.2
Y = np.array([
[   3   ]   ,    # 15

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Idade entre 23-29

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       1,    4]   ,      # 15 - F


])

# Bem-Estar - 12.3
Y = np.array([
[   3   ]   ,    # 15

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Idade entre 23-29

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       1,    4]   ,      # 15 - F


])

# Bem-Estar - 12.4
Y = np.array([
[   3   ]   ,    # 15

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

"""## IDADE 30-39

### Bem-estar média
"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Idade entre 30-39

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   3,     1.83,   1,    2.6,    1.625,    1.5,      2,     1,      2,       5,    4]   ,      # 6 - F
[ 4.5,      2.5,   5,   3.73,        5,    2.5,      3,     3,      5,     2.5,    2]   ,      # 22 - M
[ 3.5,     2.33,   1,   1.66,      1.5,      2,      4,     1,    2.5,       3,    2]   ,      # 25 - F
[   4,      3.5,   5,   3.86,        5,      3,    4.5,     5,      5,     4.5,    4]   ,      # 26 - M

])

# Bem-Estar - media geral
Y = np.array([
[   1.25   ] ,      # 6 - F
[   2.75   ]   ,    # 22 - M
[   1.75   ]   ,    # 25 - F
[   3.75   ]   ,    # 26 - M

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

"""### Bem-estar separado"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Idade entre 30-39

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   3,     1.83,   1,    2.6,    1.625,    1.5,      2,     1,      2,       5,    4]   ,      # 6 - F
[ 4.5,      2.5,   5,   3.73,        5,    2.5,      3,     3,      5,     2.5,    2]   ,      # 22 - M
[ 3.5,     2.33,   1,   1.66,      1.5,      2,      4,     1,    2.5,       3,    2]   ,      # 25 - F
[   4,      3.5,   5,   3.86,        5,      3,    4.5,     5,      5,     4.5,    4]   ,      # 26 - M

])

# Bem-Estar - 12.1
Y = np.array([
[   1   ] ,      # 6
[   2   ]   ,    # 22
[   2   ]   ,    # 25
[   4   ]   ,    # 26

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Idade entre 30-39

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   3,     1.83,   1,    2.6,    1.625,    1.5,      2,     1,      2,       5,    4]   ,      # 6 - F
[ 4.5,      2.5,   5,   3.73,        5,    2.5,      3,     3,      5,     2.5,    2]   ,      # 22 - M
[ 3.5,     2.33,   1,   1.66,      1.5,      2,      4,     1,    2.5,       3,    2]   ,      # 25 - F
[   4,      3.5,   5,   3.86,        5,      3,    4.5,     5,      5,     4.5,    4]   ,      # 26 - M

])

# Bem-Estar - 12.2
Y = np.array([
[   2   ]   ,    # 6
[   2   ]   ,    # 22
[   1   ]   ,    # 25
[   4   ]   ,    # 26

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Idade entre 30-39

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   3,     1.83,   1,    2.6,    1.625,    1.5,      2,     1,      2,       5,    4]   ,      # 6 - F
[ 4.5,      2.5,   5,   3.73,        5,    2.5,      3,     3,      5,     2.5,    2]   ,      # 22 - M
[ 3.5,     2.33,   1,   1.66,      1.5,      2,      4,     1,    2.5,       3,    2]   ,      # 25 - F
[   4,      3.5,   5,   3.86,        5,      3,    4.5,     5,      5,     4.5,    4]   ,      # 26 - M

])

# Bem-Estar - 12.3
Y = np.array([
[   1   ]   ,    # 6
[   3   ]   ,    # 22
[   1   ]   ,    # 25
[   4   ]   ,    # 26

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Idade entre 30-39

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   3,     1.83,   1,    2.6,    1.625,    1.5,      2,     1,      2,       5,    4]   ,      # 6 - F
[ 4.5,      2.5,   5,   3.73,        5,    2.5,      3,     3,      5,     2.5,    2]   ,      # 22 - M
[ 3.5,     2.33,   1,   1.66,      1.5,      2,      4,     1,    2.5,       3,    2]   ,      # 25 - F
[   4,      3.5,   5,   3.86,        5,      3,    4.5,     5,      5,     4.5,    4]   ,      # 26 - M

])

# Bem-Estar - 12.4
Y = np.array([
[   1   ]   ,    # 6
[   4   ]   ,    # 22
[   3   ]   ,    # 25
[   3   ]   ,    # 26

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

"""## IDADE 40+

### Bem-estar média
"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Idade entre 40+

import numpy as np
import matplotlib.pyplot as plt

X = np.array([
[   3,      2.5,   5,    2.2,     3.62,    4.5,      3,     3,    2.5,     3.5,    4]   ,      # 13 - F
[   4,     2.75,   5,      3,        3,      3,      3,     3,      2,       2,    4]   ,      # 14 - M
[ 4.5,     3.16,   5,   3.86,    3.125,      4,      3,     4,    2.5,       3,    4]   ,      # 18 - M
[ 4.5,        3,   5,   3.73,      4.5,      4,    3.5,     4,    2.5,       5,    5]   ,      # 19 - M
[   3,     2.16,   1,   3.46,     2.25,    3.5,   2.25,     3,    4.5,       3,    3]   ,      # 20 - F
[   4,     3.25,   1,   3.13,    2.625,      2,      3,     3,    2.5,       2,    4]   ,      # 21 - M
[   3,     3.25,   1,    2.4,      2.5,      3,      2,     2,      1,       4,    2]   ,      # 23 - F
[ 3.5,     1.83,   1,   2.33,    3.625,    2.5,    3.5,     1,    1.5,       3,    5]   ,      # 24 - F
[ 3.5,     2.66,   5,   4.46,        2,    3.5,    3.5,     4,    3.5,       4,    5]   ,      # 27 - F
[   4,    2.916,   1,   3.46,      4.5,      4,      3,     4,      5,       5,    5]   ,      # 28 - M
[ 4.5,    2.083,   5,      3,        4,    1.5,      3,     2,      1,     3.5,    2]   ,      # 29 - M
[   4,     2.66,   1,    4.3,     1.25,      3,      3,     3,      2,       3,    5]   ,      # 30 - M
])

# Bem-Estar - media geral
Y = np.array([
[   3.5    ]   ,    # 13 - F
[   3      ]   ,    # 14 - M
[   4      ] ,      # 18 - M
[   4      ] ,      # 19 - M
[   3      ]   ,    # 20 - F
[   3.5    ]   ,    # 21 - M
[   2      ]   ,    # 23 - F
[   2.5    ]   ,    # 24 - F
[   3.5    ]   ,    # 27 - F
[   4      ]   ,    # 28 - M
[   1.75   ]   ,    # 29 - M
[   2.5    ]   ,    # 30 - M

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

"""### Bem-estar separado"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# Idade entre 40+

import numpy as np
import matplotlib.pyplot as plt

X = np.array([
[   3,      2.5,   5,    2.2,     3.62,    4.5,      3,     3,    2.5,     3.5,    4]   ,      # 13 - F
[   4,     2.75,   5,      3,        3,      3,      3,     3,      2,       2,    4]   ,      # 14 - M
[ 4.5,     3.16,   5,   3.86,    3.125,      4,      3,     4,    2.5,       3,    4]   ,      # 18 - M
[ 4.5,        3,   5,   3.73,      4.5,      4,    3.5,     4,    2.5,       5,    5]   ,      # 19 - M
[   3,     2.16,   1,   3.46,     2.25,    3.5,   2.25,     3,    4.5,       3,    3]   ,      # 20 - F
[   4,     3.25,   1,   3.13,    2.625,      2,      3,     3,    2.5,       2,    4]   ,      # 21 - M
[   3,     3.25,   1,    2.4,      2.5,      3,      2,     2,      1,       4,    2]   ,      # 23 - F
[ 3.5,     1.83,   1,   2.33,    3.625,    2.5,    3.5,     1,    1.5,       3,    5]   ,      # 24 - F
[ 3.5,     2.66,   5,   4.46,        2,    3.5,    3.5,     4,    3.5,       4,    5]   ,      # 27 - F
[   4,    2.916,   1,   3.46,      4.5,      4,      3,     4,      5,       5,    5]   ,      # 28 - M
[ 4.5,    2.083,   5,      3,        4,    1.5,      3,     2,      1,     3.5,    2]   ,      # 29 - M
[   4,     2.66,   1,    4.3,     1.25,      3,      3,     3,      2,       3,    5]   ,      # 30 - M
])

# Bem-Estar - 12.1
Y = np.array([
[   4   ]   ,    # 13
[   3   ]   ,    # 14
[   4   ]   ,    # 18
[   4   ]   ,    # 19
[   3   ]   ,    # 20
[   3   ]   ,    # 21
[   2   ]   ,    # 23
[   2   ]   ,    # 24
[   4   ]   ,    # 27
[   4   ]   ,    # 28
[   2   ]   ,    # 29
[   3   ]   ,    # 30

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

"""# **5 - MODELO DE TRABALHO (+ Gênero?)**"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# UM DADO DO TRABALHO
# 1.4 -> presencial: 3 | hibrido: 4 | remoto: 5

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[ 1,   3]   ,      # 6 - F
[ 1,   3]   ,      # 7 - M
[ 1,   3]   ,      # 8 - M
[ 1,   5]   ,      # 9 - M
[ 1,   5]   ,      # 10 - M
[ 1,   3]   ,      # 11 - F
[ 1,   3]   ,      # 12 - M
[ 1,   3]   ,      # 13 - F
[ 1,   3]   ,      # 14 - M
[ 1,   3]   ,      # 15 - F
[ 1,   3]   ,      # 16 - F
[ 1,   3]   ,      # 17 - M
[ 1,   4]   ,      # 18 - M
[ 1,   4]   ,      # 19 - M
[ 1,   3]   ,      # 20 - F
[ 1,   3]   ,      # 21 - M
[ 1,   4]   ,      # 22 - M
[ 1,   3]   ,      # 23 - F
[ 1,   4]   ,      # 24 - F
[ 1,   4]   ,      # 25 - F
[ 1,   3]   ,      # 26 - M
[ 1,   4]   ,      # 27 - F
[ 1,   3]   ,      # 28 - M
[ 1,   4]   ,      # 29 - M
[ 1,   3]   ,      # 30 - M

])

# Bem-Estar - media geral
Y = np.array([
[   1.25   ]   ,    # 6 - F
[   2.75   ]   ,    # 7 - M
[   3.5    ]   ,    # 8 - M
[   2.75   ]   ,    # 9 - M
[   4.25   ]   ,    # 10 - M
[   3      ]   ,    # 11 - F
[   4      ]   ,    # 12 - M
[   3.5    ]   ,    # 13 - F
[   3      ]   ,    # 14 - M
[   3      ]   ,    # 15 - F
[   3      ]   ,    # 16 - F
[   3      ]   ,    # 17 - M
[   4      ]   ,    # 18 - M
[   4      ]   ,    # 19 - M
[   3      ]   ,    # 20 - F
[   3.5    ]   ,    # 21 - M
[   2.75   ]   ,    # 22 - M
[   2      ]   ,    # 23 - F
[   2.5    ]   ,    # 24 - F
[   1.75   ]   ,    # 25 - F
[   3.75   ]   ,    # 26 - M
[   3.5    ]   ,    # 27 - F
[   4      ]   ,    # 28 - M
[   1.75   ]   ,    # 29 - M
[   2.5    ]   ,    # 30 - M
])

X_one = X
################################ Regressão Linear ###################
Xt = np.transpose(X)          # CRIA A TRANSPOSTA DA MATRIZ X (Xt)
XtX = np.matmul(Xt,X)         # MULTIPLICA Xt POR X
XtX_inv = np.linalg.inv(XtX)  # INVERTE (Xt*X)
XtY = np.matmul(Xt,Y)         # MULTIPLICA Xt POR Y
coef = np.matmul(XtX_inv,XtY) # TERMINA O CÁLCULO
print ("coeficientes: constante modelo trabalho","", coef)
#####################################################################
print("")
Yprev = np.matmul(X_one,coef)
predY = Yprev


#################### Gráfico dos resíduos ##########################
residual = Y - Yprev
plt.scatter(Y,residual,c = 'red', s=15, alpha=0.5)
plt.xlabel('Y')
plt.ylabel('Residual')
plt.title('Residual')
plt.show()



########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()



# constante modelo de trabalho: 0.07972441
'''
0.07972441 * 5 = 0,39862205
0.07972441 * 4 = 0,31889764
0.07972441 * 3 = 0,23917323'''

"""## PRESENCIAL

### Bem-estar média
"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# GERAL
# Trabalho presencial

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   3,     1.83,   1,    2.6,    1.625,    1.5,      2,     1,      2,       5,    4]   ,      # 6 - F
[   4,      2.3,   1,   2.73,        4,      2,      2,     2,      4,     1.5,    2]   ,      # 7 - M
[   4,    2.165,   5,   3.86,      4.5,      5,    2.5,     4,    4.5,       4,    4]   ,      # 8 - M
[   3,    2.916,   5,    3.3,      4.5,      4,      4,     2,      4,       4,    4]   ,      # 11 - F
[   4,      3.3,   1,   2.26,        5,      3,      2,     4,    1.5,     4.5,    5]   ,      # 12 - M
[   3,      2.5,   5,    2.2,     3.62,    4.5,      3,     3,    2.5,     3.5,    4]   ,      # 13 - F
[   4,     2.75,   5,      3,        3,      3,      3,     3,      2,       2,    4]   ,      # 14 - M
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       1,    4]   ,      # 15 - F
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 16 - F
[   3,     2.16,   1,   3.46,     2.25,    3.5,   2.25,     3,    4.5,       3,    3]   ,      # 20 - F
[   4,     3.25,   1,   3.13,    2.625,      2,      3,     3,    2.5,       2,    4]   ,      # 21 - M
[   3,     3.25,   1,    2.4,      2.5,      3,      2,     2,      1,       4,    2]   ,      # 23 - F
[   4,      3.5,   5,   3.86,        5,      3,    4.5,     5,      5,     4.5,    4]   ,      # 26 - M
[   4,    2.916,   1,   3.46,      4.5,      4,      3,     4,      5,       5,    5]   ,      # 28 - M
[   4,     2.66,   1,    4.3,     1.25,      3,      3,     3,      2,       3,    5]   ,      # 30 - M

])

# Bem-Estar - media geral
Y = np.array([
[   1.25   ] ,      # 6 - F
[   2.75   ] ,      # 7 - M
[   3.5    ]   ,    # 8 - M
[   3      ]   ,    # 11 - F
[   4      ]   ,    # 12 - M
[   3.5    ]   ,    # 13 - F
[   3      ]   ,    # 14 - M
[   3      ]   ,    # 15 - F
[   3      ]   ,    # 16 - F
[   3      ]   ,    # 20 - F
[   3.5    ]   ,    # 21 - M
[   2      ]   ,    # 23 - F
[   3.75   ]   ,    # 26 - M
[   4      ]   ,    # 28 - M
[   2.5    ]   ,    # 30 - M
])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

"""### Bem-estar separado"""



"""## HIBRIDO

### Bem-estar média
"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# GERAL
# Trabalho hibrido

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[ 4.5,     3.16,   5,   3.86,    3.125,      4,      3,     4,    2.5,       3,    4]   ,      # 18 - M
[ 4.5,        3,   5,   3.73,      4.5,      4,    3.5,     4,    2.5,       5,    5]   ,      # 19 - M
[ 4.5,      2.5,   5,   3.73,        5,    2.5,      3,     3,      5,     2.5,    2]   ,      # 22 - M
[ 3.5,     1.83,   1,   2.33,    3.625,    2.5,    3.5,     1,    1.5,       3,    5]   ,      # 24 - F
[ 3.5,     2.33,   1,   1.66,      1.5,      2,      4,     1,    2.5,       3,    2]   ,      # 25 - F
[ 3.5,     2.66,   5,   4.46,        2,    3.5,    3.5,     4,    3.5,       4,    5]   ,      # 27 - F
[ 4.5,    2.083,   5,      3,        4,    1.5,      3,     2,      1,     3.5,    2]   ,      # 29 - M

])

# Bem-Estar - media geral
Y = np.array([

[   4      ] ,      # 18 - M
[   4      ] ,      # 19 - M
[   2.75   ]   ,    # 22 - M
[   2.5    ]   ,    # 24 - F
[   1.75   ]   ,    # 25 - F
[   3.5    ]   ,    # 27 - F
[   1.75   ]   ,    # 29 - M
])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

"""### Bem-estar separado"""



"""## REMOTO

### Bem-estar média
"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# GERAL
# Trabalho remoto

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   5,      2.3,   1,    2.6,        5,      4,      3,     2,    2.5,       2,    2]   ,      # 9 - M
[   5,      3.5,   5,    3.6,      4.5,    4.5,    3.5,     4,      3,     2.5,    5]   ,      # 10 - M
])

# Bem-Estar - media geral
Y = np.array([
[   2.75   ]   ,    # 9 - M
[   4.25   ]   ,    # 10 - M
])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

"""### Bem-estar separado"""



"""# **6 - JORNADA DE TRABALHO MÉDIA**

## ATE 20H E 30H

### Bem-estar média
"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# jornada de trabalho
# Até 20h e Até 30h

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   4,      2.3,   1,   2.73,        4,      2,      2,     2,      4,     1.5,    2]   ,      # 7 - M
[   5,      2.3,   1,    2.6,        5,      4,      3,     2,    2.5,       2,    2]   ,      # 9 - M
[   5,      3.5,   5,    3.6,      4.5,    4.5,    3.5,     4,      3,     2.5,    5]   ,      # 10 - M
[   3,    2.916,   5,    3.3,      4.5,      4,      4,     2,      4,       4,    4]   ,      # 11 - F
[   3,     3.25,   1,    2.4,      2.5,      3,      2,     2,      1,       4,    2]   ,      # 23 - F

])

# Bem-Estar - media geral
Y = np.array([
[   2.75   ] ,      # 7 - M
[   2.75   ]   ,    # 9 - M
[   4.25   ]   ,    # 10 - M
[   3      ]   ,    # 11 - F
[   2      ]   ,    # 23 - F
])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

"""### Bem-estar separado"""



"""## ATE 40H

### Bem-estar média
"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# jornada de trabalho
# Até 40h

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   3,     1.83,   1,    2.6,    1.625,    1.5,      2,     1,      2,       5,    4]   ,      # 6 - F
[   4,      3.3,   1,   2.26,        5,      3,      2,     4,    1.5,     4.5,    5]   ,      # 12 - M
[   4,        3,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 17 - M
[ 4.5,     3.16,   5,   3.86,    3.125,      4,      3,     4,    2.5,       3,    4]   ,      # 18 - M
[   4,     3.25,   1,   3.13,    2.625,      2,      3,     3,    2.5,       2,    4]   ,      # 21 - M
[ 4.5,      2.5,   5,   3.73,        5,    2.5,      3,     3,      5,     2.5,    2]   ,      # 22 - M
[   4,    2.916,   1,   3.46,      4.5,      4,      3,     4,      5,       5,    5]   ,      # 28 - M
[ 4.5,    2.083,   5,      3,        4,    1.5,      3,     2,      1,     3.5,    2]   ,      # 29 - M
[   4,     2.66,   1,    4.3,     1.25,      3,      3,     3,      2,       3,    5]   ,      # 30 - M

])

# Bem-Estar - media geral
Y = np.array([
[   1.25   ] ,      # 6 - F
[   4      ]   ,    # 12 - M
[   3      ]   ,    # 17 - M
[   4      ] ,      # 18 - M
[   3.5    ]   ,    # 21 - M
[   2.75   ]   ,    # 22 - M

[   4      ]   ,    # 28 - M
[   1.75   ]   ,    # 29 - M
[   2.5    ]   ,    # 30 - M
])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

"""### Bem-estar separado"""



"""## ATE 50H

### Bem-estar média
"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

# jornada de trabalho
# Até 50h

import numpy as np
import matplotlib.pyplot as plt

X = np.array([

[   4,    2.165,   5,   3.86,      4.5,      5,    2.5,     4,    4.5,       4,    4]   ,      # 8 - M
[   3,      2.5,   5,    2.2,     3.62,    4.5,      3,     3,    2.5,     3.5,    4]   ,      # 13 - F
[   4,     2.75,   5,      3,        3,      3,      3,     3,      2,       2,    4]   ,      # 14 - M
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       1,    4]   ,      # 15 - F
[   3,     2.75,   1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 16 - F
[ 4.5,        3,   5,   3.73,      4.5,      4,    3.5,     4,    2.5,       5,    5]   ,      # 19 - M
[   3,     2.16,   1,   3.46,     2.25,    3.5,   2.25,     3,    4.5,       3,    3]   ,      # 20 - F
[ 3.5,     1.83,   1,   2.33,    3.625,    2.5,    3.5,     1,    1.5,       3,    5]   ,      # 24 - F
[ 3.5,     2.33,   1,   1.66,      1.5,      2,      4,     1,    2.5,       3,    2]   ,      # 25 - F
[   4,      3.5,   5,   3.86,        5,      3,    4.5,     5,      5,     4.5,    4]   ,      # 26 - M
[ 3.5,     2.66,   5,   4.46,        2,    3.5,    3.5,     4,    3.5,       4,    5]   ,      # 27 - F

])

# Bem-Estar - media geral
Y = np.array([
[   3.5    ]   ,    # 8 - M
[   3.5    ]   ,    # 13 - F
[   3      ]   ,    # 14 - M
[   3      ]   ,    # 15 - F
[   3      ]   ,    # 16 - F
[   4      ]   ,      # 19 - M
[   3      ]   ,    # 20 - F
[   2.5    ]   ,    # 24 - F
[   1.75   ]   ,    # 25 - F
[   3.75   ]   ,    # 26 - M
[   3.5    ]   ,    # 27 - F

])

########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

"""### Bem-estar separado"""



"""# TESTE"""

# O Impacto das Condições de Trabalho no Desenvolvimento Pessoal
# Regressão multivariada

import numpy as np
import matplotlib.pyplot as plt

# Geração do modelo   coef = inv(Xt*X)*(Xt*Y)
# O MODELO MATEMÁTICO POSSUI UMA CONSTANTE    Y= AX + B
# A COLUNA COM 1´s GARANTE QUE A CONSTANTE B SEJA DETERMINADA
# O MODELO FICARÁ Y = B + AX POR CONTA DA PRIMEIRA COLUNA

X = np.array([

# constante umidade temperatura velocidade do vento
# resposta prevista (yprev)= constante +  a.informações pessoais + b.jornadas excessivas + c.salário inadequado + d.falta de oport. cresc. + e.ambiente de trab. tóxico
                                    #  +  f.trabalho repetitivo e monótono + g.falta de flexibilidade + h.falta de rec. e recompensa + i.condições de trabalho perigosas
                                    #  +  j.pressão excessiva e metas irrealistas + k.falta de autonomia

# ----------------------------------------------------------------------- anotações

# tópicos importantes que impactam:
# 1-3: não satisfeito | 3: satisfeito | 4-5: feliz

# Informações Pessoais
# 1.1 -> M: 5 | F: 3 | Outro: ??
# 1.2 -> 0: 5 | 1: 4 | 2: 3 | 3: 2 | 4+: 1
# 1.3 -> --
# 1.4 -> presencial: 3 | hibrido: 4 | remoto: 5

# Jornadas Excessivas de Trabalho
# 2.1 -> Até 20h: 5 | Até 30h: 4 | Até 40h: 3 | Até 50h: 2 | De 50h+: 1
# 2.2 -> 1 a 5 invertendo
# 2.3 -> 1 a 5 invertendo
# 2.4 -> --
# 2.5 -> fazer média do 1 a 5 invertendo

# Salário Inadequado
# 3.1 -> 1: 5 | 2: 1

# Falta de Oportunidades de Crescimento
# 4.1 -> 1 a 5 normal
# 4.2 -> 1 a 5 normal
# 4.3 -> 1 a 5 invertendo

# Ambiente de Trabalho Tóxico
# 5.1 -> 1: 1°normal - 2°invertido - 3°invertido - 4°normal | 2: 5
# 5.2 -> 1 a 5 normal

# Trabalho Repetitivo e Monótono
# 6.1 -> 1 a 5 normal
# 6.2 -> 1 a 5 invertendo

# Falta de Flexibilidade
# 7.1 -> 1 a 5 normal
# 7.2 -> 1 a 5 normal

# Falta de Reconhecimento e Recompensa
# 8.1 -> 1 a 5 normal

# Condições de Trabalho Perigosas
# 9.1 -> 1 a 5 normal
# 9.2 -> 1 a 5: 1 | 6: 5

# Pressão Excessiva e Metas Irrealistas
# 10.1 -> 1 a 5 invertendo
# 10.2 -> 1 a 5 invertendo

# Falta de Autonomia
# 11.1 -> 1 a 5 normal

[   3,       1,    2.6,    1.625,    1.5,      2,     1,      2,       5,    4]   ,      # 6 - F
[   4,       1,   2.73,        4,      2,      2,     2,      4,     1.5,    2]   ,      # 7 - M
[   4,      5,   3.86,      4.5,      5,    2.5,     4,    4.5,       4,    4]   ,      # 8 - M
[   5,        1,    2.6,        5,      4,      3,     2,    2.5,       2,    2]   ,      # 9 - M
[   5,        5,    3.6,      4.5,    4.5,    3.5,     4,      3,     2.5,    5]   ,      # 10 - M
[   3,       5,    3.3,      4.5,      4,      4,     2,      4,       4,    4]   ,      # 11 - F
[   4,       1,   2.26,        5,      3,      2,     4,    1.5,     4.5,    5]   ,      # 12 - M
[   3,        5,    2.2,     3.62,    4.5,      3,     3,    2.5,     3.5,    4]   ,      # 13 - F
[   4,       5,      3,        3,      3,      3,     3,      2,       2,    4]   ,      # 14 - M
[   3,        1,      3,        3,      3,      3,     3,      2,       1,    4]   ,      # 15 - F
[   3,      1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 16 - F
[   4,        1,      3,        3,      3,      3,     3,      2,       3,    3]   ,      # 17 - M
[ 4.5,       5,   3.86,    3.125,      4,      3,     4,    2.5,       3,    4]   ,      # 18 - M
[ 4.5,         5,   3.73,      4.5,      4,    3.5,     4,    2.5,       5,    5]   ,      # 19 - M
[   3,       1,   3.46,     2.25,    3.5,   2.25,     3,    4.5,       3,    3]   ,      # 20 - F
[   4,      1,   3.13,    2.625,      2,      3,     3,    2.5,       2,    4]   ,      # 21 - M
[ 4.5,         5,   3.73,        5,    2.5,      3,     3,      5,     2.5,    2]   ,      # 22 - M
[   3,       1,    2.4,      2.5,      3,      2,     2,      1,       4,    2]   ,      # 23 - F
[ 3.5,       1,   2.33,    3.625,    2.5,    3.5,     1,    1.5,       3,    5]   ,      # 24 - F
[ 3.5,        1,   1.66,      1.5,      2,      4,     1,    2.5,       3,    2]   ,      # 25 - F
[   4,        5,   3.86,        5,      3,    4.5,     5,      5,     4.5,    4]   ,      # 26 - M
[ 3.5,        5,   4.46,        2,    3.5,    3.5,     4,    3.5,       4,    5]   ,      # 27 - F
[   4,      1,   3.46,      4.5,      4,      3,     4,      5,       5,    5]   ,      # 28 - M
[ 4.5,      5,      3,        4,    1.5,      3,     2,      1,     3.5,    2]   ,      # 29 - M
[   4,       1,    4.3,     1.25,      3,      3,     3,      2,       3,    5]   ,      # 30 - M
[   4,       5,   4.93,        5,      5,    3.5,     5,      3,       3,    5]   ,      # 31 - M
[   5,      5,   4.93,        5,    4.5,    3.5,     4,      5,       4,    3]   ,      # 32 - M
[ 4.5,        5,   3.66,      3.5,      3,    3.5,     4,    3.5,       2,    4]   ,      # 33 - M
[   5,       5,      4,        4,      4,      5,     4,    4.5,       5,    4]   ,      # 34 - M
[ 3.5,       1,      3,      4.5,      4,    3.5,     3,      2,       2,    1]   ,      # 35 - F
[ 4.5,      1,      5,        4,      5,      5,     5,      5,       5,    5]   ,      # 36 - M
[   4,          5,   2.13,    2.625,    2.5,    2.5,     1,    1.5,       1,    2]   ,      # 37 - M
[ 4.5,       5,   2.66,        5,    3.5,      3,     2,    2.5,       3,    5]   ,      # 38 - M
[   3,       5,   2.86,      4.5,      2,    3.5,     4,    2.5,     1.5,    4]   ,      # 39 - F
[   4,        5,   3.33,      4.5,    2.5,      3,     3,      5,       5,    1]   ,      # 40 - M
[   3,         1,   3.33,        1,      1,      1,     1,      2,       1,    5]   ,      # 41 - F
[   3,      1,   2.33,        3,      5,      1,     5,      3,       5,    1]   ,      # 42 - F
[   4,        5,   3.33,      4.5,      1,      3,     3,    3.5,       5,    2]   ,      # 43 - M
[   3,        5,   1.53,    3.125,      3,      2,     3,    1.5,       3,    3]   ,      # 44 - F
[   4,       1,    2.8,     1.75,      4,    3.5,     3,      2,       2,    3]   ,      # 45 - M
[   3,       1,   4.73,     2.25,      3,      1,     1,      2,       5,    1]   ,      # 46 - F
[   4,       1,   2.06,     1.25,      4,      3,     5,    3.5,       4,    1]   ,      # 47 - M
[   4,       1,      3,    2.875,      4,    2.5,     4,      2,       2,    5]   ,      # 48 - M
[   3,        1,   1.16,     2.25,    4.5,    1.5,     1,    2.5,       5,    3]   ,      # 49 - F
[   4,       5,   4.83,      4.5,      5,      3,     5,    2.5,     4.5,    5]   ,      # 50 - M
[   4,         5,    4.4,        4,     4.5,   1.5,     4,      5,       5,    1]   ,      # 51 - M
[   3,        1,   3.73,      3.5,     2.5,     3,     2,      2,       3,    2]   ,      # 52 - F
[   4,       1,   3.11,    2.875,       4,     3,     1,      2,       4,    5]   ,      # 53 - M
[   4,       1,   3.33,      4.5,       2,   2.5,     2,      2,       4,    3]   ,      # 54 - M
[   4,        1,    3.8,        5,       5,   2.5,     4,      2,       3,    5]   ,      # 55 - M
[   5,         1,    2.4,        4,       5,   4.5,     1,    2.5,     3.5,    4]   ,      # 56 - M
[   3,       1,   3.26,        2,     2.5,   1.5,     2,      2,       2,    4]   ,      # 57 - F
[ 4.5,       5,      4,        4,     2.5,   2.5,     4,      5,       4,    1]   ,      # 58 - M
[   3,       1,   3.46,        4,     3.5,   3.5,     4,      2,     1.5,    5]   ,      # 59 - F
[   4,          5,      5,        5,       3,     2,     1,      2,       5,    1]   ,      # 60 - M
[   4,       5,   2.73,        4,     2.5,     5,     2,      3,     3.5,    3]   ,      # 61 - M
[   4,        1,      4,        4,       3,     3,     3,      2,       3,    3]   ,      # 62 - M
[ 4.5,      5,      3,        3,       3,     3,     3,      2,       3,    2]   ,      # 63 - M
[   3,        5,    2.6,    3.375,       2,     3,     3,      2,     3.5,    4]   ,      # 64 - F
[   3,       1,   2.53,        4,       3,     3,     3,      2,       3,    3]   ,      # 65 - F
[ 4.5,       5,    4.3,        4,     2.5,   3.5,     3,      2,       1,    5]   ,      # 66 - M
[ 3.5,       1,    2.6,        4,       2,   2.5,     4,      2,       1,    5]   ,      # 67 - F
[   5,      1,      3,        4,     3.5,     3,     3,      2,     2.5,    3]   ,      # 68 - M
[   5,           1,    2.6,      3.5,       3,   2.5,     4,      2,       3,    3]   ,      # 69 - M
[   4,        1,    2.6,        4,       3,     2,     2,    1.5,       4,    2]   ,      # 70 - F
[ 3.5,           1,    2.8,      2.5,       3,     2,     2,    1.5,       4,    2]   ,      # 71 - F
[ 3.5,         1,    3.2,      3.5,       3,     2,     2,    1.5,       4,    2]   ,      # 72 - F
[ 4.5,       1,    3.3,    4.125,     1.5,   1.5,     2,      3,     2.5,    5]   ,      # 73 - M
[ 3.5,        1,      3,     2.75,     2.5,   2.5,     2,    1.5,       4,    2]   ,      # 74 - F
[ 4.5,           5,    3.8,      4.5,       4,   3.5,     4,    4.5,       2,    4]   ,      # 75 - M
[ 3.5,         1,    2.8,      4.5,       4,     3,     3,      4,     4.5,    1]   ,      # 76 - F
[   4,         5,    4.2,      3.5,     3.5,   4.5,     2,    2.5,       3,    2]   ,      # 77 - F
[ 3.5,        1,    2.7,      3.5,       3,     2,     2,    1.5,       4,    2]   ,      # 78 - F
[ 3.5,          1,    3.6,        4,       3,   4.5,     5,      3,       2,    5]   ,      # 79 - F
[   4,        1,   1.53,      1.5,       1,     1,     1,      1,     1.5,    2]   ,      # 80 - M
[ 4.5,        1,   2.46,      3.5,     3.5,     3,     2,      4,       3,    3]   ,      # 81 - M
[   4,        1,    2.5,        5,       4,   3.5,     3,    1.5,     2.5,    2]   ,      # 82 - M
[   4,      1,    2.6,      3.5,       2,   3.5,     2,    4.5,       3,    5]   ,      # 83 - F
[   4,         1,      4,        5,     3.5,   3.5,     3,    3.5,       3,    5]   ,      # 84 - M
[ 3.5,       1,    2.8,    3.125,       4,     3,     3,    2.5,     2.5,    3]   ,      # 85 - F
[   4,        1,   3.83,        4,       2,   3.5,     3,    4.5,     3.5,    4]   ,      # 86 - F
[   4,        5,   3.66,        3,       3,     3,     3,      2,       3,    3]   ,      # 87 - M
[ 3.5,        1,   3.06,      4.5,       2,     3,     3,    1.5,       3,    3]   ,      # 88 - F
[ 3.5,         1,    2.6,      4.5,     2.5,     2,     2,    1.5,       4,    2]   ,      # 89 - F
[   3,       1,   2.66,     2.25,     2.5,   1.5,     3,    1.5,     3.5,    3]   ,      # 90 - F
[ 3.5,        1,   4.86,        4,     3.5,     4,     5,    2.5,     1.5,    2]   ,      # 91 - F
[   4,           5,    3.5,        2,       3,     1,     1,      1,       5,    1]   ,      # 92 - M
[ 3.5,        1,      3,     3.38,     1.5,   2.5,     4,    1.5,     3.5,    4]   ,      # 93 - F
[   5,        1,    3.4,     3.66,       2,   2.5,     4,      2,     2.5,    2]   ,      # 94 - M
[ 3.5,         1,    3.4,      3.5,     2.5,   2.5,     3,      2,     2.5,    2]   ,      # 95 - F
[ 3.5,           1,   3.27,     2.88,     2.5,   3.5,     3,    1.5,     2.5,    2]   ,      # 96 - F
[ 3.5,        1,   3.33,        4,       2,   3.5,     2,    1.5,     2.5,    2]   ,      # 97 - F
[   4,        1,   3.27,      3.5,       2,   2.5,     3,    2.5,       3,    3]   ,      # 98 - M
[ 3.5,        5,    2.6,     3.38,     2.5,   3.5,     2,    2.5,     3.5,    4]   ,      # 99 - F
[   5,           5,    2.7,     2.75,     2.5,   2.5,     4,      2,     2.5,    3]   ,      # 100 - M
[   3,        1,    2.7,        4,     3.5,   2.5,     4,    1.5,     2.5,    2]   ,      # 101 - F
[   4,        1,    2.5,      3.5,       2,     2,     3,    1.5,     3.5,    2]   ,      # 102 - F

])

# Bem-Estar: média das 4 perguntas do bem-estar
Y = np.array([
[   1.25   ] ,      # 6 - F
[   2.75   ] ,      # 7 - M
[   3.5    ]   ,    # 8 - M
[   2.75   ]   ,    # 9 - M
[   4.25   ]   ,    # 10 - M
[   3      ]   ,    # 11 - F
[   4      ]   ,    # 12 - M
[   3.5    ]   ,    # 13 - F
[   3      ]   ,    # 14 - M
[   3      ]   ,    # 15 - F
[   3      ]   ,    # 16 - F
[   3      ]   ,    # 17 - M
[   4      ] ,      # 18 - M
[   4      ] ,      # 19 - M
[   3      ]   ,    # 20 - F
[   3.5    ]   ,    # 21 - M
[   2.75   ]   ,    # 22 - M
[   2      ]   ,    # 23 - F
[   2.5    ]   ,    # 24 - F
[   1.75   ]   ,    # 25 - F
[   3.75   ]   ,    # 26 - M
[   3.5    ]   ,    # 27 - F
[   4      ]   ,    # 28 - M
[   1.75   ]   ,    # 29 - M
[   2.5    ]   ,    # 30 - M
[   5      ]   ,    # 31 - M
[   4.75   ]   ,    # 32 - M
[   3.75   ]   ,    # 33 - M
[   4.5    ]   ,    # 34 - M
[   2      ]   ,    # 35 - F
[   4      ]   ,    # 36 - M
[   3      ]   ,    # 37 - M
[   4      ]   ,    # 38 - M
[   3.75   ]   ,    # 39 - F
[   5      ]   ,    # 40 - M
[   1      ]   ,    # 41 - F
[   1.75   ]   ,    # 42 - F
[   3      ]   ,    # 43 - M
[   1.5    ]   ,    # 44 - F
[   2.75   ]   ,    # 45 - M
[   1      ]   ,    # 46 - F
[   3      ]   ,    # 47 - M
[   1.5    ]   ,    # 48 - M
[   2.75   ]   ,    # 49 - F
[   4.5    ]   ,    # 50 - M
[   4.5    ]   ,    # 51 - M
[   2.75   ]   ,    # 52 - F
[   4.25   ]   ,    # 53 - M
[   3.25   ]   ,    # 54 - M
[   3.75   ]   ,    # 55 - M
[   2      ]   ,    # 56 - M
[   3.75   ]   ,    # 57 - F
[   2.75   ]   ,    # 58 - M
[   2.5    ]   ,    # 59 - F
[   1      ]   ,    # 60 - M
[   4      ]   ,    # 61 - M
[   3      ]   ,    # 62 - M
[   3      ]   ,    # 63 - M
[   3      ]   ,    # 64 - F
[   3      ]   ,    # 65 - F
[   2.5    ]   ,    # 66 - M
[   2.5    ]   ,    # 67 - F
[   2.75   ]   ,    # 68 - M
[   3      ]   ,    # 69 - M
[   2      ]   ,    # 70 - F
[   2      ]   ,    # 71 - F
[   2      ]   ,    # 72 - F
[   3.5    ]   ,    # 73 - M
[   2.25   ]   ,    # 74 - F
[   4      ]   ,    # 75 - M
[   3.25   ]   ,    # 76 - F
[   3.5    ]   ,    # 77 - F
[   2      ]   ,    # 78 - F
[   5      ]   ,    # 79 - F
[   1.75   ]   ,    # 80 - M
[   3      ]   ,    # 81 - M
[   3.75   ]   ,    # 82 - M
[   3.5    ]   ,    # 83 - F
[   3      ]   ,    # 84 - M
[   3.25   ]   ,    # 85 - F
[   2.5    ]   ,    # 86 - F
[   3      ]   ,    # 87 - M
[   3      ]   ,    # 88 - F
[   2      ]   ,    # 89 - F
[   2.25   ]   ,    # 90 - F
[   3.5    ]   ,    # 91 - F
[   1      ]   ,    # 92 - M
[   2.5    ]   ,    # 93 - F
[   3.5    ]   ,    # 94 - M
[   3      ]   ,    # 95 - F
[   3.25   ]   ,    # 96 - F
[   3      ]   ,    # 97 - F
[   3      ]   ,    # 98 - M
[   3      ]   ,    # 99 - F
[   3      ]   ,    # 100 - M
[   3.25   ]   ,    # 101 - F
[   2      ]   ,    # 102 - F

])


'''
X_one = X
################################ Regressão Linear ###################
Xt = np.transpose(X)          # CRIA A TRANSPOSTA DA MATRIZ X (Xt)
XtX = np.matmul(Xt,X)         # MULTIPLICA Xt POR X
XtX_inv = np.linalg.inv(XtX)  # INVERTE (Xt*X)
XtY = np.matmul(Xt,Y)         # MULTIPLICA Xt POR Y
coef = np.matmul(XtX_inv,XtY) # TERMINA O CÁLCULO
print ("coeficientes: constante | informações pessoais | jornadas excessivas | falta de flexibilidade","", coef)
#####################################################################
print("")
Yprev = np.matmul(X_one,coef)
predY = Yprev
#################### Gráfico com os dados ##########################  Umidade
plt.xlabel('Informações Pessoais')
plt.ylabel('Prob. de felicidade')
plt.scatter(X[:,1],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
#################### Gráfico com os dados ########################## Temperatura
plt.xlabel('Jornadas Excessivas')
plt.ylabel('Prob. de felicidade')
plt.scatter(X[:,2],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
#################### Gráfico com os dados ########################## Vento
plt.xlabel('Falta de Flexibilidade')
plt.ylabel('Prob. de felicidade')
plt.scatter(X[:,3],Y,c = 'blue', s=15, alpha=0.5)
plt.show()
################## Gráfico com os dados reais x previstos###########
plt.scatter(Y,predY,c = 'blue', s=15, alpha=0.5)
plt.xlabel('Prob real')
plt.ylabel('Prob prev')
plt.show ()
#################### Gráfico dos resíduos ##########################
residual = Y - Yprev
plt.scatter(Y,residual,c = 'red', s=15, alpha=0.5)
plt.xlabel('Y')
plt.ylabel('Residual')
plt.title('Residual')
plt.show()'''
########################## Criação de dataFrame #########
# dicionário, Lista, DataFrame
import seaborn as sns
import pandas as pd
#Criar Data Frame
df = pd.DataFrame(np.append(X,Y,axis = 1))
print(df)

###### descobrir se há correlação entre as variáveis e a resposta
np.round(df.corr(),2)
sns.heatmap(df.corr(),cmap='coolwarm')
plt.show()

#print("Valores previstos pelo modelo:", predY)
#print("Valores reais:", Y)
#print("Diferença entres Valores previstos e reais (erro):",Y - predY)
#print("Soma dos erros", sum(Y - predY))

################## MODELO ########################################################
# Prob de chuva = 2,3942 + 0,99634.umidade + 1,1904.temperatura - 0,4004.velocidada
# intevalos estudados
# umidade:  20 - 60
# temperatura: 15 -35
# velocidade: 10 - 50

#exemplo, um dia com as condições umidade 35%, temperatura 30°C e velocidade 45 km/h
# resposta prevista= constante +     a. (umidade) +   b.  temperatura + c. velocidade
# Prob de chuva =     2,3942   +  0,99634.   (35) +  1,1904 . 30     - 0,4004  .45
# Prob de chuva = 54,96 %
###################################################################################